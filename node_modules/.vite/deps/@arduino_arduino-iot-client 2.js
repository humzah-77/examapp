import {
  require_fs,
  require_querystring
} from "./chunk-DH2RVKGU.js";
import {
  __commonJS,
  __require
} from "./chunk-OROXOI2D.js";

// node_modules/component-emitter/index.js
var require_component_emitter = __commonJS({
  "node_modules/component-emitter/index.js"(exports, module) {
    if (typeof module !== "undefined") {
      module.exports = Emitter;
    }
    function Emitter(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }
      return obj;
    }
    Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
      return this;
    };
    Emitter.prototype.once = function(event, fn) {
      function on() {
        this.off(event, on);
        fn.apply(this, arguments);
      }
      on.fn = fn;
      this.on(event, on);
      return this;
    };
    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      if (0 == arguments.length) {
        this._callbacks = {};
        return this;
      }
      var callbacks = this._callbacks["$" + event];
      if (!callbacks)
        return this;
      if (1 == arguments.length) {
        delete this._callbacks["$" + event];
        return this;
      }
      var cb;
      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i];
        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }
      if (callbacks.length === 0) {
        delete this._callbacks["$" + event];
      }
      return this;
    };
    Emitter.prototype.emit = function(event) {
      this._callbacks = this._callbacks || {};
      var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
      if (callbacks) {
        callbacks = callbacks.slice(0);
        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }
      return this;
    };
    Emitter.prototype.listeners = function(event) {
      this._callbacks = this._callbacks || {};
      return this._callbacks["$" + event] || [];
    };
    Emitter.prototype.hasListeners = function(event) {
      return !!this.listeners(event).length;
    };
  }
});

// node_modules/superagent/lib/is-object.js
var require_is_object = __commonJS({
  "node_modules/superagent/lib/is-object.js"(exports, module) {
    "use strict";
    function isObject(obj) {
      return null !== obj && "object" === typeof obj;
    }
    module.exports = isObject;
  }
});

// node_modules/superagent/lib/request-base.js
var require_request_base = __commonJS({
  "node_modules/superagent/lib/request-base.js"(exports, module) {
    "use strict";
    var isObject = require_is_object();
    module.exports = RequestBase;
    function RequestBase(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in RequestBase.prototype) {
        obj[key] = RequestBase.prototype[key];
      }
      return obj;
    }
    RequestBase.prototype.clearTimeout = function _clearTimeout() {
      clearTimeout(this._timer);
      clearTimeout(this._responseTimeoutTimer);
      delete this._timer;
      delete this._responseTimeoutTimer;
      return this;
    };
    RequestBase.prototype.parse = function parse(fn) {
      this._parser = fn;
      return this;
    };
    RequestBase.prototype.responseType = function(val) {
      this._responseType = val;
      return this;
    };
    RequestBase.prototype.serialize = function serialize(fn) {
      this._serializer = fn;
      return this;
    };
    RequestBase.prototype.timeout = function timeout(options) {
      if (!options || "object" !== typeof options) {
        this._timeout = options;
        this._responseTimeout = 0;
        return this;
      }
      for (var option in options) {
        switch (option) {
          case "deadline":
            this._timeout = options.deadline;
            break;
          case "response":
            this._responseTimeout = options.response;
            break;
          default:
            console.warn("Unknown timeout option", option);
        }
      }
      return this;
    };
    RequestBase.prototype.retry = function retry(count) {
      if (arguments.length === 0 || count === true)
        count = 1;
      if (count <= 0)
        count = 0;
      this._maxRetries = count;
      this._retries = 0;
      return this;
    };
    RequestBase.prototype._retry = function() {
      this.clearTimeout();
      if (this.req) {
        this.req = null;
        this.req = this.request();
      }
      this._aborted = false;
      this.timedout = false;
      return this._end();
    };
    RequestBase.prototype.then = function then(resolve, reject) {
      if (!this._fullfilledPromise) {
        var self2 = this;
        if (this._endCalled) {
          console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
        }
        this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {
          self2.end(function(err, res) {
            if (err)
              innerReject(err);
            else
              innerResolve(res);
          });
        });
      }
      return this._fullfilledPromise.then(resolve, reject);
    };
    RequestBase.prototype.catch = function(cb) {
      return this.then(void 0, cb);
    };
    RequestBase.prototype.use = function use(fn) {
      fn(this);
      return this;
    };
    RequestBase.prototype.ok = function(cb) {
      if ("function" !== typeof cb)
        throw Error("Callback required");
      this._okCallback = cb;
      return this;
    };
    RequestBase.prototype._isResponseOK = function(res) {
      if (!res) {
        return false;
      }
      if (this._okCallback) {
        return this._okCallback(res);
      }
      return res.status >= 200 && res.status < 300;
    };
    RequestBase.prototype.get = function(field) {
      return this._header[field.toLowerCase()];
    };
    RequestBase.prototype.getHeader = RequestBase.prototype.get;
    RequestBase.prototype.set = function(field, val) {
      if (isObject(field)) {
        for (var key in field) {
          this.set(key, field[key]);
        }
        return this;
      }
      this._header[field.toLowerCase()] = val;
      this.header[field] = val;
      return this;
    };
    RequestBase.prototype.unset = function(field) {
      delete this._header[field.toLowerCase()];
      delete this.header[field];
      return this;
    };
    RequestBase.prototype.field = function(name, val) {
      if (null === name || void 0 === name) {
        throw new Error(".field(name, val) name can not be empty");
      }
      if (this._data) {
        console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObject(name)) {
        for (var key in name) {
          this.field(key, name[key]);
        }
        return this;
      }
      if (Array.isArray(val)) {
        for (var i in val) {
          this.field(name, val[i]);
        }
        return this;
      }
      if (null === val || void 0 === val) {
        throw new Error(".field(name, val) val can not be empty");
      }
      if ("boolean" === typeof val) {
        val = "" + val;
      }
      this._getFormData().append(name, val);
      return this;
    };
    RequestBase.prototype.abort = function() {
      if (this._aborted) {
        return this;
      }
      this._aborted = true;
      this.xhr && this.xhr.abort();
      this.req && this.req.abort();
      this.clearTimeout();
      this.emit("abort");
      return this;
    };
    RequestBase.prototype.withCredentials = function(on) {
      if (on == void 0)
        on = true;
      this._withCredentials = on;
      return this;
    };
    RequestBase.prototype.redirects = function(n) {
      this._maxRedirects = n;
      return this;
    };
    RequestBase.prototype.maxResponseSize = function(n) {
      if ("number" !== typeof n) {
        throw TypeError("Invalid argument");
      }
      this._maxResponseSize = n;
      return this;
    };
    RequestBase.prototype.toJSON = function() {
      return {
        method: this.method,
        url: this.url,
        data: this._data,
        headers: this._header
      };
    };
    RequestBase.prototype.send = function(data) {
      var isObj = isObject(data);
      var type = this._header["content-type"];
      if (this._formData) {
        console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObj && !this._data) {
        if (Array.isArray(data)) {
          this._data = [];
        } else if (!this._isHost(data)) {
          this._data = {};
        }
      } else if (data && this._data && this._isHost(this._data)) {
        throw Error("Can't merge these send calls");
      }
      if (isObj && isObject(this._data)) {
        for (var key in data) {
          this._data[key] = data[key];
        }
      } else if ("string" == typeof data) {
        if (!type)
          this.type("form");
        type = this._header["content-type"];
        if ("application/x-www-form-urlencoded" == type) {
          this._data = this._data ? this._data + "&" + data : data;
        } else {
          this._data = (this._data || "") + data;
        }
      } else {
        this._data = data;
      }
      if (!isObj || this._isHost(data)) {
        return this;
      }
      if (!type)
        this.type("json");
      return this;
    };
    RequestBase.prototype.sortQuery = function(sort) {
      this._sort = typeof sort === "undefined" ? true : sort;
      return this;
    };
    RequestBase.prototype._finalizeQueryString = function() {
      var query = this._query.join("&");
      if (query) {
        this.url += (this.url.indexOf("?") >= 0 ? "&" : "?") + query;
      }
      this._query.length = 0;
      if (this._sort) {
        var index = this.url.indexOf("?");
        if (index >= 0) {
          var queryArr = this.url.substring(index + 1).split("&");
          if ("function" === typeof this._sort) {
            queryArr.sort(this._sort);
          } else {
            queryArr.sort();
          }
          this.url = this.url.substring(0, index) + "?" + queryArr.join("&");
        }
      }
    };
    RequestBase.prototype._appendQueryString = function() {
      console.trace("Unsupported");
    };
    RequestBase.prototype._timeoutError = function(reason, timeout, errno) {
      if (this._aborted) {
        return;
      }
      var err = new Error(reason + timeout + "ms exceeded");
      err.timeout = timeout;
      err.code = "ECONNABORTED";
      err.errno = errno;
      this.timedout = true;
      this.abort();
      this.callback(err);
    };
    RequestBase.prototype._setTimeouts = function() {
      var self2 = this;
      if (this._timeout && !this._timer) {
        this._timer = setTimeout(function() {
          self2._timeoutError("Timeout of ", self2._timeout, "ETIME");
        }, this._timeout);
      }
      if (this._responseTimeout && !this._responseTimeoutTimer) {
        this._responseTimeoutTimer = setTimeout(function() {
          self2._timeoutError("Response timeout of ", self2._responseTimeout, "ETIMEDOUT");
        }, this._responseTimeout);
      }
    };
  }
});

// node_modules/superagent/lib/utils.js
var require_utils = __commonJS({
  "node_modules/superagent/lib/utils.js"(exports) {
    "use strict";
    exports.type = function(str) {
      return str.split(/ *; */).shift();
    };
    exports.params = function(str) {
      return str.split(/ *; */).reduce(function(obj, str2) {
        var parts = str2.split(/ *= */);
        var key = parts.shift();
        var val = parts.shift();
        if (key && val)
          obj[key] = val;
        return obj;
      }, {});
    };
    exports.parseLinks = function(str) {
      return str.split(/ *, */).reduce(function(obj, str2) {
        var parts = str2.split(/ *; */);
        var url = parts[0].slice(1, -1);
        var rel = parts[1].split(/ *= */)[1].slice(1, -1);
        obj[rel] = url;
        return obj;
      }, {});
    };
    exports.cleanHeader = function(header, shouldStripCookie) {
      delete header["content-type"];
      delete header["content-length"];
      delete header["transfer-encoding"];
      delete header["host"];
      if (shouldStripCookie) {
        delete header["cookie"];
      }
      return header;
    };
  }
});

// node_modules/superagent/lib/response-base.js
var require_response_base = __commonJS({
  "node_modules/superagent/lib/response-base.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = ResponseBase;
    function ResponseBase(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in ResponseBase.prototype) {
        obj[key] = ResponseBase.prototype[key];
      }
      return obj;
    }
    ResponseBase.prototype.get = function(field) {
      return this.header[field.toLowerCase()];
    };
    ResponseBase.prototype._setHeaderProperties = function(header) {
      var ct = header["content-type"] || "";
      this.type = utils.type(ct);
      var params = utils.params(ct);
      for (var key in params)
        this[key] = params[key];
      this.links = {};
      try {
        if (header.link) {
          this.links = utils.parseLinks(header.link);
        }
      } catch (err) {
      }
    };
    ResponseBase.prototype._setStatusProperties = function(status) {
      var type = status / 100 | 0;
      this.status = this.statusCode = status;
      this.statusType = type;
      this.info = 1 == type;
      this.ok = 2 == type;
      this.redirect = 3 == type;
      this.clientError = 4 == type;
      this.serverError = 5 == type;
      this.error = 4 == type || 5 == type ? this.toError() : false;
      this.accepted = 202 == status;
      this.noContent = 204 == status;
      this.badRequest = 400 == status;
      this.unauthorized = 401 == status;
      this.notAcceptable = 406 == status;
      this.forbidden = 403 == status;
      this.notFound = 404 == status;
    };
  }
});

// node_modules/superagent/lib/should-retry.js
var require_should_retry = __commonJS({
  "node_modules/superagent/lib/should-retry.js"(exports, module) {
    "use strict";
    var ERROR_CODES = [
      "ECONNRESET",
      "ETIMEDOUT",
      "EADDRINFO",
      "ESOCKETTIMEDOUT"
    ];
    module.exports = function shouldRetry(err, res) {
      if (err && err.code && ~ERROR_CODES.indexOf(err.code))
        return true;
      if (res && res.status && res.status >= 500)
        return true;
      if (err && "timeout" in err && err.code == "ECONNABORTED")
        return true;
      if (err && "crossDomain" in err)
        return true;
      return false;
    };
  }
});

// node_modules/superagent/lib/client.js
var require_client = __commonJS({
  "node_modules/superagent/lib/client.js"(exports, module) {
    var root;
    if (typeof window !== "undefined") {
      root = window;
    } else if (typeof self !== "undefined") {
      root = self;
    } else {
      console.warn("Using browser-only version of superagent in non-browser environment");
      root = exports;
    }
    var Emitter = require_component_emitter();
    var RequestBase = require_request_base();
    var isObject = require_is_object();
    var ResponseBase = require_response_base();
    var shouldRetry = require_should_retry();
    function noop() {
    }
    var request = exports = module.exports = function(method, url) {
      if ("function" == typeof url) {
        return new exports.Request("GET", method).end(url);
      }
      if (1 == arguments.length) {
        return new exports.Request("GET", method);
      }
      return new exports.Request(method, url);
    };
    exports.Request = Request;
    request.getXHR = function() {
      if (root.XMLHttpRequest && (!root.location || "file:" != root.location.protocol || !root.ActiveXObject)) {
        return new XMLHttpRequest();
      } else {
        try {
          return new ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {
        }
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.6.0");
        } catch (e) {
        }
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.3.0");
        } catch (e) {
        }
        try {
          return new ActiveXObject("Msxml2.XMLHTTP");
        } catch (e) {
        }
      }
      throw Error("Browser-only version of superagent could not find XHR");
    };
    var trim = "".trim ? function(s) {
      return s.trim();
    } : function(s) {
      return s.replace(/(^\s*|\s*$)/g, "");
    };
    function serialize(obj) {
      if (!isObject(obj))
        return obj;
      var pairs = [];
      for (var key in obj) {
        pushEncodedKeyValuePair(pairs, key, obj[key]);
      }
      return pairs.join("&");
    }
    function pushEncodedKeyValuePair(pairs, key, val) {
      if (val != null) {
        if (Array.isArray(val)) {
          val.forEach(function(v) {
            pushEncodedKeyValuePair(pairs, key, v);
          });
        } else if (isObject(val)) {
          for (var subkey in val) {
            pushEncodedKeyValuePair(pairs, key + "[" + subkey + "]", val[subkey]);
          }
        } else {
          pairs.push(encodeURIComponent(key) + "=" + encodeURIComponent(val));
        }
      } else if (val === null) {
        pairs.push(encodeURIComponent(key));
      }
    }
    request.serializeObject = serialize;
    function parseString(str) {
      var obj = {};
      var pairs = str.split("&");
      var pair;
      var pos;
      for (var i = 0, len = pairs.length; i < len; ++i) {
        pair = pairs[i];
        pos = pair.indexOf("=");
        if (pos == -1) {
          obj[decodeURIComponent(pair)] = "";
        } else {
          obj[decodeURIComponent(pair.slice(0, pos))] = decodeURIComponent(pair.slice(pos + 1));
        }
      }
      return obj;
    }
    request.parseString = parseString;
    request.types = {
      html: "text/html",
      json: "application/json",
      xml: "text/xml",
      urlencoded: "application/x-www-form-urlencoded",
      "form": "application/x-www-form-urlencoded",
      "form-data": "application/x-www-form-urlencoded"
    };
    request.serialize = {
      "application/x-www-form-urlencoded": serialize,
      "application/json": JSON.stringify
    };
    request.parse = {
      "application/x-www-form-urlencoded": parseString,
      "application/json": JSON.parse
    };
    function parseHeader(str) {
      var lines = str.split(/\r?\n/);
      var fields = {};
      var index;
      var line;
      var field;
      var val;
      for (var i = 0, len = lines.length; i < len; ++i) {
        line = lines[i];
        index = line.indexOf(":");
        if (index === -1) {
          continue;
        }
        field = line.slice(0, index).toLowerCase();
        val = trim(line.slice(index + 1));
        fields[field] = val;
      }
      return fields;
    }
    function isJSON(mime) {
      return /[\/+]json\b/.test(mime);
    }
    function Response(req) {
      this.req = req;
      this.xhr = this.req.xhr;
      this.text = this.req.method != "HEAD" && (this.xhr.responseType === "" || this.xhr.responseType === "text") || typeof this.xhr.responseType === "undefined" ? this.xhr.responseText : null;
      this.statusText = this.req.xhr.statusText;
      var status = this.xhr.status;
      if (status === 1223) {
        status = 204;
      }
      this._setStatusProperties(status);
      this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
      this.header["content-type"] = this.xhr.getResponseHeader("content-type");
      this._setHeaderProperties(this.header);
      if (null === this.text && req._responseType) {
        this.body = this.xhr.response;
      } else {
        this.body = this.req.method != "HEAD" ? this._parseBody(this.text ? this.text : this.xhr.response) : null;
      }
    }
    ResponseBase(Response.prototype);
    Response.prototype._parseBody = function(str) {
      var parse = request.parse[this.type];
      if (this.req._parser) {
        return this.req._parser(this, str);
      }
      if (!parse && isJSON(this.type)) {
        parse = request.parse["application/json"];
      }
      return parse && str && (str.length || str instanceof Object) ? parse(str) : null;
    };
    Response.prototype.toError = function() {
      var req = this.req;
      var method = req.method;
      var url = req.url;
      var msg = "cannot " + method + " " + url + " (" + this.status + ")";
      var err = new Error(msg);
      err.status = this.status;
      err.method = method;
      err.url = url;
      return err;
    };
    request.Response = Response;
    function Request(method, url) {
      var self2 = this;
      this._query = this._query || [];
      this.method = method;
      this.url = url;
      this.header = {};
      this._header = {};
      this.on("end", function() {
        var err = null;
        var res = null;
        try {
          res = new Response(self2);
        } catch (e) {
          err = new Error("Parser is unable to parse the response");
          err.parse = true;
          err.original = e;
          if (self2.xhr) {
            err.rawResponse = typeof self2.xhr.responseType == "undefined" ? self2.xhr.responseText : self2.xhr.response;
            err.status = self2.xhr.status ? self2.xhr.status : null;
            err.statusCode = err.status;
          } else {
            err.rawResponse = null;
            err.status = null;
          }
          return self2.callback(err);
        }
        self2.emit("response", res);
        var new_err;
        try {
          if (!self2._isResponseOK(res)) {
            new_err = new Error(res.statusText || "Unsuccessful HTTP response");
          }
        } catch (custom_err) {
          new_err = custom_err;
        }
        if (new_err) {
          new_err.original = err;
          new_err.response = res;
          new_err.status = res.status;
          self2.callback(new_err, res);
        } else {
          self2.callback(null, res);
        }
      });
    }
    Emitter(Request.prototype);
    RequestBase(Request.prototype);
    Request.prototype.type = function(type) {
      this.set("Content-Type", request.types[type] || type);
      return this;
    };
    Request.prototype.accept = function(type) {
      this.set("Accept", request.types[type] || type);
      return this;
    };
    Request.prototype.auth = function(user, pass, options) {
      if (typeof pass === "object" && pass !== null) {
        options = pass;
      }
      if (!options) {
        options = {
          type: "function" === typeof btoa ? "basic" : "auto"
        };
      }
      switch (options.type) {
        case "basic":
          this.set("Authorization", "Basic " + btoa(user + ":" + pass));
          break;
        case "auto":
          this.username = user;
          this.password = pass;
          break;
        case "bearer":
          this.set("Authorization", "Bearer " + user);
          break;
      }
      return this;
    };
    Request.prototype.query = function(val) {
      if ("string" != typeof val)
        val = serialize(val);
      if (val)
        this._query.push(val);
      return this;
    };
    Request.prototype.attach = function(field, file, options) {
      if (file) {
        if (this._data) {
          throw Error("superagent can't mix .send() and .attach()");
        }
        this._getFormData().append(field, file, options || file.name);
      }
      return this;
    };
    Request.prototype._getFormData = function() {
      if (!this._formData) {
        this._formData = new root.FormData();
      }
      return this._formData;
    };
    Request.prototype.callback = function(err, res) {
      if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {
        return this._retry();
      }
      var fn = this._callback;
      this.clearTimeout();
      if (err) {
        if (this._maxRetries)
          err.retries = this._retries - 1;
        this.emit("error", err);
      }
      fn(err, res);
    };
    Request.prototype.crossDomainError = function() {
      var err = new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");
      err.crossDomain = true;
      err.status = this.status;
      err.method = this.method;
      err.url = this.url;
      this.callback(err);
    };
    Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function() {
      console.warn("This is not supported in browser version of superagent");
      return this;
    };
    Request.prototype.pipe = Request.prototype.write = function() {
      throw Error("Streaming is not supported in browser version of superagent");
    };
    Request.prototype._isHost = function _isHost(obj) {
      return obj && "object" === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== "[object Object]";
    };
    Request.prototype.end = function(fn) {
      if (this._endCalled) {
        console.warn("Warning: .end() was called twice. This is not supported in superagent");
      }
      this._endCalled = true;
      this._callback = fn || noop;
      this._finalizeQueryString();
      return this._end();
    };
    Request.prototype._end = function() {
      var self2 = this;
      var xhr = this.xhr = request.getXHR();
      var data = this._formData || this._data;
      this._setTimeouts();
      xhr.onreadystatechange = function() {
        var readyState = xhr.readyState;
        if (readyState >= 2 && self2._responseTimeoutTimer) {
          clearTimeout(self2._responseTimeoutTimer);
        }
        if (4 != readyState) {
          return;
        }
        var status;
        try {
          status = xhr.status;
        } catch (e) {
          status = 0;
        }
        if (!status) {
          if (self2.timedout || self2._aborted)
            return;
          return self2.crossDomainError();
        }
        self2.emit("end");
      };
      var handleProgress = function(direction, e) {
        if (e.total > 0) {
          e.percent = e.loaded / e.total * 100;
        }
        e.direction = direction;
        self2.emit("progress", e);
      };
      if (this.hasListeners("progress")) {
        try {
          xhr.onprogress = handleProgress.bind(null, "download");
          if (xhr.upload) {
            xhr.upload.onprogress = handleProgress.bind(null, "upload");
          }
        } catch (e) {
        }
      }
      try {
        if (this.username && this.password) {
          xhr.open(this.method, this.url, true, this.username, this.password);
        } else {
          xhr.open(this.method, this.url, true);
        }
      } catch (err) {
        return this.callback(err);
      }
      if (this._withCredentials)
        xhr.withCredentials = true;
      if (!this._formData && "GET" != this.method && "HEAD" != this.method && "string" != typeof data && !this._isHost(data)) {
        var contentType = this._header["content-type"];
        var serialize2 = this._serializer || request.serialize[contentType ? contentType.split(";")[0] : ""];
        if (!serialize2 && isJSON(contentType)) {
          serialize2 = request.serialize["application/json"];
        }
        if (serialize2)
          data = serialize2(data);
      }
      for (var field in this.header) {
        if (null == this.header[field])
          continue;
        if (this.header.hasOwnProperty(field))
          xhr.setRequestHeader(field, this.header[field]);
      }
      if (this._responseType) {
        xhr.responseType = this._responseType;
      }
      this.emit("request", this);
      xhr.send(typeof data !== "undefined" ? data : null);
      return this;
    };
    request.get = function(url, data, fn) {
      var req = request("GET", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.query(data);
      if (fn)
        req.end(fn);
      return req;
    };
    request.head = function(url, data, fn) {
      var req = request("HEAD", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.query(data);
      if (fn)
        req.end(fn);
      return req;
    };
    request.options = function(url, data, fn) {
      var req = request("OPTIONS", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.send(data);
      if (fn)
        req.end(fn);
      return req;
    };
    function del(url, data, fn) {
      var req = request("DELETE", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.send(data);
      if (fn)
        req.end(fn);
      return req;
    }
    request["del"] = del;
    request["delete"] = del;
    request.patch = function(url, data, fn) {
      var req = request("PATCH", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.send(data);
      if (fn)
        req.end(fn);
      return req;
    };
    request.post = function(url, data, fn) {
      var req = request("POST", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.send(data);
      if (fn)
        req.end(fn);
      return req;
    };
    request.put = function(url, data, fn) {
      var req = request("PUT", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.send(data);
      if (fn)
        req.end(fn);
      return req;
    };
  }
});

// node_modules/@arduino/arduino-iot-client/dist/ApiClient.js
var require_ApiClient = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/ApiClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _superagent = _interopRequireDefault(require_client());
    var _querystring = _interopRequireDefault(require_querystring());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ApiClient = function() {
      function ApiClient2() {
        _classCallCheck(this, ApiClient2);
        this.basePath = "https://api2.arduino.cc/iot".replace(/\/+$/, "");
        this.authentications = {
          "oauth2": {
            type: "oauth2"
          }
        };
        this.defaultHeaders = {};
        this.timeout = 6e4;
        this.cache = true;
        this.enableCookies = false;
        if (typeof window === "undefined") {
          this.agent = new _superagent["default"].agent();
        }
        this.requestAgent = null;
        this.plugins = null;
      }
      _createClass(ApiClient2, [{
        key: "paramToString",
        value: function paramToString(param) {
          if (param == void 0 || param == null) {
            return "";
          }
          if (param instanceof Date) {
            return param.toJSON();
          }
          return param.toString();
        }
        /**
         * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
         * NOTE: query parameters are not handled here.
         * @param {String} path The path to append to the base URL.
         * @param {Object} pathParams The parameter values to append.
         * @param {String} apiBasePath Base path defined in the path, operation level to override the default one
         * @returns {String} The encoded path with parameter values substituted.
         */
      }, {
        key: "buildUrl",
        value: function buildUrl(path, pathParams, apiBasePath) {
          var _this = this;
          if (!path.match(/^\//)) {
            path = "/" + path;
          }
          var url = this.basePath + path;
          if (apiBasePath !== null && apiBasePath !== void 0) {
            url = apiBasePath + path;
          }
          url = url.replace(/\{([\w-]+)\}/g, function(fullMatch, key) {
            var value;
            if (pathParams.hasOwnProperty(key)) {
              value = _this.paramToString(pathParams[key]);
            } else {
              value = fullMatch;
            }
            return encodeURIComponent(value);
          });
          return url;
        }
        /**
        * Checks whether the given content type represents JSON.<br>
        * JSON content type examples:<br>
        * <ul>
        * <li>application/json</li>
        * <li>application/json; charset=UTF8</li>
        * <li>APPLICATION/JSON</li>
        * </ul>
        * @param {String} contentType The MIME content type to check.
        * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
        */
      }, {
        key: "isJsonMime",
        value: function isJsonMime(contentType) {
          return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
        }
        /**
        * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
        * @param {Array.<String>} contentTypes
        * @returns {String} The chosen content type, preferring JSON.
        */
      }, {
        key: "jsonPreferredMime",
        value: function jsonPreferredMime(contentTypes) {
          for (var i = 0; i < contentTypes.length; i++) {
            if (this.isJsonMime(contentTypes[i])) {
              return contentTypes[i];
            }
          }
          return contentTypes[0];
        }
        /**
        * Checks whether the given parameter value represents file-like content.
        * @param param The parameter to check.
        * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
        */
      }, {
        key: "isFileParam",
        value: function isFileParam(param) {
          if (typeof __require === "function") {
            var fs;
            try {
              fs = require_fs();
            } catch (err) {
            }
            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {
              return true;
            }
          }
          if (typeof Buffer === "function" && param instanceof Buffer) {
            return true;
          }
          if (typeof Blob === "function" && param instanceof Blob) {
            return true;
          }
          if (typeof File === "function" && param instanceof File) {
            return true;
          }
          return false;
        }
        /**
        * Normalizes parameter values:
        * <ul>
        * <li>remove nils</li>
        * <li>keep files and arrays</li>
        * <li>format to string with `paramToString` for other cases</li>
        * </ul>
        * @param {Object.<String, Object>} params The parameters as object properties.
        * @returns {Object.<String, Object>} normalized parameters.
        */
      }, {
        key: "normalizeParams",
        value: function normalizeParams(params) {
          var newParams = {};
          for (var key in params) {
            if (params.hasOwnProperty(key) && params[key] != void 0 && params[key] != null) {
              var value = params[key];
              if (this.isFileParam(value) || Array.isArray(value)) {
                newParams[key] = value;
              } else {
                newParams[key] = this.paramToString(value);
              }
            }
          }
          return newParams;
        }
        /**
        * Builds a string representation of an array-type actual parameter, according to the given collection format.
        * @param {Array} param An array parameter.
        * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.
        * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
        * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
        */
      }, {
        key: "buildCollectionParam",
        value: function buildCollectionParam(param, collectionFormat) {
          if (param == null) {
            return null;
          }
          switch (collectionFormat) {
            case "csv":
              return param.map(this.paramToString).join(",");
            case "ssv":
              return param.map(this.paramToString).join(" ");
            case "tsv":
              return param.map(this.paramToString).join("	");
            case "pipes":
              return param.map(this.paramToString).join("|");
            case "multi":
              return param.map(this.paramToString);
            default:
              throw new Error("Unknown collection format: " + collectionFormat);
          }
        }
        /**
        * Applies authentication headers to the request.
        * @param {Object} request The request object created by a <code>superagent()</code> call.
        * @param {Array.<String>} authNames An array of authentication method names.
        */
      }, {
        key: "applyAuthToRequest",
        value: function applyAuthToRequest(request, authNames) {
          var _this2 = this;
          authNames.forEach(function(authName) {
            var auth = _this2.authentications[authName];
            switch (auth.type) {
              case "basic":
                if (auth.username || auth.password) {
                  request.auth(auth.username || "", auth.password || "");
                }
                break;
              case "bearer":
                if (auth.accessToken) {
                  request.set({
                    "Authorization": "Bearer " + auth.accessToken
                  });
                }
                break;
              case "apiKey":
                if (auth.apiKey) {
                  var data = {};
                  if (auth.apiKeyPrefix) {
                    data[auth.name] = auth.apiKeyPrefix + " " + auth.apiKey;
                  } else {
                    data[auth.name] = auth.apiKey;
                  }
                  if (auth["in"] === "header") {
                    request.set(data);
                  } else {
                    request.query(data);
                  }
                }
                break;
              case "oauth2":
                if (auth.accessToken) {
                  request.set({
                    "Authorization": "Bearer " + auth.accessToken
                  });
                }
                break;
              default:
                throw new Error("Unknown authentication type: " + auth.type);
            }
          });
        }
        /**
         * Deserializes an HTTP response body into a value of the specified type.
         * @param {Object} response A SuperAgent response object.
         * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types
         * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
         * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
         * all properties on <code>data<code> will be converted to this type.
         * @returns A value of the specified type.
         */
      }, {
        key: "deserialize",
        value: function deserialize(response, returnType) {
          if (response == null || returnType == null || response.status == 204) {
            return null;
          }
          var data = response.body;
          if (data == null || _typeof(data) === "object" && typeof data.length === "undefined" && !Object.keys(data).length) {
            data = JSON.parse(response.text);
          }
          return ApiClient2.convertToType(data, returnType);
        }
        /**
         * Invokes the REST service using the supplied settings and parameters.
         * @param {String} path The base URL to invoke.
         * @param {String} httpMethod The HTTP method to use.
         * @param {Object.<String, String>} pathParams A map of path parameters and their values.
         * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
         * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
         * @param {Object.<String, Object>} formParams A map of form parameters and their values.
         * @param {Object} bodyParam The value to pass as the request body.
         * @param {Array.<String>} authNames An array of authentication type names.
         * @param {Array.<String>} contentTypes An array of request MIME types.
         * @param {Array.<String>} accepts An array of acceptable response MIME types.
         * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the
         * constructor for a complex type.
         * @param {String} apiBasePath base path defined in the operation/path level to override the default one
         * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.
         */
      }, {
        key: "callApi",
        value: function callApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType, apiBasePath) {
          var _this3 = this;
          var url = this.buildUrl(path, pathParams, apiBasePath);
          var request = (0, _superagent["default"])(httpMethod, url);
          if (this.plugins !== null) {
            for (var index in this.plugins) {
              if (this.plugins.hasOwnProperty(index)) {
                request.use(this.plugins[index]);
              }
            }
          }
          this.applyAuthToRequest(request, authNames);
          if (httpMethod.toUpperCase() === "GET" && this.cache === false) {
            queryParams["_"] = new Date().getTime();
          }
          request.query(this.normalizeParams(queryParams));
          request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));
          if (this.requestAgent) {
            request.agent(this.requestAgent);
          }
          request.timeout(this.timeout);
          var contentType = this.jsonPreferredMime(contentTypes);
          if (contentType) {
            if (contentType != "multipart/form-data") {
              request.type(contentType);
            }
          }
          if (contentType === "application/x-www-form-urlencoded") {
            request.send(_querystring["default"].stringify(this.normalizeParams(formParams)));
          } else if (contentType == "multipart/form-data") {
            var _formParams = this.normalizeParams(formParams);
            for (var key in _formParams) {
              if (_formParams.hasOwnProperty(key)) {
                if (this.isFileParam(_formParams[key])) {
                  request.attach(key, _formParams[key]);
                } else {
                  request.field(key, _formParams[key]);
                }
              }
            }
          } else if (bodyParam !== null && bodyParam !== void 0) {
            if (!request.header["Content-Type"]) {
              request.type("application/json");
            }
            request.send(bodyParam);
          }
          var accept = this.jsonPreferredMime(accepts);
          if (accept) {
            request.accept(accept);
          }
          if (returnType === "Blob") {
            request.responseType("blob");
          } else if (returnType === "String") {
            request.responseType("string");
          }
          if (this.enableCookies) {
            if (typeof window === "undefined") {
              this.agent._attachCookies(request);
            } else {
              request.withCredentials();
            }
          }
          return new Promise(function(resolve, reject) {
            request.end(function(error, response) {
              if (error) {
                var err = {};
                if (response) {
                  err.status = response.status;
                  err.statusText = response.statusText;
                  err.body = response.body;
                  err.response = response;
                }
                err.error = error;
                reject(err);
              } else {
                try {
                  var data = _this3.deserialize(response, returnType);
                  if (_this3.enableCookies && typeof window === "undefined") {
                    _this3.agent._saveCookies(response);
                  }
                  resolve({
                    data,
                    response
                  });
                } catch (err2) {
                  reject(err2);
                }
              }
            });
          });
        }
        /**
        * Parses an ISO-8601 string representation of a date value.
        * @param {String} str The date value as a string.
        * @returns {Date} The parsed date object.
        */
      }, {
        key: "hostSettings",
        /**
          * Gets an array of host settings
          * @returns An array of host settings
          */
        value: function hostSettings() {
          return [{
            "url": "https://api2.arduino.cc/iot",
            "description": "No description provided"
          }];
        }
      }, {
        key: "getBasePathFromSettings",
        value: function getBasePathFromSettings(index) {
          var variables = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var servers = this.hostSettings();
          if (index < 0 || index >= servers.length) {
            throw new Error("Invalid index " + index + " when selecting the host settings. Must be less than " + servers.length);
          }
          var server = servers[index];
          var url = server["url"];
          for (var variable_name in server["variables"]) {
            if (variable_name in variables) {
              var variable = server["variables"][variable_name];
              if (!("enum_values" in variable) || variable["enum_values"].includes(variables[variable_name])) {
                url = url.replace("{" + variable_name + "}", variables[variable_name]);
              } else {
                throw new Error("The variable `" + variable_name + "` in the host URL has invalid value " + variables[variable_name] + ". Must be " + server["variables"][variable_name]["enum_values"] + ".");
              }
            } else {
              url = url.replace("{" + variable_name + "}", server["variables"][variable_name]["default_value"]);
            }
          }
          return url;
        }
        /**
        * Constructs a new map or array model from REST data.
        * @param data {Object|Array} The REST data.
        * @param obj {Object|Array} The target object or array.
        */
      }], [{
        key: "parseDate",
        value: function parseDate(str) {
          return new Date(str);
        }
        /**
        * Converts a value to the specified type.
        * @param {(String|Object)} data The data to convert, as a string or object.
        * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types
        * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
        * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
        * all properties on <code>data<code> will be converted to this type.
        * @returns An instance of the specified type or null or undefined if data is null or undefined.
        */
      }, {
        key: "convertToType",
        value: function convertToType(data, type) {
          if (data === null || data === void 0)
            return data;
          switch (type) {
            case "Boolean":
              return Boolean(data);
            case "Integer":
              return parseInt(data, 10);
            case "Number":
              return parseFloat(data);
            case "String":
              return String(data);
            case "Date":
              return ApiClient2.parseDate(String(data));
            case "Blob":
              return data;
            default:
              if (type === Object) {
                return data;
              } else if (typeof type.constructFromObject === "function") {
                return type.constructFromObject(data);
              } else if (Array.isArray(type)) {
                var itemType = type[0];
                return data.map(function(item) {
                  return ApiClient2.convertToType(item, itemType);
                });
              } else if (_typeof(type) === "object") {
                var keyType, valueType;
                for (var k in type) {
                  if (type.hasOwnProperty(k)) {
                    keyType = k;
                    valueType = type[k];
                    break;
                  }
                }
                var result = {};
                for (var k in data) {
                  if (data.hasOwnProperty(k)) {
                    var key = ApiClient2.convertToType(k, keyType);
                    var value = ApiClient2.convertToType(data[k], valueType);
                    result[key] = value;
                  }
                }
                return result;
              } else {
                return data;
              }
          }
        }
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj, itemType) {
          if (Array.isArray(data)) {
            for (var i = 0; i < data.length; i++) {
              if (data.hasOwnProperty(i))
                obj[i] = ApiClient2.convertToType(data[i], itemType);
            }
          } else {
            for (var k in data) {
              if (data.hasOwnProperty(k))
                obj[k] = ApiClient2.convertToType(data[k], itemType);
            }
          }
        }
      }]);
      return ApiClient2;
    }();
    ApiClient.CollectionFormatEnum = {
      /**
       * Comma-separated values. Value: <code>csv</code>
       * @const
       */
      CSV: ",",
      /**
       * Space-separated values. Value: <code>ssv</code>
       * @const
       */
      SSV: " ",
      /**
       * Tab-separated values. Value: <code>tsv</code>
       * @const
       */
      TSV: "	",
      /**
       * Pipe(|)-separated values. Value: <code>pipes</code>
       * @const
       */
      PIPES: "|",
      /**
       * Native array. Value: <code>multi</code>
       * @const
       */
      MULTI: "multi"
    };
    ApiClient.instance = new ApiClient();
    var _default = ApiClient;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoCompressedv2.js
var require_ArduinoCompressedv2 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoCompressedv2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoCompressedv2 = function() {
      function ArduinoCompressedv22(notAfter, notBefore, serial, signature, signatureAsn1X, signatureAsn1Y) {
        _classCallCheck(this, ArduinoCompressedv22);
        ArduinoCompressedv22.initialize(this, notAfter, notBefore, serial, signature, signatureAsn1X, signatureAsn1Y);
      }
      _createClass(ArduinoCompressedv22, null, [{
        key: "initialize",
        value: function initialize(obj, notAfter, notBefore, serial, signature, signatureAsn1X, signatureAsn1Y) {
          obj["not_after"] = notAfter;
          obj["not_before"] = notBefore;
          obj["serial"] = serial;
          obj["signature"] = signature;
          obj["signature_asn1_x"] = signatureAsn1X;
          obj["signature_asn1_y"] = signatureAsn1Y;
        }
        /**
         * Constructs a <code>ArduinoCompressedv2</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoCompressedv2} obj Optional instance to populate.
         * @return {module:model/ArduinoCompressedv2} The populated <code>ArduinoCompressedv2</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoCompressedv22();
            if (data.hasOwnProperty("authority_key_identifier")) {
              obj["authority_key_identifier"] = _ApiClient["default"].convertToType(data["authority_key_identifier"], "String");
            }
            if (data.hasOwnProperty("not_after")) {
              obj["not_after"] = _ApiClient["default"].convertToType(data["not_after"], "Date");
            }
            if (data.hasOwnProperty("not_before")) {
              obj["not_before"] = _ApiClient["default"].convertToType(data["not_before"], "Date");
            }
            if (data.hasOwnProperty("serial")) {
              obj["serial"] = _ApiClient["default"].convertToType(data["serial"], "String");
            }
            if (data.hasOwnProperty("signature")) {
              obj["signature"] = _ApiClient["default"].convertToType(data["signature"], "String");
            }
            if (data.hasOwnProperty("signature_asn1_x")) {
              obj["signature_asn1_x"] = _ApiClient["default"].convertToType(data["signature_asn1_x"], "String");
            }
            if (data.hasOwnProperty("signature_asn1_y")) {
              obj["signature_asn1_y"] = _ApiClient["default"].convertToType(data["signature_asn1_y"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoCompressedv22;
    }();
    ArduinoCompressedv2.prototype["authority_key_identifier"] = void 0;
    ArduinoCompressedv2.prototype["not_after"] = void 0;
    ArduinoCompressedv2.prototype["not_before"] = void 0;
    ArduinoCompressedv2.prototype["serial"] = void 0;
    ArduinoCompressedv2.prototype["signature"] = void 0;
    ArduinoCompressedv2.prototype["signature_asn1_x"] = void 0;
    ArduinoCompressedv2.prototype["signature_asn1_y"] = void 0;
    var _default = ArduinoCompressedv2;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDashboardowner.js
var require_ArduinoDashboardowner = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDashboardowner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDashboardowner = function() {
      function ArduinoDashboardowner2(userId) {
        _classCallCheck(this, ArduinoDashboardowner2);
        ArduinoDashboardowner2.initialize(this, userId);
      }
      _createClass(ArduinoDashboardowner2, null, [{
        key: "initialize",
        value: function initialize(obj, userId) {
          obj["user_id"] = userId;
        }
        /**
         * Constructs a <code>ArduinoDashboardowner</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDashboardowner} obj Optional instance to populate.
         * @return {module:model/ArduinoDashboardowner} The populated <code>ArduinoDashboardowner</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDashboardowner2();
            if (data.hasOwnProperty("user_id")) {
              obj["user_id"] = _ApiClient["default"].convertToType(data["user_id"], "String");
            }
            if (data.hasOwnProperty("username")) {
              obj["username"] = _ApiClient["default"].convertToType(data["username"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoDashboardowner2;
    }();
    ArduinoDashboardowner.prototype["user_id"] = void 0;
    ArduinoDashboardowner.prototype["username"] = void 0;
    var _default = ArduinoDashboardowner;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDashboardshare.js
var require_ArduinoDashboardshare = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDashboardshare.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDashboardshare = function() {
      function ArduinoDashboardshare2(userId) {
        _classCallCheck(this, ArduinoDashboardshare2);
        ArduinoDashboardshare2.initialize(this, userId);
      }
      _createClass(ArduinoDashboardshare2, null, [{
        key: "initialize",
        value: function initialize(obj, userId) {
          obj["user_id"] = userId;
        }
        /**
         * Constructs a <code>ArduinoDashboardshare</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDashboardshare} obj Optional instance to populate.
         * @return {module:model/ArduinoDashboardshare} The populated <code>ArduinoDashboardshare</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDashboardshare2();
            if (data.hasOwnProperty("user_id")) {
              obj["user_id"] = _ApiClient["default"].convertToType(data["user_id"], "String");
            }
            if (data.hasOwnProperty("username")) {
              obj["username"] = _ApiClient["default"].convertToType(data["username"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoDashboardshare2;
    }();
    ArduinoDashboardshare.prototype["user_id"] = void 0;
    ArduinoDashboardshare.prototype["username"] = void 0;
    var _default = ArduinoDashboardshare;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoTimezone.js
var require_ArduinoTimezone = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoTimezone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoTimezone = function() {
      function ArduinoTimezone2(name, offset) {
        _classCallCheck(this, ArduinoTimezone2);
        ArduinoTimezone2.initialize(this, name, offset);
      }
      _createClass(ArduinoTimezone2, null, [{
        key: "initialize",
        value: function initialize(obj, name, offset) {
          obj["name"] = name;
          obj["offset"] = offset;
        }
        /**
         * Constructs a <code>ArduinoTimezone</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoTimezone} obj Optional instance to populate.
         * @return {module:model/ArduinoTimezone} The populated <code>ArduinoTimezone</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoTimezone2();
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("offset")) {
              obj["offset"] = _ApiClient["default"].convertToType(data["offset"], "Number");
            }
            if (data.hasOwnProperty("until")) {
              obj["until"] = _ApiClient["default"].convertToType(data["until"], "Date");
            }
          }
          return obj;
        }
      }]);
      return ArduinoTimezone2;
    }();
    ArduinoTimezone.prototype["name"] = void 0;
    ArduinoTimezone.prototype["offset"] = void 0;
    ArduinoTimezone.prototype["until"] = void 0;
    var _default = ArduinoTimezone;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoLinkedvariable.js
var require_ArduinoLinkedvariable = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoLinkedvariable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoTimezone = _interopRequireDefault(require_ArduinoTimezone());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoLinkedvariable = function() {
      function ArduinoLinkedvariable2(id, name, permission, thingId, thingName, type, variableName) {
        _classCallCheck(this, ArduinoLinkedvariable2);
        ArduinoLinkedvariable2.initialize(this, id, name, permission, thingId, thingName, type, variableName);
      }
      _createClass(ArduinoLinkedvariable2, null, [{
        key: "initialize",
        value: function initialize(obj, id, name, permission, thingId, thingName, type, variableName) {
          obj["id"] = id;
          obj["name"] = name;
          obj["permission"] = permission;
          obj["thing_id"] = thingId;
          obj["thing_name"] = thingName;
          obj["type"] = type;
          obj["variable_name"] = variableName;
        }
        /**
         * Constructs a <code>ArduinoLinkedvariable</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoLinkedvariable} obj Optional instance to populate.
         * @return {module:model/ArduinoLinkedvariable} The populated <code>ArduinoLinkedvariable</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoLinkedvariable2();
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("last_value")) {
              obj["last_value"] = _ApiClient["default"].convertToType(data["last_value"], Object);
            }
            if (data.hasOwnProperty("last_value_updated_at")) {
              obj["last_value_updated_at"] = _ApiClient["default"].convertToType(data["last_value_updated_at"], "Date");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("permission")) {
              obj["permission"] = _ApiClient["default"].convertToType(data["permission"], "String");
            }
            if (data.hasOwnProperty("thing_id")) {
              obj["thing_id"] = _ApiClient["default"].convertToType(data["thing_id"], "String");
            }
            if (data.hasOwnProperty("thing_name")) {
              obj["thing_name"] = _ApiClient["default"].convertToType(data["thing_name"], "String");
            }
            if (data.hasOwnProperty("thing_timezone")) {
              obj["thing_timezone"] = _ArduinoTimezone["default"].constructFromObject(data["thing_timezone"]);
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("variable_name")) {
              obj["variable_name"] = _ApiClient["default"].convertToType(data["variable_name"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoLinkedvariable2;
    }();
    ArduinoLinkedvariable.prototype["id"] = void 0;
    ArduinoLinkedvariable.prototype["last_value"] = void 0;
    ArduinoLinkedvariable.prototype["last_value_updated_at"] = void 0;
    ArduinoLinkedvariable.prototype["name"] = void 0;
    ArduinoLinkedvariable.prototype["permission"] = void 0;
    ArduinoLinkedvariable.prototype["thing_id"] = void 0;
    ArduinoLinkedvariable.prototype["thing_name"] = void 0;
    ArduinoLinkedvariable.prototype["thing_timezone"] = void 0;
    ArduinoLinkedvariable.prototype["type"] = void 0;
    ArduinoLinkedvariable.prototype["variable_name"] = void 0;
    var _default = ArduinoLinkedvariable;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoWidgetv2.js
var require_ArduinoWidgetv2 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoWidgetv2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoLinkedvariable = _interopRequireDefault(require_ArduinoLinkedvariable());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoWidgetv2 = function() {
      function ArduinoWidgetv22(height, id, options, type, width, x, y) {
        _classCallCheck(this, ArduinoWidgetv22);
        ArduinoWidgetv22.initialize(this, height, id, options, type, width, x, y);
      }
      _createClass(ArduinoWidgetv22, null, [{
        key: "initialize",
        value: function initialize(obj, height, id, options, type, width, x, y) {
          obj["height"] = height;
          obj["id"] = id;
          obj["options"] = options;
          obj["type"] = type;
          obj["width"] = width;
          obj["x"] = x;
          obj["y"] = y;
        }
        /**
         * Constructs a <code>ArduinoWidgetv2</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoWidgetv2} obj Optional instance to populate.
         * @return {module:model/ArduinoWidgetv2} The populated <code>ArduinoWidgetv2</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoWidgetv22();
            if (data.hasOwnProperty("has_permission_incompatibility")) {
              obj["has_permission_incompatibility"] = _ApiClient["default"].convertToType(data["has_permission_incompatibility"], "Boolean");
            }
            if (data.hasOwnProperty("has_type_incompatibility")) {
              obj["has_type_incompatibility"] = _ApiClient["default"].convertToType(data["has_type_incompatibility"], "Boolean");
            }
            if (data.hasOwnProperty("has_unlinked_variable")) {
              obj["has_unlinked_variable"] = _ApiClient["default"].convertToType(data["has_unlinked_variable"], "Boolean");
            }
            if (data.hasOwnProperty("height")) {
              obj["height"] = _ApiClient["default"].convertToType(data["height"], "Number");
            }
            if (data.hasOwnProperty("height_mobile")) {
              obj["height_mobile"] = _ApiClient["default"].convertToType(data["height_mobile"], "Number");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("options")) {
              obj["options"] = _ApiClient["default"].convertToType(data["options"], {
                "String": Object
              });
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("variables")) {
              obj["variables"] = _ApiClient["default"].convertToType(data["variables"], [_ArduinoLinkedvariable["default"]]);
            }
            if (data.hasOwnProperty("width")) {
              obj["width"] = _ApiClient["default"].convertToType(data["width"], "Number");
            }
            if (data.hasOwnProperty("width_mobile")) {
              obj["width_mobile"] = _ApiClient["default"].convertToType(data["width_mobile"], "Number");
            }
            if (data.hasOwnProperty("x")) {
              obj["x"] = _ApiClient["default"].convertToType(data["x"], "Number");
            }
            if (data.hasOwnProperty("x_mobile")) {
              obj["x_mobile"] = _ApiClient["default"].convertToType(data["x_mobile"], "Number");
            }
            if (data.hasOwnProperty("y")) {
              obj["y"] = _ApiClient["default"].convertToType(data["y"], "Number");
            }
            if (data.hasOwnProperty("y_mobile")) {
              obj["y_mobile"] = _ApiClient["default"].convertToType(data["y_mobile"], "Number");
            }
          }
          return obj;
        }
      }]);
      return ArduinoWidgetv22;
    }();
    ArduinoWidgetv2.prototype["has_permission_incompatibility"] = void 0;
    ArduinoWidgetv2.prototype["has_type_incompatibility"] = void 0;
    ArduinoWidgetv2.prototype["has_unlinked_variable"] = void 0;
    ArduinoWidgetv2.prototype["height"] = void 0;
    ArduinoWidgetv2.prototype["height_mobile"] = void 0;
    ArduinoWidgetv2.prototype["id"] = void 0;
    ArduinoWidgetv2.prototype["name"] = void 0;
    ArduinoWidgetv2.prototype["options"] = void 0;
    ArduinoWidgetv2.prototype["type"] = void 0;
    ArduinoWidgetv2.prototype["variables"] = void 0;
    ArduinoWidgetv2.prototype["width"] = void 0;
    ArduinoWidgetv2.prototype["width_mobile"] = void 0;
    ArduinoWidgetv2.prototype["x"] = void 0;
    ArduinoWidgetv2.prototype["x_mobile"] = void 0;
    ArduinoWidgetv2.prototype["y"] = void 0;
    ArduinoWidgetv2.prototype["y_mobile"] = void 0;
    ArduinoWidgetv2["TypeEnum"] = {
      /**
       * value: "slider, gauge"
       * @const
       */
      "slider, gauge": "slider, gauge"
    };
    var _default = ArduinoWidgetv2;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDashboardv2.js
var require_ArduinoDashboardv2 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDashboardv2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoDashboardowner = _interopRequireDefault(require_ArduinoDashboardowner());
    var _ArduinoDashboardshare = _interopRequireDefault(require_ArduinoDashboardshare());
    var _ArduinoWidgetv = _interopRequireDefault(require_ArduinoWidgetv2());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDashboardv2 = function() {
      function ArduinoDashboardv22(id, name, updatedAt) {
        _classCallCheck(this, ArduinoDashboardv22);
        ArduinoDashboardv22.initialize(this, id, name, updatedAt);
      }
      _createClass(ArduinoDashboardv22, null, [{
        key: "initialize",
        value: function initialize(obj, id, name, updatedAt) {
          obj["id"] = id;
          obj["name"] = name;
          obj["updated_at"] = updatedAt;
        }
        /**
         * Constructs a <code>ArduinoDashboardv2</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDashboardv2} obj Optional instance to populate.
         * @return {module:model/ArduinoDashboardv2} The populated <code>ArduinoDashboardv2</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDashboardv22();
            if (data.hasOwnProperty("created_by")) {
              obj["created_by"] = _ArduinoDashboardowner["default"].constructFromObject(data["created_by"]);
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("organization_id")) {
              obj["organization_id"] = _ApiClient["default"].convertToType(data["organization_id"], "String");
            }
            if (data.hasOwnProperty("shared_by")) {
              obj["shared_by"] = _ArduinoDashboardshare["default"].constructFromObject(data["shared_by"]);
            }
            if (data.hasOwnProperty("shared_with")) {
              obj["shared_with"] = _ApiClient["default"].convertToType(data["shared_with"], [_ArduinoDashboardshare["default"]]);
            }
            if (data.hasOwnProperty("updated_at")) {
              obj["updated_at"] = _ApiClient["default"].convertToType(data["updated_at"], "Date");
            }
            if (data.hasOwnProperty("widgets")) {
              obj["widgets"] = _ApiClient["default"].convertToType(data["widgets"], [_ArduinoWidgetv["default"]]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoDashboardv22;
    }();
    ArduinoDashboardv2.prototype["created_by"] = void 0;
    ArduinoDashboardv2.prototype["id"] = void 0;
    ArduinoDashboardv2.prototype["name"] = void 0;
    ArduinoDashboardv2.prototype["organization_id"] = void 0;
    ArduinoDashboardv2.prototype["shared_by"] = void 0;
    ArduinoDashboardv2.prototype["shared_with"] = void 0;
    ArduinoDashboardv2.prototype["updated_at"] = void 0;
    ArduinoDashboardv2.prototype["widgets"] = void 0;
    var _default = ArduinoDashboardv2;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2SimpleProperties.js
var require_ArduinoDevicev2SimpleProperties = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2SimpleProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2SimpleProperties = function() {
      function ArduinoDevicev2SimpleProperties2(name, updatedAt, value) {
        _classCallCheck(this, ArduinoDevicev2SimpleProperties2);
        ArduinoDevicev2SimpleProperties2.initialize(this, name, updatedAt, value);
      }
      _createClass(ArduinoDevicev2SimpleProperties2, null, [{
        key: "initialize",
        value: function initialize(obj, name, updatedAt, value) {
          obj["name"] = name;
          obj["updated_at"] = updatedAt;
          obj["value"] = value;
        }
        /**
         * Constructs a <code>ArduinoDevicev2SimpleProperties</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2SimpleProperties} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2SimpleProperties} The populated <code>ArduinoDevicev2SimpleProperties</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev2SimpleProperties2();
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("updated_at")) {
              obj["updated_at"] = _ApiClient["default"].convertToType(data["updated_at"], "Date");
            }
            if (data.hasOwnProperty("value")) {
              obj["value"] = _ApiClient["default"].convertToType(data["value"], Object);
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev2SimpleProperties2;
    }();
    ArduinoDevicev2SimpleProperties.prototype["name"] = void 0;
    ArduinoDevicev2SimpleProperties.prototype["updated_at"] = void 0;
    ArduinoDevicev2SimpleProperties.prototype["value"] = void 0;
    var _default = ArduinoDevicev2SimpleProperties;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2Webhook.js
var require_ArduinoDevicev2Webhook = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2Webhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2Webhook = function() {
      function ArduinoDevicev2Webhook2(id, uri) {
        _classCallCheck(this, ArduinoDevicev2Webhook2);
        ArduinoDevicev2Webhook2.initialize(this, id, uri);
      }
      _createClass(ArduinoDevicev2Webhook2, null, [{
        key: "initialize",
        value: function initialize(obj, id, uri) {
          obj["id"] = id;
          obj["uri"] = uri;
        }
        /**
         * Constructs a <code>ArduinoDevicev2Webhook</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2Webhook} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2Webhook} The populated <code>ArduinoDevicev2Webhook</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev2Webhook2();
            if (data.hasOwnProperty("active")) {
              obj["active"] = _ApiClient["default"].convertToType(data["active"], "Boolean");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("uri")) {
              obj["uri"] = _ApiClient["default"].convertToType(data["uri"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev2Webhook2;
    }();
    ArduinoDevicev2Webhook.prototype["active"] = true;
    ArduinoDevicev2Webhook.prototype["id"] = void 0;
    ArduinoDevicev2Webhook.prototype["uri"] = void 0;
    var _default = ArduinoDevicev2Webhook;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoProperty.js
var require_ArduinoProperty = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoProperty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoProperty = function() {
      function ArduinoProperty2(href, id, name, permission, thingId, type, updateStrategy) {
        _classCallCheck(this, ArduinoProperty2);
        ArduinoProperty2.initialize(this, href, id, name, permission, thingId, type, updateStrategy);
      }
      _createClass(ArduinoProperty2, null, [{
        key: "initialize",
        value: function initialize(obj, href, id, name, permission, thingId, type, updateStrategy) {
          obj["href"] = href;
          obj["id"] = id;
          obj["name"] = name;
          obj["permission"] = permission;
          obj["thing_id"] = thingId;
          obj["type"] = type;
          obj["update_strategy"] = updateStrategy;
        }
        /**
         * Constructs a <code>ArduinoProperty</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoProperty} obj Optional instance to populate.
         * @return {module:model/ArduinoProperty} The populated <code>ArduinoProperty</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoProperty2();
            if (data.hasOwnProperty("created_at")) {
              obj["created_at"] = _ApiClient["default"].convertToType(data["created_at"], "Date");
            }
            if (data.hasOwnProperty("deleted_at")) {
              obj["deleted_at"] = _ApiClient["default"].convertToType(data["deleted_at"], "Date");
            }
            if (data.hasOwnProperty("href")) {
              obj["href"] = _ApiClient["default"].convertToType(data["href"], "String");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("last_value")) {
              obj["last_value"] = _ApiClient["default"].convertToType(data["last_value"], Object);
            }
            if (data.hasOwnProperty("max_value")) {
              obj["max_value"] = _ApiClient["default"].convertToType(data["max_value"], "Number");
            }
            if (data.hasOwnProperty("min_value")) {
              obj["min_value"] = _ApiClient["default"].convertToType(data["min_value"], "Number");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("permission")) {
              obj["permission"] = _ApiClient["default"].convertToType(data["permission"], "String");
            }
            if (data.hasOwnProperty("persist")) {
              obj["persist"] = _ApiClient["default"].convertToType(data["persist"], "Boolean");
            }
            if (data.hasOwnProperty("sync_id")) {
              obj["sync_id"] = _ApiClient["default"].convertToType(data["sync_id"], "String");
            }
            if (data.hasOwnProperty("tag")) {
              obj["tag"] = _ApiClient["default"].convertToType(data["tag"], "Number");
            }
            if (data.hasOwnProperty("thing_id")) {
              obj["thing_id"] = _ApiClient["default"].convertToType(data["thing_id"], "String");
            }
            if (data.hasOwnProperty("thing_name")) {
              obj["thing_name"] = _ApiClient["default"].convertToType(data["thing_name"], "String");
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("update_parameter")) {
              obj["update_parameter"] = _ApiClient["default"].convertToType(data["update_parameter"], "Number");
            }
            if (data.hasOwnProperty("update_strategy")) {
              obj["update_strategy"] = _ApiClient["default"].convertToType(data["update_strategy"], "String");
            }
            if (data.hasOwnProperty("updated_at")) {
              obj["updated_at"] = _ApiClient["default"].convertToType(data["updated_at"], "Date");
            }
            if (data.hasOwnProperty("value_updated_at")) {
              obj["value_updated_at"] = _ApiClient["default"].convertToType(data["value_updated_at"], "Date");
            }
            if (data.hasOwnProperty("variable_name")) {
              obj["variable_name"] = _ApiClient["default"].convertToType(data["variable_name"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoProperty2;
    }();
    ArduinoProperty.prototype["created_at"] = void 0;
    ArduinoProperty.prototype["deleted_at"] = void 0;
    ArduinoProperty.prototype["href"] = void 0;
    ArduinoProperty.prototype["id"] = void 0;
    ArduinoProperty.prototype["last_value"] = void 0;
    ArduinoProperty.prototype["max_value"] = void 0;
    ArduinoProperty.prototype["min_value"] = void 0;
    ArduinoProperty.prototype["name"] = void 0;
    ArduinoProperty.prototype["permission"] = void 0;
    ArduinoProperty.prototype["persist"] = void 0;
    ArduinoProperty.prototype["sync_id"] = void 0;
    ArduinoProperty.prototype["tag"] = void 0;
    ArduinoProperty.prototype["thing_id"] = void 0;
    ArduinoProperty.prototype["thing_name"] = void 0;
    ArduinoProperty.prototype["type"] = void 0;
    ArduinoProperty.prototype["update_parameter"] = void 0;
    ArduinoProperty.prototype["update_strategy"] = void 0;
    ArduinoProperty.prototype["updated_at"] = void 0;
    ArduinoProperty.prototype["value_updated_at"] = void 0;
    ArduinoProperty.prototype["variable_name"] = void 0;
    var _default = ArduinoProperty;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoThing.js
var require_ArduinoThing = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoThing.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoProperty = _interopRequireDefault(require_ArduinoProperty());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoThing = function() {
      function ArduinoThing2(href, id, name, timezone, userId) {
        _classCallCheck(this, ArduinoThing2);
        ArduinoThing2.initialize(this, href, id, name, timezone, userId);
      }
      _createClass(ArduinoThing2, null, [{
        key: "initialize",
        value: function initialize(obj, href, id, name, timezone, userId) {
          obj["href"] = href;
          obj["id"] = id;
          obj["name"] = name;
          obj["timezone"] = timezone;
          obj["user_id"] = userId;
        }
        /**
         * Constructs a <code>ArduinoThing</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoThing} obj Optional instance to populate.
         * @return {module:model/ArduinoThing} The populated <code>ArduinoThing</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoThing2();
            if (data.hasOwnProperty("created_at")) {
              obj["created_at"] = _ApiClient["default"].convertToType(data["created_at"], "Date");
            }
            if (data.hasOwnProperty("deleted_at")) {
              obj["deleted_at"] = _ApiClient["default"].convertToType(data["deleted_at"], "Date");
            }
            if (data.hasOwnProperty("device_fqbn")) {
              obj["device_fqbn"] = _ApiClient["default"].convertToType(data["device_fqbn"], "String");
            }
            if (data.hasOwnProperty("device_id")) {
              obj["device_id"] = _ApiClient["default"].convertToType(data["device_id"], "String");
            }
            if (data.hasOwnProperty("device_name")) {
              obj["device_name"] = _ApiClient["default"].convertToType(data["device_name"], "String");
            }
            if (data.hasOwnProperty("device_type")) {
              obj["device_type"] = _ApiClient["default"].convertToType(data["device_type"], "String");
            }
            if (data.hasOwnProperty("href")) {
              obj["href"] = _ApiClient["default"].convertToType(data["href"], "String");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("organization_id")) {
              obj["organization_id"] = _ApiClient["default"].convertToType(data["organization_id"], "String");
            }
            if (data.hasOwnProperty("properties")) {
              obj["properties"] = _ApiClient["default"].convertToType(data["properties"], [_ArduinoProperty["default"]]);
            }
            if (data.hasOwnProperty("properties_count")) {
              obj["properties_count"] = _ApiClient["default"].convertToType(data["properties_count"], "Number");
            }
            if (data.hasOwnProperty("sketch_id")) {
              obj["sketch_id"] = _ApiClient["default"].convertToType(data["sketch_id"], "String");
            }
            if (data.hasOwnProperty("tags")) {
              obj["tags"] = _ApiClient["default"].convertToType(data["tags"], {
                "String": Object
              });
            }
            if (data.hasOwnProperty("timezone")) {
              obj["timezone"] = _ApiClient["default"].convertToType(data["timezone"], "String");
            }
            if (data.hasOwnProperty("updated_at")) {
              obj["updated_at"] = _ApiClient["default"].convertToType(data["updated_at"], "Date");
            }
            if (data.hasOwnProperty("user_id")) {
              obj["user_id"] = _ApiClient["default"].convertToType(data["user_id"], "String");
            }
            if (data.hasOwnProperty("webhook_active")) {
              obj["webhook_active"] = _ApiClient["default"].convertToType(data["webhook_active"], "Boolean");
            }
            if (data.hasOwnProperty("webhook_uri")) {
              obj["webhook_uri"] = _ApiClient["default"].convertToType(data["webhook_uri"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoThing2;
    }();
    ArduinoThing.prototype["created_at"] = void 0;
    ArduinoThing.prototype["deleted_at"] = void 0;
    ArduinoThing.prototype["device_fqbn"] = void 0;
    ArduinoThing.prototype["device_id"] = void 0;
    ArduinoThing.prototype["device_name"] = void 0;
    ArduinoThing.prototype["device_type"] = void 0;
    ArduinoThing.prototype["href"] = void 0;
    ArduinoThing.prototype["id"] = void 0;
    ArduinoThing.prototype["name"] = void 0;
    ArduinoThing.prototype["organization_id"] = void 0;
    ArduinoThing.prototype["properties"] = void 0;
    ArduinoThing.prototype["properties_count"] = void 0;
    ArduinoThing.prototype["sketch_id"] = void 0;
    ArduinoThing.prototype["tags"] = void 0;
    ArduinoThing.prototype["timezone"] = void 0;
    ArduinoThing.prototype["updated_at"] = void 0;
    ArduinoThing.prototype["user_id"] = void 0;
    ArduinoThing.prototype["webhook_active"] = void 0;
    ArduinoThing.prototype["webhook_uri"] = void 0;
    var _default = ArduinoThing;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2.js
var require_ArduinoDevicev2 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoDevicev2SimpleProperties = _interopRequireDefault(require_ArduinoDevicev2SimpleProperties());
    var _ArduinoDevicev2Webhook = _interopRequireDefault(require_ArduinoDevicev2Webhook());
    var _ArduinoThing = _interopRequireDefault(require_ArduinoThing());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2 = function() {
      function ArduinoDevicev22(href, id, label, name, serial, type, userId) {
        _classCallCheck(this, ArduinoDevicev22);
        ArduinoDevicev22.initialize(this, href, id, label, name, serial, type, userId);
      }
      _createClass(ArduinoDevicev22, null, [{
        key: "initialize",
        value: function initialize(obj, href, id, label, name, serial, type, userId) {
          obj["href"] = href;
          obj["id"] = id;
          obj["label"] = label;
          obj["name"] = name;
          obj["serial"] = serial;
          obj["type"] = type;
          obj["user_id"] = userId;
        }
        /**
         * Constructs a <code>ArduinoDevicev2</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2} The populated <code>ArduinoDevicev2</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev22();
            if (data.hasOwnProperty("created_at")) {
              obj["created_at"] = _ApiClient["default"].convertToType(data["created_at"], "Date");
            }
            if (data.hasOwnProperty("events")) {
              obj["events"] = _ApiClient["default"].convertToType(data["events"], [_ArduinoDevicev2SimpleProperties["default"]]);
            }
            if (data.hasOwnProperty("fqbn")) {
              obj["fqbn"] = _ApiClient["default"].convertToType(data["fqbn"], "String");
            }
            if (data.hasOwnProperty("href")) {
              obj["href"] = _ApiClient["default"].convertToType(data["href"], "String");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("label")) {
              obj["label"] = _ApiClient["default"].convertToType(data["label"], "String");
            }
            if (data.hasOwnProperty("last_activity_at")) {
              obj["last_activity_at"] = _ApiClient["default"].convertToType(data["last_activity_at"], "Date");
            }
            if (data.hasOwnProperty("latest_wifi_fw_version")) {
              obj["latest_wifi_fw_version"] = _ApiClient["default"].convertToType(data["latest_wifi_fw_version"], "String");
            }
            if (data.hasOwnProperty("metadata")) {
              obj["metadata"] = _ApiClient["default"].convertToType(data["metadata"], {
                "String": Object
              });
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("organization_id")) {
              obj["organization_id"] = _ApiClient["default"].convertToType(data["organization_id"], "String");
            }
            if (data.hasOwnProperty("ota_available")) {
              obj["ota_available"] = _ApiClient["default"].convertToType(data["ota_available"], "Boolean");
            }
            if (data.hasOwnProperty("ota_compatible")) {
              obj["ota_compatible"] = _ApiClient["default"].convertToType(data["ota_compatible"], "Boolean");
            }
            if (data.hasOwnProperty("required_wifi_fw_version")) {
              obj["required_wifi_fw_version"] = _ApiClient["default"].convertToType(data["required_wifi_fw_version"], "String");
            }
            if (data.hasOwnProperty("serial")) {
              obj["serial"] = _ApiClient["default"].convertToType(data["serial"], "String");
            }
            if (data.hasOwnProperty("tags")) {
              obj["tags"] = _ApiClient["default"].convertToType(data["tags"], {
                "String": Object
              });
            }
            if (data.hasOwnProperty("thing")) {
              obj["thing"] = _ArduinoThing["default"].constructFromObject(data["thing"]);
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("user_id")) {
              obj["user_id"] = _ApiClient["default"].convertToType(data["user_id"], "String");
            }
            if (data.hasOwnProperty("webhooks")) {
              obj["webhooks"] = _ApiClient["default"].convertToType(data["webhooks"], [_ArduinoDevicev2Webhook["default"]]);
            }
            if (data.hasOwnProperty("wifi_fw_version")) {
              obj["wifi_fw_version"] = _ApiClient["default"].convertToType(data["wifi_fw_version"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev22;
    }();
    ArduinoDevicev2.prototype["created_at"] = void 0;
    ArduinoDevicev2.prototype["events"] = void 0;
    ArduinoDevicev2.prototype["fqbn"] = void 0;
    ArduinoDevicev2.prototype["href"] = void 0;
    ArduinoDevicev2.prototype["id"] = void 0;
    ArduinoDevicev2.prototype["label"] = void 0;
    ArduinoDevicev2.prototype["last_activity_at"] = void 0;
    ArduinoDevicev2.prototype["latest_wifi_fw_version"] = void 0;
    ArduinoDevicev2.prototype["metadata"] = void 0;
    ArduinoDevicev2.prototype["name"] = void 0;
    ArduinoDevicev2.prototype["organization_id"] = void 0;
    ArduinoDevicev2.prototype["ota_available"] = void 0;
    ArduinoDevicev2.prototype["ota_compatible"] = void 0;
    ArduinoDevicev2.prototype["required_wifi_fw_version"] = void 0;
    ArduinoDevicev2.prototype["serial"] = void 0;
    ArduinoDevicev2.prototype["tags"] = void 0;
    ArduinoDevicev2.prototype["thing"] = void 0;
    ArduinoDevicev2.prototype["type"] = void 0;
    ArduinoDevicev2.prototype["user_id"] = void 0;
    ArduinoDevicev2.prototype["webhooks"] = void 0;
    ArduinoDevicev2.prototype["wifi_fw_version"] = void 0;
    var _default = ArduinoDevicev2;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2Cert.js
var require_ArduinoDevicev2Cert = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2Cert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoCompressedv = _interopRequireDefault(require_ArduinoCompressedv2());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2Cert = function() {
      function ArduinoDevicev2Cert2(compressed, der, deviceId, enabled, href, id, pem) {
        _classCallCheck(this, ArduinoDevicev2Cert2);
        ArduinoDevicev2Cert2.initialize(this, compressed, der, deviceId, enabled, href, id, pem);
      }
      _createClass(ArduinoDevicev2Cert2, null, [{
        key: "initialize",
        value: function initialize(obj, compressed, der, deviceId, enabled, href, id, pem) {
          obj["compressed"] = compressed;
          obj["der"] = der;
          obj["device_id"] = deviceId;
          obj["enabled"] = enabled;
          obj["href"] = href;
          obj["id"] = id;
          obj["pem"] = pem;
        }
        /**
         * Constructs a <code>ArduinoDevicev2Cert</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2Cert} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2Cert} The populated <code>ArduinoDevicev2Cert</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev2Cert2();
            if (data.hasOwnProperty("ca")) {
              obj["ca"] = _ApiClient["default"].convertToType(data["ca"], "String");
            }
            if (data.hasOwnProperty("compressed")) {
              obj["compressed"] = _ArduinoCompressedv["default"].constructFromObject(data["compressed"]);
            }
            if (data.hasOwnProperty("der")) {
              obj["der"] = _ApiClient["default"].convertToType(data["der"], "String");
            }
            if (data.hasOwnProperty("device_id")) {
              obj["device_id"] = _ApiClient["default"].convertToType(data["device_id"], "String");
            }
            if (data.hasOwnProperty("enabled")) {
              obj["enabled"] = _ApiClient["default"].convertToType(data["enabled"], "Boolean");
            }
            if (data.hasOwnProperty("href")) {
              obj["href"] = _ApiClient["default"].convertToType(data["href"], "String");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("pem")) {
              obj["pem"] = _ApiClient["default"].convertToType(data["pem"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev2Cert2;
    }();
    ArduinoDevicev2Cert.prototype["ca"] = void 0;
    ArduinoDevicev2Cert.prototype["compressed"] = void 0;
    ArduinoDevicev2Cert.prototype["der"] = void 0;
    ArduinoDevicev2Cert.prototype["device_id"] = void 0;
    ArduinoDevicev2Cert.prototype["enabled"] = true;
    ArduinoDevicev2Cert.prototype["href"] = void 0;
    ArduinoDevicev2Cert.prototype["id"] = void 0;
    ArduinoDevicev2Cert.prototype["pem"] = void 0;
    var _default = ArduinoDevicev2Cert;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2EventProperties.js
var require_ArduinoDevicev2EventProperties = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2EventProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoDevicev2SimpleProperties = _interopRequireDefault(require_ArduinoDevicev2SimpleProperties());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2EventProperties = function() {
      function ArduinoDevicev2EventProperties2(events, id) {
        _classCallCheck(this, ArduinoDevicev2EventProperties2);
        ArduinoDevicev2EventProperties2.initialize(this, events, id);
      }
      _createClass(ArduinoDevicev2EventProperties2, null, [{
        key: "initialize",
        value: function initialize(obj, events, id) {
          obj["events"] = events;
          obj["id"] = id;
        }
        /**
         * Constructs a <code>ArduinoDevicev2EventProperties</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2EventProperties} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2EventProperties} The populated <code>ArduinoDevicev2EventProperties</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev2EventProperties2();
            if (data.hasOwnProperty("events")) {
              obj["events"] = _ApiClient["default"].convertToType(data["events"], [_ArduinoDevicev2SimpleProperties["default"]]);
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev2EventProperties2;
    }();
    ArduinoDevicev2EventProperties.prototype["events"] = void 0;
    ArduinoDevicev2EventProperties.prototype["id"] = void 0;
    var _default = ArduinoDevicev2EventProperties;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2Pass.js
var require_ArduinoDevicev2Pass = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2Pass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2Pass = function() {
      function ArduinoDevicev2Pass2(set) {
        _classCallCheck(this, ArduinoDevicev2Pass2);
        ArduinoDevicev2Pass2.initialize(this, set);
      }
      _createClass(ArduinoDevicev2Pass2, null, [{
        key: "initialize",
        value: function initialize(obj, set) {
          obj["set"] = set;
        }
        /**
         * Constructs a <code>ArduinoDevicev2Pass</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2Pass} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2Pass} The populated <code>ArduinoDevicev2Pass</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev2Pass2();
            if (data.hasOwnProperty("set")) {
              obj["set"] = _ApiClient["default"].convertToType(data["set"], "Boolean");
            }
            if (data.hasOwnProperty("suggested_password")) {
              obj["suggested_password"] = _ApiClient["default"].convertToType(data["suggested_password"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev2Pass2;
    }();
    ArduinoDevicev2Pass.prototype["set"] = void 0;
    ArduinoDevicev2Pass.prototype["suggested_password"] = void 0;
    var _default = ArduinoDevicev2Pass;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2properties.js
var require_ArduinoDevicev2properties = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2properties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoProperty = _interopRequireDefault(require_ArduinoProperty());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2properties = function() {
      function ArduinoDevicev2properties2(dataRetentionDays, deviceId, properties, userId) {
        _classCallCheck(this, ArduinoDevicev2properties2);
        ArduinoDevicev2properties2.initialize(this, dataRetentionDays, deviceId, properties, userId);
      }
      _createClass(ArduinoDevicev2properties2, null, [{
        key: "initialize",
        value: function initialize(obj, dataRetentionDays, deviceId, properties, userId) {
          obj["data_retention_days"] = dataRetentionDays;
          obj["deviceId"] = deviceId;
          obj["properties"] = properties;
          obj["user_id"] = userId;
        }
        /**
         * Constructs a <code>ArduinoDevicev2properties</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2properties} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2properties} The populated <code>ArduinoDevicev2properties</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev2properties2();
            if (data.hasOwnProperty("data_retention_days")) {
              obj["data_retention_days"] = _ApiClient["default"].convertToType(data["data_retention_days"], "Number");
            }
            if (data.hasOwnProperty("deviceId")) {
              obj["deviceId"] = _ApiClient["default"].convertToType(data["deviceId"], "String");
            }
            if (data.hasOwnProperty("properties")) {
              obj["properties"] = _ApiClient["default"].convertToType(data["properties"], [_ArduinoProperty["default"]]);
            }
            if (data.hasOwnProperty("user_id")) {
              obj["user_id"] = _ApiClient["default"].convertToType(data["user_id"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev2properties2;
    }();
    ArduinoDevicev2properties.prototype["data_retention_days"] = void 0;
    ArduinoDevicev2properties.prototype["deviceId"] = void 0;
    ArduinoDevicev2properties.prototype["properties"] = void 0;
    ArduinoDevicev2properties.prototype["user_id"] = void 0;
    var _default = ArduinoDevicev2properties;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2propertyvalueValueStatistics.js
var require_ArduinoDevicev2propertyvalueValueStatistics = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2propertyvalueValueStatistics.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2propertyvalueValueStatistics = function() {
      function ArduinoDevicev2propertyvalueValueStatistics2() {
        _classCallCheck(this, ArduinoDevicev2propertyvalueValueStatistics2);
        ArduinoDevicev2propertyvalueValueStatistics2.initialize(this);
      }
      _createClass(ArduinoDevicev2propertyvalueValueStatistics2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>ArduinoDevicev2propertyvalueValueStatistics</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2propertyvalueValueStatistics} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2propertyvalueValueStatistics} The populated <code>ArduinoDevicev2propertyvalueValueStatistics</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev2propertyvalueValueStatistics2();
            if (data.hasOwnProperty("adr")) {
              obj["adr"] = _ApiClient["default"].convertToType(data["adr"], "Number");
            }
            if (data.hasOwnProperty("channel")) {
              obj["channel"] = _ApiClient["default"].convertToType(data["channel"], "Number");
            }
            if (data.hasOwnProperty("duplicate")) {
              obj["duplicate"] = _ApiClient["default"].convertToType(data["duplicate"], "Number");
            }
            if (data.hasOwnProperty("freq")) {
              obj["freq"] = _ApiClient["default"].convertToType(data["freq"], "Number");
            }
            if (data.hasOwnProperty("modBW")) {
              obj["modBW"] = _ApiClient["default"].convertToType(data["modBW"], "Number");
            }
            if (data.hasOwnProperty("rssi")) {
              obj["rssi"] = _ApiClient["default"].convertToType(data["rssi"], "Number");
            }
            if (data.hasOwnProperty("seqno")) {
              obj["seqno"] = _ApiClient["default"].convertToType(data["seqno"], "Number");
            }
            if (data.hasOwnProperty("sf")) {
              obj["sf"] = _ApiClient["default"].convertToType(data["sf"], "Number");
            }
            if (data.hasOwnProperty("snr")) {
              obj["snr"] = _ApiClient["default"].convertToType(data["snr"], "Number");
            }
            if (data.hasOwnProperty("time")) {
              obj["time"] = _ApiClient["default"].convertToType(data["time"], "Number");
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev2propertyvalueValueStatistics2;
    }();
    ArduinoDevicev2propertyvalueValueStatistics.prototype["adr"] = void 0;
    ArduinoDevicev2propertyvalueValueStatistics.prototype["channel"] = void 0;
    ArduinoDevicev2propertyvalueValueStatistics.prototype["duplicate"] = void 0;
    ArduinoDevicev2propertyvalueValueStatistics.prototype["freq"] = void 0;
    ArduinoDevicev2propertyvalueValueStatistics.prototype["modBW"] = void 0;
    ArduinoDevicev2propertyvalueValueStatistics.prototype["rssi"] = void 0;
    ArduinoDevicev2propertyvalueValueStatistics.prototype["seqno"] = void 0;
    ArduinoDevicev2propertyvalueValueStatistics.prototype["sf"] = void 0;
    ArduinoDevicev2propertyvalueValueStatistics.prototype["snr"] = void 0;
    ArduinoDevicev2propertyvalueValueStatistics.prototype["time"] = void 0;
    var _default = ArduinoDevicev2propertyvalueValueStatistics;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2propertyvalueValue.js
var require_ArduinoDevicev2propertyvalueValue = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2propertyvalueValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoDevicev2propertyvalueValueStatistics = _interopRequireDefault(require_ArduinoDevicev2propertyvalueValueStatistics());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2propertyvalueValue = function() {
      function ArduinoDevicev2propertyvalueValue2() {
        _classCallCheck(this, ArduinoDevicev2propertyvalueValue2);
        ArduinoDevicev2propertyvalueValue2.initialize(this);
      }
      _createClass(ArduinoDevicev2propertyvalueValue2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>ArduinoDevicev2propertyvalueValue</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2propertyvalueValue} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2propertyvalueValue} The populated <code>ArduinoDevicev2propertyvalueValue</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev2propertyvalueValue2();
            if (data.hasOwnProperty("payload")) {
              obj["payload"] = _ApiClient["default"].convertToType(data["payload"], "String");
            }
            if (data.hasOwnProperty("seqno")) {
              obj["seqno"] = _ApiClient["default"].convertToType(data["seqno"], "Number");
            }
            if (data.hasOwnProperty("statistics")) {
              obj["statistics"] = _ArduinoDevicev2propertyvalueValueStatistics["default"].constructFromObject(data["statistics"]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev2propertyvalueValue2;
    }();
    ArduinoDevicev2propertyvalueValue.prototype["payload"] = void 0;
    ArduinoDevicev2propertyvalueValue.prototype["seqno"] = void 0;
    ArduinoDevicev2propertyvalueValue.prototype["statistics"] = void 0;
    var _default = ArduinoDevicev2propertyvalueValue;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2propertyvalue.js
var require_ArduinoDevicev2propertyvalue = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2propertyvalue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoDevicev2propertyvalueValue = _interopRequireDefault(require_ArduinoDevicev2propertyvalueValue());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2propertyvalue = function() {
      function ArduinoDevicev2propertyvalue2() {
        _classCallCheck(this, ArduinoDevicev2propertyvalue2);
        ArduinoDevicev2propertyvalue2.initialize(this);
      }
      _createClass(ArduinoDevicev2propertyvalue2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>ArduinoDevicev2propertyvalue</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2propertyvalue} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2propertyvalue} The populated <code>ArduinoDevicev2propertyvalue</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev2propertyvalue2();
            if (data.hasOwnProperty("created_at")) {
              obj["created_at"] = _ApiClient["default"].convertToType(data["created_at"], "Date");
            }
            if (data.hasOwnProperty("value")) {
              obj["value"] = _ArduinoDevicev2propertyvalueValue["default"].constructFromObject(data["value"]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev2propertyvalue2;
    }();
    ArduinoDevicev2propertyvalue.prototype["created_at"] = void 0;
    ArduinoDevicev2propertyvalue.prototype["value"] = void 0;
    var _default = ArduinoDevicev2propertyvalue;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2propertyvaluesLastEvaluatedKey.js
var require_ArduinoDevicev2propertyvaluesLastEvaluatedKey = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2propertyvaluesLastEvaluatedKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2propertyvaluesLastEvaluatedKey = function() {
      function ArduinoDevicev2propertyvaluesLastEvaluatedKey2() {
        _classCallCheck(this, ArduinoDevicev2propertyvaluesLastEvaluatedKey2);
        ArduinoDevicev2propertyvaluesLastEvaluatedKey2.initialize(this);
      }
      _createClass(ArduinoDevicev2propertyvaluesLastEvaluatedKey2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>ArduinoDevicev2propertyvaluesLastEvaluatedKey</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2propertyvaluesLastEvaluatedKey} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2propertyvaluesLastEvaluatedKey} The populated <code>ArduinoDevicev2propertyvaluesLastEvaluatedKey</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev2propertyvaluesLastEvaluatedKey2();
            if (data.hasOwnProperty("created_at")) {
              obj["created_at"] = _ApiClient["default"].convertToType(data["created_at"], "Date");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev2propertyvaluesLastEvaluatedKey2;
    }();
    ArduinoDevicev2propertyvaluesLastEvaluatedKey.prototype["created_at"] = void 0;
    ArduinoDevicev2propertyvaluesLastEvaluatedKey.prototype["id"] = void 0;
    ArduinoDevicev2propertyvaluesLastEvaluatedKey.prototype["name"] = void 0;
    var _default = ArduinoDevicev2propertyvaluesLastEvaluatedKey;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2propertyvalues.js
var require_ArduinoDevicev2propertyvalues = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoDevicev2propertyvalues.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoDevicev2propertyvalue = _interopRequireDefault(require_ArduinoDevicev2propertyvalue());
    var _ArduinoDevicev2propertyvaluesLastEvaluatedKey = _interopRequireDefault(require_ArduinoDevicev2propertyvaluesLastEvaluatedKey());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoDevicev2propertyvalues = function() {
      function ArduinoDevicev2propertyvalues2(id, lastEvaluatedKey, name, values) {
        _classCallCheck(this, ArduinoDevicev2propertyvalues2);
        ArduinoDevicev2propertyvalues2.initialize(this, id, lastEvaluatedKey, name, values);
      }
      _createClass(ArduinoDevicev2propertyvalues2, null, [{
        key: "initialize",
        value: function initialize(obj, id, lastEvaluatedKey, name, values) {
          obj["id"] = id;
          obj["last_evaluated_key"] = lastEvaluatedKey;
          obj["name"] = name;
          obj["values"] = values;
        }
        /**
         * Constructs a <code>ArduinoDevicev2propertyvalues</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoDevicev2propertyvalues} obj Optional instance to populate.
         * @return {module:model/ArduinoDevicev2propertyvalues} The populated <code>ArduinoDevicev2propertyvalues</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoDevicev2propertyvalues2();
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("last_evaluated_key")) {
              obj["last_evaluated_key"] = _ArduinoDevicev2propertyvaluesLastEvaluatedKey["default"].constructFromObject(data["last_evaluated_key"]);
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("values")) {
              obj["values"] = _ApiClient["default"].convertToType(data["values"], [_ArduinoDevicev2propertyvalue["default"]]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoDevicev2propertyvalues2;
    }();
    ArduinoDevicev2propertyvalues.prototype["id"] = void 0;
    ArduinoDevicev2propertyvalues.prototype["last_evaluated_key"] = void 0;
    ArduinoDevicev2propertyvalues.prototype["name"] = void 0;
    ArduinoDevicev2propertyvalues.prototype["values"] = void 0;
    var _default = ArduinoDevicev2propertyvalues;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoLoradevicev1.js
var require_ArduinoLoradevicev1 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoLoradevicev1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoLoradevicev1 = function() {
      function ArduinoLoradevicev12(appEui, appKey, deviceId, eui) {
        _classCallCheck(this, ArduinoLoradevicev12);
        ArduinoLoradevicev12.initialize(this, appEui, appKey, deviceId, eui);
      }
      _createClass(ArduinoLoradevicev12, null, [{
        key: "initialize",
        value: function initialize(obj, appEui, appKey, deviceId, eui) {
          obj["app_eui"] = appEui;
          obj["app_key"] = appKey;
          obj["device_id"] = deviceId;
          obj["eui"] = eui;
        }
        /**
         * Constructs a <code>ArduinoLoradevicev1</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoLoradevicev1} obj Optional instance to populate.
         * @return {module:model/ArduinoLoradevicev1} The populated <code>ArduinoLoradevicev1</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoLoradevicev12();
            if (data.hasOwnProperty("app_eui")) {
              obj["app_eui"] = _ApiClient["default"].convertToType(data["app_eui"], "String");
            }
            if (data.hasOwnProperty("app_key")) {
              obj["app_key"] = _ApiClient["default"].convertToType(data["app_key"], "String");
            }
            if (data.hasOwnProperty("device_id")) {
              obj["device_id"] = _ApiClient["default"].convertToType(data["device_id"], "String");
            }
            if (data.hasOwnProperty("eui")) {
              obj["eui"] = _ApiClient["default"].convertToType(data["eui"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoLoradevicev12;
    }();
    ArduinoLoradevicev1.prototype["app_eui"] = void 0;
    ArduinoLoradevicev1.prototype["app_key"] = void 0;
    ArduinoLoradevicev1.prototype["device_id"] = void 0;
    ArduinoLoradevicev1.prototype["eui"] = void 0;
    var _default = ArduinoLoradevicev1;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoLorafreqplanv1.js
var require_ArduinoLorafreqplanv1 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoLorafreqplanv1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoLorafreqplanv1 = function() {
      function ArduinoLorafreqplanv12(advanced, id, name) {
        _classCallCheck(this, ArduinoLorafreqplanv12);
        ArduinoLorafreqplanv12.initialize(this, advanced, id, name);
      }
      _createClass(ArduinoLorafreqplanv12, null, [{
        key: "initialize",
        value: function initialize(obj, advanced, id, name) {
          obj["advanced"] = advanced;
          obj["id"] = id;
          obj["name"] = name;
        }
        /**
         * Constructs a <code>ArduinoLorafreqplanv1</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoLorafreqplanv1} obj Optional instance to populate.
         * @return {module:model/ArduinoLorafreqplanv1} The populated <code>ArduinoLorafreqplanv1</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoLorafreqplanv12();
            if (data.hasOwnProperty("advanced")) {
              obj["advanced"] = _ApiClient["default"].convertToType(data["advanced"], "Boolean");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoLorafreqplanv12;
    }();
    ArduinoLorafreqplanv1.prototype["advanced"] = void 0;
    ArduinoLorafreqplanv1.prototype["id"] = void 0;
    ArduinoLorafreqplanv1.prototype["name"] = void 0;
    var _default = ArduinoLorafreqplanv1;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoLorafreqplansv1.js
var require_ArduinoLorafreqplansv1 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoLorafreqplansv1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoLorafreqplanv = _interopRequireDefault(require_ArduinoLorafreqplanv1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoLorafreqplansv1 = function() {
      function ArduinoLorafreqplansv12() {
        _classCallCheck(this, ArduinoLorafreqplansv12);
        ArduinoLorafreqplansv12.initialize(this);
      }
      _createClass(ArduinoLorafreqplansv12, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>ArduinoLorafreqplansv1</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoLorafreqplansv1} obj Optional instance to populate.
         * @return {module:model/ArduinoLorafreqplansv1} The populated <code>ArduinoLorafreqplansv1</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoLorafreqplansv12();
            if (data.hasOwnProperty("frequency_plans")) {
              obj["frequency_plans"] = _ApiClient["default"].convertToType(data["frequency_plans"], [_ArduinoLorafreqplanv["default"]]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoLorafreqplansv12;
    }();
    ArduinoLorafreqplansv1.prototype["frequency_plans"] = void 0;
    var _default = ArduinoLorafreqplansv1;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesResponse.js
var require_ArduinoSeriesResponse = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoSeriesResponse = function() {
      function ArduinoSeriesResponse2(countValues, fromDate, interval, query, respVersion, status, times, toDate, values) {
        _classCallCheck(this, ArduinoSeriesResponse2);
        ArduinoSeriesResponse2.initialize(this, countValues, fromDate, interval, query, respVersion, status, times, toDate, values);
      }
      _createClass(ArduinoSeriesResponse2, null, [{
        key: "initialize",
        value: function initialize(obj, countValues, fromDate, interval, query, respVersion, status, times, toDate, values) {
          obj["count_values"] = countValues;
          obj["from_date"] = fromDate;
          obj["interval"] = interval;
          obj["query"] = query;
          obj["resp_version"] = respVersion;
          obj["status"] = status;
          obj["times"] = times;
          obj["to_date"] = toDate;
          obj["values"] = values;
        }
        /**
         * Constructs a <code>ArduinoSeriesResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoSeriesResponse} obj Optional instance to populate.
         * @return {module:model/ArduinoSeriesResponse} The populated <code>ArduinoSeriesResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoSeriesResponse2();
            if (data.hasOwnProperty("count_values")) {
              obj["count_values"] = _ApiClient["default"].convertToType(data["count_values"], "Number");
            }
            if (data.hasOwnProperty("from_date")) {
              obj["from_date"] = _ApiClient["default"].convertToType(data["from_date"], "Date");
            }
            if (data.hasOwnProperty("interval")) {
              obj["interval"] = _ApiClient["default"].convertToType(data["interval"], "Number");
            }
            if (data.hasOwnProperty("message")) {
              obj["message"] = _ApiClient["default"].convertToType(data["message"], "String");
            }
            if (data.hasOwnProperty("query")) {
              obj["query"] = _ApiClient["default"].convertToType(data["query"], "String");
            }
            if (data.hasOwnProperty("resp_version")) {
              obj["resp_version"] = _ApiClient["default"].convertToType(data["resp_version"], "Number");
            }
            if (data.hasOwnProperty("series_limit")) {
              obj["series_limit"] = _ApiClient["default"].convertToType(data["series_limit"], "Number");
            }
            if (data.hasOwnProperty("status")) {
              obj["status"] = _ApiClient["default"].convertToType(data["status"], "String");
            }
            if (data.hasOwnProperty("times")) {
              obj["times"] = _ApiClient["default"].convertToType(data["times"], ["Date"]);
            }
            if (data.hasOwnProperty("to_date")) {
              obj["to_date"] = _ApiClient["default"].convertToType(data["to_date"], "Date");
            }
            if (data.hasOwnProperty("values")) {
              obj["values"] = _ApiClient["default"].convertToType(data["values"], ["Number"]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoSeriesResponse2;
    }();
    ArduinoSeriesResponse.prototype["count_values"] = void 0;
    ArduinoSeriesResponse.prototype["from_date"] = void 0;
    ArduinoSeriesResponse.prototype["interval"] = void 0;
    ArduinoSeriesResponse.prototype["message"] = "";
    ArduinoSeriesResponse.prototype["query"] = void 0;
    ArduinoSeriesResponse.prototype["resp_version"] = void 0;
    ArduinoSeriesResponse.prototype["series_limit"] = void 0;
    ArduinoSeriesResponse.prototype["status"] = void 0;
    ArduinoSeriesResponse.prototype["times"] = void 0;
    ArduinoSeriesResponse.prototype["to_date"] = void 0;
    ArduinoSeriesResponse.prototype["values"] = void 0;
    var _default = ArduinoSeriesResponse;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesBatch.js
var require_ArduinoSeriesBatch = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesBatch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoSeriesResponse = _interopRequireDefault(require_ArduinoSeriesResponse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoSeriesBatch = function() {
      function ArduinoSeriesBatch2(respVersion, responses) {
        _classCallCheck(this, ArduinoSeriesBatch2);
        ArduinoSeriesBatch2.initialize(this, respVersion, responses);
      }
      _createClass(ArduinoSeriesBatch2, null, [{
        key: "initialize",
        value: function initialize(obj, respVersion, responses) {
          obj["resp_version"] = respVersion;
          obj["responses"] = responses;
        }
        /**
         * Constructs a <code>ArduinoSeriesBatch</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoSeriesBatch} obj Optional instance to populate.
         * @return {module:model/ArduinoSeriesBatch} The populated <code>ArduinoSeriesBatch</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoSeriesBatch2();
            if (data.hasOwnProperty("resp_version")) {
              obj["resp_version"] = _ApiClient["default"].convertToType(data["resp_version"], "Number");
            }
            if (data.hasOwnProperty("responses")) {
              obj["responses"] = _ApiClient["default"].convertToType(data["responses"], [_ArduinoSeriesResponse["default"]]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoSeriesBatch2;
    }();
    ArduinoSeriesBatch.prototype["resp_version"] = void 0;
    ArduinoSeriesBatch.prototype["responses"] = void 0;
    var _default = ArduinoSeriesBatch;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRawResponseSeriesMediaV1.js
var require_BatchQueryRawResponseSeriesMediaV1 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRawResponseSeriesMediaV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var BatchQueryRawResponseSeriesMediaV1 = function() {
      function BatchQueryRawResponseSeriesMediaV12(metric) {
        _classCallCheck(this, BatchQueryRawResponseSeriesMediaV12);
        BatchQueryRawResponseSeriesMediaV12.initialize(this, metric);
      }
      _createClass(BatchQueryRawResponseSeriesMediaV12, null, [{
        key: "initialize",
        value: function initialize(obj, metric) {
          obj["metric"] = metric;
        }
        /**
         * Constructs a <code>BatchQueryRawResponseSeriesMediaV1</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/BatchQueryRawResponseSeriesMediaV1} obj Optional instance to populate.
         * @return {module:model/BatchQueryRawResponseSeriesMediaV1} The populated <code>BatchQueryRawResponseSeriesMediaV1</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchQueryRawResponseSeriesMediaV12();
            if (data.hasOwnProperty("metric")) {
              obj["metric"] = _ApiClient["default"].convertToType(data["metric"], "String");
            }
          }
          return obj;
        }
      }]);
      return BatchQueryRawResponseSeriesMediaV12;
    }();
    BatchQueryRawResponseSeriesMediaV1.prototype["metric"] = void 0;
    var _default = BatchQueryRawResponseSeriesMediaV1;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesRawResponse.js
var require_ArduinoSeriesRawResponse = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesRawResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _BatchQueryRawResponseSeriesMediaV = _interopRequireDefault(require_BatchQueryRawResponseSeriesMediaV1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoSeriesRawResponse = function() {
      function ArduinoSeriesRawResponse2(countValues, fromDate, query, respVersion, series, sort, status, times, toDate, values) {
        _classCallCheck(this, ArduinoSeriesRawResponse2);
        ArduinoSeriesRawResponse2.initialize(this, countValues, fromDate, query, respVersion, series, sort, status, times, toDate, values);
      }
      _createClass(ArduinoSeriesRawResponse2, null, [{
        key: "initialize",
        value: function initialize(obj, countValues, fromDate, query, respVersion, series, sort, status, times, toDate, values) {
          obj["count_values"] = countValues;
          obj["from_date"] = fromDate;
          obj["query"] = query;
          obj["resp_version"] = respVersion;
          obj["series"] = series;
          obj["sort"] = sort;
          obj["status"] = status;
          obj["times"] = times;
          obj["to_date"] = toDate;
          obj["values"] = values;
        }
        /**
         * Constructs a <code>ArduinoSeriesRawResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoSeriesRawResponse} obj Optional instance to populate.
         * @return {module:model/ArduinoSeriesRawResponse} The populated <code>ArduinoSeriesRawResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoSeriesRawResponse2();
            if (data.hasOwnProperty("count_values")) {
              obj["count_values"] = _ApiClient["default"].convertToType(data["count_values"], "Number");
            }
            if (data.hasOwnProperty("from_date")) {
              obj["from_date"] = _ApiClient["default"].convertToType(data["from_date"], "Date");
            }
            if (data.hasOwnProperty("message")) {
              obj["message"] = _ApiClient["default"].convertToType(data["message"], "String");
            }
            if (data.hasOwnProperty("query")) {
              obj["query"] = _ApiClient["default"].convertToType(data["query"], "String");
            }
            if (data.hasOwnProperty("resp_version")) {
              obj["resp_version"] = _ApiClient["default"].convertToType(data["resp_version"], "Number");
            }
            if (data.hasOwnProperty("series")) {
              obj["series"] = _BatchQueryRawResponseSeriesMediaV["default"].constructFromObject(data["series"]);
            }
            if (data.hasOwnProperty("series_limit")) {
              obj["series_limit"] = _ApiClient["default"].convertToType(data["series_limit"], "Number");
            }
            if (data.hasOwnProperty("sort")) {
              obj["sort"] = _ApiClient["default"].convertToType(data["sort"], "String");
            }
            if (data.hasOwnProperty("status")) {
              obj["status"] = _ApiClient["default"].convertToType(data["status"], "String");
            }
            if (data.hasOwnProperty("times")) {
              obj["times"] = _ApiClient["default"].convertToType(data["times"], ["Date"]);
            }
            if (data.hasOwnProperty("to_date")) {
              obj["to_date"] = _ApiClient["default"].convertToType(data["to_date"], "Date");
            }
            if (data.hasOwnProperty("values")) {
              obj["values"] = _ApiClient["default"].convertToType(data["values"], [Object]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoSeriesRawResponse2;
    }();
    ArduinoSeriesRawResponse.prototype["count_values"] = void 0;
    ArduinoSeriesRawResponse.prototype["from_date"] = void 0;
    ArduinoSeriesRawResponse.prototype["message"] = "";
    ArduinoSeriesRawResponse.prototype["query"] = void 0;
    ArduinoSeriesRawResponse.prototype["resp_version"] = void 0;
    ArduinoSeriesRawResponse.prototype["series"] = void 0;
    ArduinoSeriesRawResponse.prototype["series_limit"] = void 0;
    ArduinoSeriesRawResponse.prototype["sort"] = void 0;
    ArduinoSeriesRawResponse.prototype["status"] = void 0;
    ArduinoSeriesRawResponse.prototype["times"] = void 0;
    ArduinoSeriesRawResponse.prototype["to_date"] = void 0;
    ArduinoSeriesRawResponse.prototype["values"] = void 0;
    ArduinoSeriesRawResponse["SortEnum"] = {
      /**
       * value: "ASC"
       * @const
       */
      "ASC": "ASC",
      /**
       * value: "DESC"
       * @const
       */
      "DESC": "DESC"
    };
    var _default = ArduinoSeriesRawResponse;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesRawBatch.js
var require_ArduinoSeriesRawBatch = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesRawBatch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoSeriesRawResponse = _interopRequireDefault(require_ArduinoSeriesRawResponse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoSeriesRawBatch = function() {
      function ArduinoSeriesRawBatch2(respVersion, responses) {
        _classCallCheck(this, ArduinoSeriesRawBatch2);
        ArduinoSeriesRawBatch2.initialize(this, respVersion, responses);
      }
      _createClass(ArduinoSeriesRawBatch2, null, [{
        key: "initialize",
        value: function initialize(obj, respVersion, responses) {
          obj["resp_version"] = respVersion;
          obj["responses"] = responses;
        }
        /**
         * Constructs a <code>ArduinoSeriesRawBatch</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoSeriesRawBatch} obj Optional instance to populate.
         * @return {module:model/ArduinoSeriesRawBatch} The populated <code>ArduinoSeriesRawBatch</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoSeriesRawBatch2();
            if (data.hasOwnProperty("resp_version")) {
              obj["resp_version"] = _ApiClient["default"].convertToType(data["resp_version"], "Number");
            }
            if (data.hasOwnProperty("responses")) {
              obj["responses"] = _ApiClient["default"].convertToType(data["responses"], [_ArduinoSeriesRawResponse["default"]]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoSeriesRawBatch2;
    }();
    ArduinoSeriesRawBatch.prototype["resp_version"] = void 0;
    ArduinoSeriesRawBatch.prototype["responses"] = void 0;
    var _default = ArduinoSeriesRawBatch;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesRawLastValueResponse.js
var require_ArduinoSeriesRawLastValueResponse = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesRawLastValueResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoSeriesRawLastValueResponse = function() {
      function ArduinoSeriesRawLastValueResponse2(countValues, propertyId, thingId, times, values) {
        _classCallCheck(this, ArduinoSeriesRawLastValueResponse2);
        ArduinoSeriesRawLastValueResponse2.initialize(this, countValues, propertyId, thingId, times, values);
      }
      _createClass(ArduinoSeriesRawLastValueResponse2, null, [{
        key: "initialize",
        value: function initialize(obj, countValues, propertyId, thingId, times, values) {
          obj["count_values"] = countValues;
          obj["property_id"] = propertyId;
          obj["thing_id"] = thingId;
          obj["times"] = times;
          obj["values"] = values;
        }
        /**
         * Constructs a <code>ArduinoSeriesRawLastValueResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoSeriesRawLastValueResponse} obj Optional instance to populate.
         * @return {module:model/ArduinoSeriesRawLastValueResponse} The populated <code>ArduinoSeriesRawLastValueResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoSeriesRawLastValueResponse2();
            if (data.hasOwnProperty("count_values")) {
              obj["count_values"] = _ApiClient["default"].convertToType(data["count_values"], "Number");
            }
            if (data.hasOwnProperty("property_id")) {
              obj["property_id"] = _ApiClient["default"].convertToType(data["property_id"], "String");
            }
            if (data.hasOwnProperty("thing_id")) {
              obj["thing_id"] = _ApiClient["default"].convertToType(data["thing_id"], "String");
            }
            if (data.hasOwnProperty("times")) {
              obj["times"] = _ApiClient["default"].convertToType(data["times"], ["Date"]);
            }
            if (data.hasOwnProperty("values")) {
              obj["values"] = _ApiClient["default"].convertToType(data["values"], [Object]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoSeriesRawLastValueResponse2;
    }();
    ArduinoSeriesRawLastValueResponse.prototype["count_values"] = void 0;
    ArduinoSeriesRawLastValueResponse.prototype["property_id"] = void 0;
    ArduinoSeriesRawLastValueResponse.prototype["thing_id"] = void 0;
    ArduinoSeriesRawLastValueResponse.prototype["times"] = void 0;
    ArduinoSeriesRawLastValueResponse.prototype["values"] = void 0;
    var _default = ArduinoSeriesRawLastValueResponse;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesRawBatchLastvalue.js
var require_ArduinoSeriesRawBatchLastvalue = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoSeriesRawBatchLastvalue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoSeriesRawLastValueResponse = _interopRequireDefault(require_ArduinoSeriesRawLastValueResponse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoSeriesRawBatchLastvalue = function() {
      function ArduinoSeriesRawBatchLastvalue2(responses, status) {
        _classCallCheck(this, ArduinoSeriesRawBatchLastvalue2);
        ArduinoSeriesRawBatchLastvalue2.initialize(this, responses, status);
      }
      _createClass(ArduinoSeriesRawBatchLastvalue2, null, [{
        key: "initialize",
        value: function initialize(obj, responses, status) {
          obj["responses"] = responses;
          obj["status"] = status;
        }
        /**
         * Constructs a <code>ArduinoSeriesRawBatchLastvalue</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoSeriesRawBatchLastvalue} obj Optional instance to populate.
         * @return {module:model/ArduinoSeriesRawBatchLastvalue} The populated <code>ArduinoSeriesRawBatchLastvalue</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoSeriesRawBatchLastvalue2();
            if (data.hasOwnProperty("responses")) {
              obj["responses"] = _ApiClient["default"].convertToType(data["responses"], [_ArduinoSeriesRawLastValueResponse["default"]]);
            }
            if (data.hasOwnProperty("status")) {
              obj["status"] = _ApiClient["default"].convertToType(data["status"], "String");
            }
          }
          return obj;
        }
      }]);
      return ArduinoSeriesRawBatchLastvalue2;
    }();
    ArduinoSeriesRawBatchLastvalue.prototype["responses"] = void 0;
    ArduinoSeriesRawBatchLastvalue.prototype["status"] = void 0;
    var _default = ArduinoSeriesRawBatchLastvalue;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Tag.js
var require_Tag = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Tag.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Tag = function() {
      function Tag2(key, value) {
        _classCallCheck(this, Tag2);
        Tag2.initialize(this, key, value);
      }
      _createClass(Tag2, null, [{
        key: "initialize",
        value: function initialize(obj, key, value) {
          obj["key"] = key;
          obj["value"] = value;
        }
        /**
         * Constructs a <code>Tag</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Tag} obj Optional instance to populate.
         * @return {module:model/Tag} The populated <code>Tag</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Tag2();
            if (data.hasOwnProperty("key")) {
              obj["key"] = _ApiClient["default"].convertToType(data["key"], "String");
            }
            if (data.hasOwnProperty("value")) {
              obj["value"] = _ApiClient["default"].convertToType(data["value"], "String");
            }
          }
          return obj;
        }
      }]);
      return Tag2;
    }();
    Tag.prototype["key"] = void 0;
    Tag.prototype["value"] = void 0;
    var _default = Tag;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoTags.js
var require_ArduinoTags = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoTags.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _Tag = _interopRequireDefault(require_Tag());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoTags = function() {
      function ArduinoTags2(tags) {
        _classCallCheck(this, ArduinoTags2);
        ArduinoTags2.initialize(this, tags);
      }
      _createClass(ArduinoTags2, null, [{
        key: "initialize",
        value: function initialize(obj, tags) {
          obj["tags"] = tags;
        }
        /**
         * Constructs a <code>ArduinoTags</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoTags} obj Optional instance to populate.
         * @return {module:model/ArduinoTags} The populated <code>ArduinoTags</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoTags2();
            if (data.hasOwnProperty("tags")) {
              obj["tags"] = _ApiClient["default"].convertToType(data["tags"], [_Tag["default"]]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoTags2;
    }();
    ArduinoTags.prototype["tags"] = void 0;
    var _default = ArduinoTags;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/TimeseriesDataPoint.js
var require_TimeseriesDataPoint = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/TimeseriesDataPoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var TimeseriesDataPoint = function() {
      function TimeseriesDataPoint2(time, value) {
        _classCallCheck(this, TimeseriesDataPoint2);
        TimeseriesDataPoint2.initialize(this, time, value);
      }
      _createClass(TimeseriesDataPoint2, null, [{
        key: "initialize",
        value: function initialize(obj, time, value) {
          obj["time"] = time;
          obj["value"] = value;
        }
        /**
         * Constructs a <code>TimeseriesDataPoint</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/TimeseriesDataPoint} obj Optional instance to populate.
         * @return {module:model/TimeseriesDataPoint} The populated <code>TimeseriesDataPoint</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TimeseriesDataPoint2();
            if (data.hasOwnProperty("time")) {
              obj["time"] = _ApiClient["default"].convertToType(data["time"], "Date");
            }
            if (data.hasOwnProperty("value")) {
              obj["value"] = _ApiClient["default"].convertToType(data["value"], "Number");
            }
          }
          return obj;
        }
      }]);
      return TimeseriesDataPoint2;
    }();
    TimeseriesDataPoint.prototype["time"] = void 0;
    TimeseriesDataPoint.prototype["value"] = void 0;
    var _default = TimeseriesDataPoint;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoTimeseriesmedia.js
var require_ArduinoTimeseriesmedia = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoTimeseriesmedia.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _TimeseriesDataPoint = _interopRequireDefault(require_TimeseriesDataPoint());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoTimeseriesmedia = function() {
      function ArduinoTimeseriesmedia2(data) {
        _classCallCheck(this, ArduinoTimeseriesmedia2);
        ArduinoTimeseriesmedia2.initialize(this, data);
      }
      _createClass(ArduinoTimeseriesmedia2, null, [{
        key: "initialize",
        value: function initialize(obj, data) {
          obj["data"] = data;
        }
        /**
         * Constructs a <code>ArduinoTimeseriesmedia</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoTimeseriesmedia} obj Optional instance to populate.
         * @return {module:model/ArduinoTimeseriesmedia} The populated <code>ArduinoTimeseriesmedia</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoTimeseriesmedia2();
            if (data.hasOwnProperty("data")) {
              obj["data"] = _ApiClient["default"].convertToType(data["data"], [_TimeseriesDataPoint["default"]]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoTimeseriesmedia2;
    }();
    ArduinoTimeseriesmedia.prototype["data"] = void 0;
    var _default = ArduinoTimeseriesmedia;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ArduinoVariableslinks.js
var require_ArduinoVariableslinks = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ArduinoVariableslinks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ArduinoVariableslinks = function() {
      function ArduinoVariableslinks2(variables) {
        _classCallCheck(this, ArduinoVariableslinks2);
        ArduinoVariableslinks2.initialize(this, variables);
      }
      _createClass(ArduinoVariableslinks2, null, [{
        key: "initialize",
        value: function initialize(obj, variables) {
          obj["variables"] = variables;
        }
        /**
         * Constructs a <code>ArduinoVariableslinks</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ArduinoVariableslinks} obj Optional instance to populate.
         * @return {module:model/ArduinoVariableslinks} The populated <code>ArduinoVariableslinks</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ArduinoVariableslinks2();
            if (data.hasOwnProperty("variables")) {
              obj["variables"] = _ApiClient["default"].convertToType(data["variables"], ["String"]);
            }
          }
          return obj;
        }
      }]);
      return ArduinoVariableslinks2;
    }();
    ArduinoVariableslinks.prototype["variables"] = void 0;
    var _default = ArduinoVariableslinks;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRawLastValueRequestMediaV1.js
var require_BatchQueryRawLastValueRequestMediaV1 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRawLastValueRequestMediaV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var BatchQueryRawLastValueRequestMediaV1 = function() {
      function BatchQueryRawLastValueRequestMediaV12(propertyId, thingId) {
        _classCallCheck(this, BatchQueryRawLastValueRequestMediaV12);
        BatchQueryRawLastValueRequestMediaV12.initialize(this, propertyId, thingId);
      }
      _createClass(BatchQueryRawLastValueRequestMediaV12, null, [{
        key: "initialize",
        value: function initialize(obj, propertyId, thingId) {
          obj["property_id"] = propertyId;
          obj["thing_id"] = thingId;
        }
        /**
         * Constructs a <code>BatchQueryRawLastValueRequestMediaV1</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/BatchQueryRawLastValueRequestMediaV1} obj Optional instance to populate.
         * @return {module:model/BatchQueryRawLastValueRequestMediaV1} The populated <code>BatchQueryRawLastValueRequestMediaV1</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchQueryRawLastValueRequestMediaV12();
            if (data.hasOwnProperty("property_id")) {
              obj["property_id"] = _ApiClient["default"].convertToType(data["property_id"], "String");
            }
            if (data.hasOwnProperty("thing_id")) {
              obj["thing_id"] = _ApiClient["default"].convertToType(data["thing_id"], "String");
            }
          }
          return obj;
        }
      }]);
      return BatchQueryRawLastValueRequestMediaV12;
    }();
    BatchQueryRawLastValueRequestMediaV1.prototype["property_id"] = void 0;
    BatchQueryRawLastValueRequestMediaV1.prototype["thing_id"] = void 0;
    var _default = BatchQueryRawLastValueRequestMediaV1;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/BatchLastValueRequestsMediaV1.js
var require_BatchLastValueRequestsMediaV1 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/BatchLastValueRequestsMediaV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _BatchQueryRawLastValueRequestMediaV = _interopRequireDefault(require_BatchQueryRawLastValueRequestMediaV1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var BatchLastValueRequestsMediaV1 = function() {
      function BatchLastValueRequestsMediaV12(requests) {
        _classCallCheck(this, BatchLastValueRequestsMediaV12);
        BatchLastValueRequestsMediaV12.initialize(this, requests);
      }
      _createClass(BatchLastValueRequestsMediaV12, null, [{
        key: "initialize",
        value: function initialize(obj, requests) {
          obj["requests"] = requests;
        }
        /**
         * Constructs a <code>BatchLastValueRequestsMediaV1</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/BatchLastValueRequestsMediaV1} obj Optional instance to populate.
         * @return {module:model/BatchLastValueRequestsMediaV1} The populated <code>BatchLastValueRequestsMediaV1</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchLastValueRequestsMediaV12();
            if (data.hasOwnProperty("requests")) {
              obj["requests"] = _ApiClient["default"].convertToType(data["requests"], [_BatchQueryRawLastValueRequestMediaV["default"]]);
            }
          }
          return obj;
        }
      }]);
      return BatchLastValueRequestsMediaV12;
    }();
    BatchLastValueRequestsMediaV1.prototype["requests"] = void 0;
    var _default = BatchLastValueRequestsMediaV1;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRawRequestMediaV1.js
var require_BatchQueryRawRequestMediaV1 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRawRequestMediaV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var BatchQueryRawRequestMediaV1 = function() {
      function BatchQueryRawRequestMediaV12(q) {
        _classCallCheck(this, BatchQueryRawRequestMediaV12);
        BatchQueryRawRequestMediaV12.initialize(this, q);
      }
      _createClass(BatchQueryRawRequestMediaV12, null, [{
        key: "initialize",
        value: function initialize(obj, q) {
          obj["q"] = q;
        }
        /**
         * Constructs a <code>BatchQueryRawRequestMediaV1</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/BatchQueryRawRequestMediaV1} obj Optional instance to populate.
         * @return {module:model/BatchQueryRawRequestMediaV1} The populated <code>BatchQueryRawRequestMediaV1</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchQueryRawRequestMediaV12();
            if (data.hasOwnProperty("from")) {
              obj["from"] = _ApiClient["default"].convertToType(data["from"], "Date");
            }
            if (data.hasOwnProperty("q")) {
              obj["q"] = _ApiClient["default"].convertToType(data["q"], "String");
            }
            if (data.hasOwnProperty("series_limit")) {
              obj["series_limit"] = _ApiClient["default"].convertToType(data["series_limit"], "Number");
            }
            if (data.hasOwnProperty("sort")) {
              obj["sort"] = _ApiClient["default"].convertToType(data["sort"], "String");
            }
            if (data.hasOwnProperty("to")) {
              obj["to"] = _ApiClient["default"].convertToType(data["to"], "Date");
            }
          }
          return obj;
        }
      }]);
      return BatchQueryRawRequestMediaV12;
    }();
    BatchQueryRawRequestMediaV1.prototype["from"] = void 0;
    BatchQueryRawRequestMediaV1.prototype["q"] = void 0;
    BatchQueryRawRequestMediaV1.prototype["series_limit"] = void 0;
    BatchQueryRawRequestMediaV1.prototype["sort"] = "DESC";
    BatchQueryRawRequestMediaV1.prototype["to"] = void 0;
    BatchQueryRawRequestMediaV1["SortEnum"] = {
      /**
       * value: "ASC"
       * @const
       */
      "ASC": "ASC",
      /**
       * value: "DESC"
       * @const
       */
      "DESC": "DESC"
    };
    var _default = BatchQueryRawRequestMediaV1;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRawRequestsMediaV1.js
var require_BatchQueryRawRequestsMediaV1 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRawRequestsMediaV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _BatchQueryRawRequestMediaV = _interopRequireDefault(require_BatchQueryRawRequestMediaV1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var BatchQueryRawRequestsMediaV1 = function() {
      function BatchQueryRawRequestsMediaV12(requests, respVersion) {
        _classCallCheck(this, BatchQueryRawRequestsMediaV12);
        BatchQueryRawRequestsMediaV12.initialize(this, requests, respVersion);
      }
      _createClass(BatchQueryRawRequestsMediaV12, null, [{
        key: "initialize",
        value: function initialize(obj, requests, respVersion) {
          obj["requests"] = requests;
          obj["resp_version"] = respVersion;
        }
        /**
         * Constructs a <code>BatchQueryRawRequestsMediaV1</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/BatchQueryRawRequestsMediaV1} obj Optional instance to populate.
         * @return {module:model/BatchQueryRawRequestsMediaV1} The populated <code>BatchQueryRawRequestsMediaV1</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchQueryRawRequestsMediaV12();
            if (data.hasOwnProperty("requests")) {
              obj["requests"] = _ApiClient["default"].convertToType(data["requests"], [_BatchQueryRawRequestMediaV["default"]]);
            }
            if (data.hasOwnProperty("resp_version")) {
              obj["resp_version"] = _ApiClient["default"].convertToType(data["resp_version"], "Number");
            }
          }
          return obj;
        }
      }]);
      return BatchQueryRawRequestsMediaV12;
    }();
    BatchQueryRawRequestsMediaV1.prototype["requests"] = void 0;
    BatchQueryRawRequestsMediaV1.prototype["resp_version"] = void 0;
    var _default = BatchQueryRawRequestsMediaV1;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRequestMediaV1.js
var require_BatchQueryRequestMediaV1 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRequestMediaV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var BatchQueryRequestMediaV1 = function() {
      function BatchQueryRequestMediaV12(from, q, to) {
        _classCallCheck(this, BatchQueryRequestMediaV12);
        BatchQueryRequestMediaV12.initialize(this, from, q, to);
      }
      _createClass(BatchQueryRequestMediaV12, null, [{
        key: "initialize",
        value: function initialize(obj, from, q, to) {
          obj["from"] = from;
          obj["q"] = q;
          obj["to"] = to;
        }
        /**
         * Constructs a <code>BatchQueryRequestMediaV1</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/BatchQueryRequestMediaV1} obj Optional instance to populate.
         * @return {module:model/BatchQueryRequestMediaV1} The populated <code>BatchQueryRequestMediaV1</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchQueryRequestMediaV12();
            if (data.hasOwnProperty("from")) {
              obj["from"] = _ApiClient["default"].convertToType(data["from"], "Date");
            }
            if (data.hasOwnProperty("interval")) {
              obj["interval"] = _ApiClient["default"].convertToType(data["interval"], "Number");
            }
            if (data.hasOwnProperty("q")) {
              obj["q"] = _ApiClient["default"].convertToType(data["q"], "String");
            }
            if (data.hasOwnProperty("series_limit")) {
              obj["series_limit"] = _ApiClient["default"].convertToType(data["series_limit"], "Number");
            }
            if (data.hasOwnProperty("to")) {
              obj["to"] = _ApiClient["default"].convertToType(data["to"], "Date");
            }
          }
          return obj;
        }
      }]);
      return BatchQueryRequestMediaV12;
    }();
    BatchQueryRequestMediaV1.prototype["from"] = void 0;
    BatchQueryRequestMediaV1.prototype["interval"] = void 0;
    BatchQueryRequestMediaV1.prototype["q"] = void 0;
    BatchQueryRequestMediaV1.prototype["series_limit"] = void 0;
    BatchQueryRequestMediaV1.prototype["to"] = void 0;
    var _default = BatchQueryRequestMediaV1;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRequestsMediaV1.js
var require_BatchQueryRequestsMediaV1 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/BatchQueryRequestsMediaV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _BatchQueryRequestMediaV = _interopRequireDefault(require_BatchQueryRequestMediaV1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var BatchQueryRequestsMediaV1 = function() {
      function BatchQueryRequestsMediaV12(requests, respVersion) {
        _classCallCheck(this, BatchQueryRequestsMediaV12);
        BatchQueryRequestsMediaV12.initialize(this, requests, respVersion);
      }
      _createClass(BatchQueryRequestsMediaV12, null, [{
        key: "initialize",
        value: function initialize(obj, requests, respVersion) {
          obj["requests"] = requests;
          obj["resp_version"] = respVersion;
        }
        /**
         * Constructs a <code>BatchQueryRequestsMediaV1</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/BatchQueryRequestsMediaV1} obj Optional instance to populate.
         * @return {module:model/BatchQueryRequestsMediaV1} The populated <code>BatchQueryRequestsMediaV1</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BatchQueryRequestsMediaV12();
            if (data.hasOwnProperty("requests")) {
              obj["requests"] = _ApiClient["default"].convertToType(data["requests"], [_BatchQueryRequestMediaV["default"]]);
            }
            if (data.hasOwnProperty("resp_version")) {
              obj["resp_version"] = _ApiClient["default"].convertToType(data["resp_version"], "Number");
            }
          }
          return obj;
        }
      }]);
      return BatchQueryRequestsMediaV12;
    }();
    BatchQueryRequestsMediaV1.prototype["requests"] = void 0;
    BatchQueryRequestsMediaV1.prototype["resp_version"] = void 0;
    var _default = BatchQueryRequestsMediaV1;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/CheckDevicesV2PassPayload.js
var require_CheckDevicesV2PassPayload = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/CheckDevicesV2PassPayload.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var CheckDevicesV2PassPayload = function() {
      function CheckDevicesV2PassPayload2(password) {
        _classCallCheck(this, CheckDevicesV2PassPayload2);
        CheckDevicesV2PassPayload2.initialize(this, password);
      }
      _createClass(CheckDevicesV2PassPayload2, null, [{
        key: "initialize",
        value: function initialize(obj, password) {
          obj["password"] = password;
        }
        /**
         * Constructs a <code>CheckDevicesV2PassPayload</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CheckDevicesV2PassPayload} obj Optional instance to populate.
         * @return {module:model/CheckDevicesV2PassPayload} The populated <code>CheckDevicesV2PassPayload</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CheckDevicesV2PassPayload2();
            if (data.hasOwnProperty("password")) {
              obj["password"] = _ApiClient["default"].convertToType(data["password"], "String");
            }
          }
          return obj;
        }
      }]);
      return CheckDevicesV2PassPayload2;
    }();
    CheckDevicesV2PassPayload.prototype["password"] = void 0;
    var _default = CheckDevicesV2PassPayload;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/CreateDevicesV2CertsPayload.js
var require_CreateDevicesV2CertsPayload = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/CreateDevicesV2CertsPayload.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var CreateDevicesV2CertsPayload = function() {
      function CreateDevicesV2CertsPayload2(csr, enabled) {
        _classCallCheck(this, CreateDevicesV2CertsPayload2);
        CreateDevicesV2CertsPayload2.initialize(this, csr, enabled);
      }
      _createClass(CreateDevicesV2CertsPayload2, null, [{
        key: "initialize",
        value: function initialize(obj, csr, enabled) {
          obj["csr"] = csr;
          obj["enabled"] = enabled;
        }
        /**
         * Constructs a <code>CreateDevicesV2CertsPayload</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CreateDevicesV2CertsPayload} obj Optional instance to populate.
         * @return {module:model/CreateDevicesV2CertsPayload} The populated <code>CreateDevicesV2CertsPayload</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CreateDevicesV2CertsPayload2();
            if (data.hasOwnProperty("ca")) {
              obj["ca"] = _ApiClient["default"].convertToType(data["ca"], "String");
            }
            if (data.hasOwnProperty("csr")) {
              obj["csr"] = _ApiClient["default"].convertToType(data["csr"], "String");
            }
            if (data.hasOwnProperty("enabled")) {
              obj["enabled"] = _ApiClient["default"].convertToType(data["enabled"], "Boolean");
            }
          }
          return obj;
        }
      }]);
      return CreateDevicesV2CertsPayload2;
    }();
    CreateDevicesV2CertsPayload.prototype["ca"] = void 0;
    CreateDevicesV2CertsPayload.prototype["csr"] = void 0;
    CreateDevicesV2CertsPayload.prototype["enabled"] = void 0;
    var _default = CreateDevicesV2CertsPayload;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/CreateDevicesV2Payload.js
var require_CreateDevicesV2Payload = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/CreateDevicesV2Payload.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var CreateDevicesV2Payload = function() {
      function CreateDevicesV2Payload2(type) {
        _classCallCheck(this, CreateDevicesV2Payload2);
        CreateDevicesV2Payload2.initialize(this, type);
      }
      _createClass(CreateDevicesV2Payload2, null, [{
        key: "initialize",
        value: function initialize(obj, type) {
          obj["type"] = type;
        }
        /**
         * Constructs a <code>CreateDevicesV2Payload</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CreateDevicesV2Payload} obj Optional instance to populate.
         * @return {module:model/CreateDevicesV2Payload} The populated <code>CreateDevicesV2Payload</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CreateDevicesV2Payload2();
            if (data.hasOwnProperty("fqbn")) {
              obj["fqbn"] = _ApiClient["default"].convertToType(data["fqbn"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("serial")) {
              obj["serial"] = _ApiClient["default"].convertToType(data["serial"], "String");
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("user_id")) {
              obj["user_id"] = _ApiClient["default"].convertToType(data["user_id"], "String");
            }
            if (data.hasOwnProperty("wifi_fw_version")) {
              obj["wifi_fw_version"] = _ApiClient["default"].convertToType(data["wifi_fw_version"], "String");
            }
          }
          return obj;
        }
      }]);
      return CreateDevicesV2Payload2;
    }();
    CreateDevicesV2Payload.prototype["fqbn"] = void 0;
    CreateDevicesV2Payload.prototype["name"] = void 0;
    CreateDevicesV2Payload.prototype["serial"] = void 0;
    CreateDevicesV2Payload.prototype["type"] = void 0;
    CreateDevicesV2Payload.prototype["user_id"] = void 0;
    CreateDevicesV2Payload.prototype["wifi_fw_version"] = void 0;
    CreateDevicesV2Payload["TypeEnum"] = {
      /**
       * value: "mkrwifi1010"
       * @const
       */
      "mkrwifi1010": "mkrwifi1010",
      /**
       * value: "mkr1000"
       * @const
       */
      "mkr1000": "mkr1000",
      /**
       * value: "nano_33_iot"
       * @const
       */
      "nano_33_iot": "nano_33_iot",
      /**
       * value: "mkrgsm1400"
       * @const
       */
      "mkrgsm1400": "mkrgsm1400",
      /**
       * value: "mkrwan1310"
       * @const
       */
      "mkrwan1310": "mkrwan1310",
      /**
       * value: "mkrwan1300"
       * @const
       */
      "mkrwan1300": "mkrwan1300",
      /**
       * value: "mkrnb1500"
       * @const
       */
      "mkrnb1500": "mkrnb1500",
      /**
       * value: "lora-device"
       * @const
       */
      "lora-device": "lora-device",
      /**
       * value: "login_and_secretkey_wifi"
       * @const
       */
      "login_and_secretkey_wifi": "login_and_secretkey_wifi",
      /**
       * value: "envie_m7"
       * @const
       */
      "envie_m7": "envie_m7",
      /**
       * value: "nanorp2040connect"
       * @const
       */
      "nanorp2040connect": "nanorp2040connect",
      /**
       * value: "nicla_vision"
       * @const
       */
      "nicla_vision": "nicla_vision"
    };
    var _default = CreateDevicesV2Payload;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/CreateLoraDevicesV1Payload.js
var require_CreateLoraDevicesV1Payload = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/CreateLoraDevicesV1Payload.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var CreateLoraDevicesV1Payload = function() {
      function CreateLoraDevicesV1Payload2(app, eui, frequencyPlan, name, type, userId) {
        _classCallCheck(this, CreateLoraDevicesV1Payload2);
        CreateLoraDevicesV1Payload2.initialize(this, app, eui, frequencyPlan, name, type, userId);
      }
      _createClass(CreateLoraDevicesV1Payload2, null, [{
        key: "initialize",
        value: function initialize(obj, app, eui, frequencyPlan, name, type, userId) {
          obj["app"] = app;
          obj["eui"] = eui;
          obj["frequency_plan"] = frequencyPlan;
          obj["name"] = name;
          obj["type"] = type;
          obj["user_id"] = userId;
        }
        /**
         * Constructs a <code>CreateLoraDevicesV1Payload</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CreateLoraDevicesV1Payload} obj Optional instance to populate.
         * @return {module:model/CreateLoraDevicesV1Payload} The populated <code>CreateLoraDevicesV1Payload</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CreateLoraDevicesV1Payload2();
            if (data.hasOwnProperty("app")) {
              obj["app"] = _ApiClient["default"].convertToType(data["app"], "String");
            }
            if (data.hasOwnProperty("app_eui")) {
              obj["app_eui"] = _ApiClient["default"].convertToType(data["app_eui"], "String");
            }
            if (data.hasOwnProperty("app_key")) {
              obj["app_key"] = _ApiClient["default"].convertToType(data["app_key"], "String");
            }
            if (data.hasOwnProperty("eui")) {
              obj["eui"] = _ApiClient["default"].convertToType(data["eui"], "String");
            }
            if (data.hasOwnProperty("frequency_plan")) {
              obj["frequency_plan"] = _ApiClient["default"].convertToType(data["frequency_plan"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("serial")) {
              obj["serial"] = _ApiClient["default"].convertToType(data["serial"], "String");
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("user_id")) {
              obj["user_id"] = _ApiClient["default"].convertToType(data["user_id"], "String");
            }
          }
          return obj;
        }
      }]);
      return CreateLoraDevicesV1Payload2;
    }();
    CreateLoraDevicesV1Payload.prototype["app"] = void 0;
    CreateLoraDevicesV1Payload.prototype["app_eui"] = void 0;
    CreateLoraDevicesV1Payload.prototype["app_key"] = void 0;
    CreateLoraDevicesV1Payload.prototype["eui"] = void 0;
    CreateLoraDevicesV1Payload.prototype["frequency_plan"] = void 0;
    CreateLoraDevicesV1Payload.prototype["name"] = void 0;
    CreateLoraDevicesV1Payload.prototype["serial"] = void 0;
    CreateLoraDevicesV1Payload.prototype["type"] = void 0;
    CreateLoraDevicesV1Payload.prototype["user_id"] = void 0;
    CreateLoraDevicesV1Payload["FrequencyPlanEnum"] = {
      /**
       * value: "EU_863_870_TTN"
       * @const
       */
      "EU_863_870_TTN": "EU_863_870_TTN",
      /**
       * value: "US_902_928_FSB_2"
       * @const
       */
      "US_902_928_FSB_2": "US_902_928_FSB_2",
      /**
       * value: "EU_433"
       * @const
       */
      "EU_433": "EU_433",
      /**
       * value: "AU_915_928_FSB_2"
       * @const
       */
      "AU_915_928_FSB_2": "AU_915_928_FSB_2",
      /**
       * value: "CN_470_510_FSB_11"
       * @const
       */
      "CN_470_510_FSB_11": "CN_470_510_FSB_11",
      /**
       * value: "AS_920_923"
       * @const
       */
      "AS_920_923": "AS_920_923",
      /**
       * value: "AS_920_923_TTN_AU"
       * @const
       */
      "AS_920_923_TTN_AU": "AS_920_923_TTN_AU",
      /**
       * value: "AS_923_925"
       * @const
       */
      "AS_923_925": "AS_923_925",
      /**
       * value: "AS_923_925_TTN_AU"
       * @const
       */
      "AS_923_925_TTN_AU": "AS_923_925_TTN_AU",
      /**
       * value: "KR_920_923_TTN"
       * @const
       */
      "KR_920_923_TTN": "KR_920_923_TTN",
      /**
       * value: "IN_865_867"
       * @const
       */
      "IN_865_867": "IN_865_867"
    };
    CreateLoraDevicesV1Payload["TypeEnum"] = {
      /**
       * value: "lora-device"
       * @const
       */
      "lora-device": "lora-device",
      /**
       * value: "mkrwan1300"
       * @const
       */
      "mkrwan1300": "mkrwan1300",
      /**
       * value: "mkrwan1310"
       * @const
       */
      "mkrwan1310": "mkrwan1310"
    };
    var _default = CreateLoraDevicesV1Payload;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Dashboardshare.js
var require_Dashboardshare = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Dashboardshare.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Dashboardshare = function() {
      function Dashboardshare2() {
        _classCallCheck(this, Dashboardshare2);
        Dashboardshare2.initialize(this);
      }
      _createClass(Dashboardshare2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>Dashboardshare</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Dashboardshare} obj Optional instance to populate.
         * @return {module:model/Dashboardshare} The populated <code>Dashboardshare</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Dashboardshare2();
            if (data.hasOwnProperty("user_id")) {
              obj["user_id"] = _ApiClient["default"].convertToType(data["user_id"], "String");
            }
            if (data.hasOwnProperty("username")) {
              obj["username"] = _ApiClient["default"].convertToType(data["username"], "String");
            }
          }
          return obj;
        }
      }]);
      return Dashboardshare2;
    }();
    Dashboardshare.prototype["user_id"] = void 0;
    Dashboardshare.prototype["username"] = void 0;
    var _default = Dashboardshare;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Widget.js
var require_Widget = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Widget.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Widget = function() {
      function Widget2(height, id, options, type, width, x, y) {
        _classCallCheck(this, Widget2);
        Widget2.initialize(this, height, id, options, type, width, x, y);
      }
      _createClass(Widget2, null, [{
        key: "initialize",
        value: function initialize(obj, height, id, options, type, width, x, y) {
          obj["height"] = height;
          obj["id"] = id;
          obj["options"] = options;
          obj["type"] = type;
          obj["width"] = width;
          obj["x"] = x;
          obj["y"] = y;
        }
        /**
         * Constructs a <code>Widget</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Widget} obj Optional instance to populate.
         * @return {module:model/Widget} The populated <code>Widget</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Widget2();
            if (data.hasOwnProperty("height")) {
              obj["height"] = _ApiClient["default"].convertToType(data["height"], "Number");
            }
            if (data.hasOwnProperty("height_mobile")) {
              obj["height_mobile"] = _ApiClient["default"].convertToType(data["height_mobile"], "Number");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("options")) {
              obj["options"] = _ApiClient["default"].convertToType(data["options"], {
                "String": Object
              });
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("variables")) {
              obj["variables"] = _ApiClient["default"].convertToType(data["variables"], ["String"]);
            }
            if (data.hasOwnProperty("width")) {
              obj["width"] = _ApiClient["default"].convertToType(data["width"], "Number");
            }
            if (data.hasOwnProperty("width_mobile")) {
              obj["width_mobile"] = _ApiClient["default"].convertToType(data["width_mobile"], "Number");
            }
            if (data.hasOwnProperty("x")) {
              obj["x"] = _ApiClient["default"].convertToType(data["x"], "Number");
            }
            if (data.hasOwnProperty("x_mobile")) {
              obj["x_mobile"] = _ApiClient["default"].convertToType(data["x_mobile"], "Number");
            }
            if (data.hasOwnProperty("y")) {
              obj["y"] = _ApiClient["default"].convertToType(data["y"], "Number");
            }
            if (data.hasOwnProperty("y_mobile")) {
              obj["y_mobile"] = _ApiClient["default"].convertToType(data["y_mobile"], "Number");
            }
          }
          return obj;
        }
      }]);
      return Widget2;
    }();
    Widget.prototype["height"] = void 0;
    Widget.prototype["height_mobile"] = void 0;
    Widget.prototype["id"] = void 0;
    Widget.prototype["name"] = void 0;
    Widget.prototype["options"] = void 0;
    Widget.prototype["type"] = void 0;
    Widget.prototype["variables"] = void 0;
    Widget.prototype["width"] = void 0;
    Widget.prototype["width_mobile"] = void 0;
    Widget.prototype["x"] = void 0;
    Widget.prototype["x_mobile"] = void 0;
    Widget.prototype["y"] = void 0;
    Widget.prototype["y_mobile"] = void 0;
    var _default = Widget;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Dashboardv2.js
var require_Dashboardv2 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Dashboardv2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _Widget = _interopRequireDefault(require_Widget());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Dashboardv2 = function() {
      function Dashboardv22() {
        _classCallCheck(this, Dashboardv22);
        Dashboardv22.initialize(this);
      }
      _createClass(Dashboardv22, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>Dashboardv2</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Dashboardv2} obj Optional instance to populate.
         * @return {module:model/Dashboardv2} The populated <code>Dashboardv2</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Dashboardv22();
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("widgets")) {
              obj["widgets"] = _ApiClient["default"].convertToType(data["widgets"], [_Widget["default"]]);
            }
          }
          return obj;
        }
      }]);
      return Dashboardv22;
    }();
    Dashboardv2.prototype["name"] = void 0;
    Dashboardv2.prototype["widgets"] = void 0;
    var _default = Dashboardv2;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Devicev2.js
var require_Devicev2 = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Devicev2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Devicev2 = function() {
      function Devicev22() {
        _classCallCheck(this, Devicev22);
        Devicev22.initialize(this);
      }
      _createClass(Devicev22, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>Devicev2</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Devicev2} obj Optional instance to populate.
         * @return {module:model/Devicev2} The populated <code>Devicev2</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Devicev22();
            if (data.hasOwnProperty("fqbn")) {
              obj["fqbn"] = _ApiClient["default"].convertToType(data["fqbn"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("serial")) {
              obj["serial"] = _ApiClient["default"].convertToType(data["serial"], "String");
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("user_id")) {
              obj["user_id"] = _ApiClient["default"].convertToType(data["user_id"], "String");
            }
            if (data.hasOwnProperty("wifi_fw_version")) {
              obj["wifi_fw_version"] = _ApiClient["default"].convertToType(data["wifi_fw_version"], "String");
            }
          }
          return obj;
        }
      }]);
      return Devicev22;
    }();
    Devicev2.prototype["fqbn"] = void 0;
    Devicev2.prototype["name"] = void 0;
    Devicev2.prototype["serial"] = void 0;
    Devicev2.prototype["type"] = void 0;
    Devicev2.prototype["user_id"] = void 0;
    Devicev2.prototype["wifi_fw_version"] = void 0;
    Devicev2["TypeEnum"] = {
      /**
       * value: "mkrwifi1010"
       * @const
       */
      "mkrwifi1010": "mkrwifi1010",
      /**
       * value: "mkr1000"
       * @const
       */
      "mkr1000": "mkr1000",
      /**
       * value: "nano_33_iot"
       * @const
       */
      "nano_33_iot": "nano_33_iot",
      /**
       * value: "mkrgsm1400"
       * @const
       */
      "mkrgsm1400": "mkrgsm1400",
      /**
       * value: "mkrwan1310"
       * @const
       */
      "mkrwan1310": "mkrwan1310",
      /**
       * value: "mkrwan1300"
       * @const
       */
      "mkrwan1300": "mkrwan1300",
      /**
       * value: "mkrnb1500"
       * @const
       */
      "mkrnb1500": "mkrnb1500",
      /**
       * value: "lora-device"
       * @const
       */
      "lora-device": "lora-device",
      /**
       * value: "login_and_secretkey_wifi"
       * @const
       */
      "login_and_secretkey_wifi": "login_and_secretkey_wifi",
      /**
       * value: "envie_m7"
       * @const
       */
      "envie_m7": "envie_m7",
      /**
       * value: "nanorp2040connect"
       * @const
       */
      "nanorp2040connect": "nanorp2040connect",
      /**
       * value: "nicla_vision"
       * @const
       */
      "nicla_vision": "nicla_vision"
    };
    var _default = Devicev2;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Devicev2Cert.js
var require_Devicev2Cert = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Devicev2Cert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Devicev2Cert = function() {
      function Devicev2Cert2() {
        _classCallCheck(this, Devicev2Cert2);
        Devicev2Cert2.initialize(this);
      }
      _createClass(Devicev2Cert2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>Devicev2Cert</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Devicev2Cert} obj Optional instance to populate.
         * @return {module:model/Devicev2Cert} The populated <code>Devicev2Cert</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Devicev2Cert2();
            if (data.hasOwnProperty("ca")) {
              obj["ca"] = _ApiClient["default"].convertToType(data["ca"], "String");
            }
            if (data.hasOwnProperty("csr")) {
              obj["csr"] = _ApiClient["default"].convertToType(data["csr"], "String");
            }
            if (data.hasOwnProperty("enabled")) {
              obj["enabled"] = _ApiClient["default"].convertToType(data["enabled"], "Boolean");
            }
          }
          return obj;
        }
      }]);
      return Devicev2Cert2;
    }();
    Devicev2Cert.prototype["ca"] = void 0;
    Devicev2Cert.prototype["csr"] = void 0;
    Devicev2Cert.prototype["enabled"] = void 0;
    var _default = Devicev2Cert;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Devicev2Otabinaryurl.js
var require_Devicev2Otabinaryurl = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Devicev2Otabinaryurl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Devicev2Otabinaryurl = function() {
      function Devicev2Otabinaryurl2(binaryKey) {
        _classCallCheck(this, Devicev2Otabinaryurl2);
        Devicev2Otabinaryurl2.initialize(this, binaryKey);
      }
      _createClass(Devicev2Otabinaryurl2, null, [{
        key: "initialize",
        value: function initialize(obj, binaryKey) {
          obj["binary_key"] = binaryKey;
        }
        /**
         * Constructs a <code>Devicev2Otabinaryurl</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Devicev2Otabinaryurl} obj Optional instance to populate.
         * @return {module:model/Devicev2Otabinaryurl} The populated <code>Devicev2Otabinaryurl</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Devicev2Otabinaryurl2();
            if (data.hasOwnProperty("async")) {
              obj["async"] = _ApiClient["default"].convertToType(data["async"], "Boolean");
            }
            if (data.hasOwnProperty("binary_key")) {
              obj["binary_key"] = _ApiClient["default"].convertToType(data["binary_key"], "String");
            }
            if (data.hasOwnProperty("expire_in_mins")) {
              obj["expire_in_mins"] = _ApiClient["default"].convertToType(data["expire_in_mins"], "Number");
            }
          }
          return obj;
        }
      }]);
      return Devicev2Otabinaryurl2;
    }();
    Devicev2Otabinaryurl.prototype["async"] = true;
    Devicev2Otabinaryurl.prototype["binary_key"] = void 0;
    Devicev2Otabinaryurl.prototype["expire_in_mins"] = 10;
    var _default = Devicev2Otabinaryurl;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Devicev2Pass.js
var require_Devicev2Pass = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Devicev2Pass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Devicev2Pass = function() {
      function Devicev2Pass2() {
        _classCallCheck(this, Devicev2Pass2);
        Devicev2Pass2.initialize(this);
      }
      _createClass(Devicev2Pass2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>Devicev2Pass</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Devicev2Pass} obj Optional instance to populate.
         * @return {module:model/Devicev2Pass} The populated <code>Devicev2Pass</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Devicev2Pass2();
            if (data.hasOwnProperty("password")) {
              obj["password"] = _ApiClient["default"].convertToType(data["password"], "String");
            }
          }
          return obj;
        }
      }]);
      return Devicev2Pass2;
    }();
    Devicev2Pass.prototype["password"] = void 0;
    var _default = Devicev2Pass;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Error.js
var require_Error = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Error2 = function() {
      function Error3() {
        _classCallCheck(this, Error3);
        Error3.initialize(this);
      }
      _createClass(Error3, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Error} obj Optional instance to populate.
         * @return {module:model/Error} The populated <code>Error</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Error3();
            if (data.hasOwnProperty("code")) {
              obj["code"] = _ApiClient["default"].convertToType(data["code"], "String");
            }
            if (data.hasOwnProperty("detail")) {
              obj["detail"] = _ApiClient["default"].convertToType(data["detail"], "String");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("meta")) {
              obj["meta"] = _ApiClient["default"].convertToType(data["meta"], {
                "String": Object
              });
            }
            if (data.hasOwnProperty("status")) {
              obj["status"] = _ApiClient["default"].convertToType(data["status"], "Number");
            }
          }
          return obj;
        }
      }]);
      return Error3;
    }();
    Error2.prototype["code"] = void 0;
    Error2.prototype["detail"] = void 0;
    Error2.prototype["id"] = void 0;
    Error2.prototype["meta"] = void 0;
    Error2.prototype["status"] = void 0;
    var _default = Error2;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/HistoricDataRequest.js
var require_HistoricDataRequest = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/HistoricDataRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var HistoricDataRequest = function() {
      function HistoricDataRequest2(from, properties, to) {
        _classCallCheck(this, HistoricDataRequest2);
        HistoricDataRequest2.initialize(this, from, properties, to);
      }
      _createClass(HistoricDataRequest2, null, [{
        key: "initialize",
        value: function initialize(obj, from, properties, to) {
          obj["from"] = from;
          obj["properties"] = properties;
          obj["to"] = to;
        }
        /**
         * Constructs a <code>HistoricDataRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/HistoricDataRequest} obj Optional instance to populate.
         * @return {module:model/HistoricDataRequest} The populated <code>HistoricDataRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new HistoricDataRequest2();
            if (data.hasOwnProperty("from")) {
              obj["from"] = _ApiClient["default"].convertToType(data["from"], "Date");
            }
            if (data.hasOwnProperty("properties")) {
              obj["properties"] = _ApiClient["default"].convertToType(data["properties"], ["String"]);
            }
            if (data.hasOwnProperty("to")) {
              obj["to"] = _ApiClient["default"].convertToType(data["to"], "Date");
            }
          }
          return obj;
        }
      }]);
      return HistoricDataRequest2;
    }();
    HistoricDataRequest.prototype["from"] = void 0;
    HistoricDataRequest.prototype["properties"] = void 0;
    HistoricDataRequest.prototype["to"] = void 0;
    var _default = HistoricDataRequest;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/InlineObject.js
var require_InlineObject = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/InlineObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var InlineObject = function() {
      function InlineObject2(otaFile) {
        _classCallCheck(this, InlineObject2);
        InlineObject2.initialize(this, otaFile);
      }
      _createClass(InlineObject2, null, [{
        key: "initialize",
        value: function initialize(obj, otaFile) {
          obj["ota_file"] = otaFile;
        }
        /**
         * Constructs a <code>InlineObject</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/InlineObject} obj Optional instance to populate.
         * @return {module:model/InlineObject} The populated <code>InlineObject</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new InlineObject2();
            if (data.hasOwnProperty("async")) {
              obj["async"] = _ApiClient["default"].convertToType(data["async"], "Boolean");
            }
            if (data.hasOwnProperty("expire_in_mins")) {
              obj["expire_in_mins"] = _ApiClient["default"].convertToType(data["expire_in_mins"], "Number");
            }
            if (data.hasOwnProperty("ota_file")) {
              obj["ota_file"] = _ApiClient["default"].convertToType(data["ota_file"], File);
            }
          }
          return obj;
        }
      }]);
      return InlineObject2;
    }();
    InlineObject.prototype["async"] = true;
    InlineObject.prototype["expire_in_mins"] = 10;
    InlineObject.prototype["ota_file"] = void 0;
    var _default = InlineObject;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/PropertiesValue.js
var require_PropertiesValue = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/PropertiesValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var PropertiesValue = function() {
      function PropertiesValue2(name, type, value) {
        _classCallCheck(this, PropertiesValue2);
        PropertiesValue2.initialize(this, name, type, value);
      }
      _createClass(PropertiesValue2, null, [{
        key: "initialize",
        value: function initialize(obj, name, type, value) {
          obj["name"] = name;
          obj["type"] = type;
          obj["value"] = value;
        }
        /**
         * Constructs a <code>PropertiesValue</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/PropertiesValue} obj Optional instance to populate.
         * @return {module:model/PropertiesValue} The populated <code>PropertiesValue</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PropertiesValue2();
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("value")) {
              obj["value"] = _ApiClient["default"].convertToType(data["value"], Object);
            }
          }
          return obj;
        }
      }]);
      return PropertiesValue2;
    }();
    PropertiesValue.prototype["name"] = void 0;
    PropertiesValue.prototype["type"] = "infer";
    PropertiesValue.prototype["value"] = void 0;
    PropertiesValue["TypeEnum"] = {
      /**
       * value: "infer"
       * @const
       */
      "infer": "infer",
      /**
       * value: "base64"
       * @const
       */
      "base64": "base64",
      /**
       * value: "hex"
       * @const
       */
      "hex": "hex",
      /**
       * value: "json"
       * @const
       */
      "json": "json"
    };
    var _default = PropertiesValue;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/PropertiesValues.js
var require_PropertiesValues = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/PropertiesValues.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _PropertiesValue = _interopRequireDefault(require_PropertiesValue());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var PropertiesValues = function() {
      function PropertiesValues2(properties) {
        _classCallCheck(this, PropertiesValues2);
        PropertiesValues2.initialize(this, properties);
      }
      _createClass(PropertiesValues2, null, [{
        key: "initialize",
        value: function initialize(obj, properties) {
          obj["properties"] = properties;
        }
        /**
         * Constructs a <code>PropertiesValues</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/PropertiesValues} obj Optional instance to populate.
         * @return {module:model/PropertiesValues} The populated <code>PropertiesValues</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PropertiesValues2();
            if (data.hasOwnProperty("input")) {
              obj["input"] = _ApiClient["default"].convertToType(data["input"], "Boolean");
            }
            if (data.hasOwnProperty("properties")) {
              obj["properties"] = _ApiClient["default"].convertToType(data["properties"], [_PropertiesValue["default"]]);
            }
          }
          return obj;
        }
      }]);
      return PropertiesValues2;
    }();
    PropertiesValues.prototype["input"] = false;
    PropertiesValues.prototype["properties"] = void 0;
    var _default = PropertiesValues;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Property.js
var require_Property = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Property.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Property = function() {
      function Property2(name, permission, type, updateStrategy) {
        _classCallCheck(this, Property2);
        Property2.initialize(this, name, permission, type, updateStrategy);
      }
      _createClass(Property2, null, [{
        key: "initialize",
        value: function initialize(obj, name, permission, type, updateStrategy) {
          obj["name"] = name;
          obj["permission"] = permission;
          obj["type"] = type;
          obj["update_strategy"] = updateStrategy;
        }
        /**
         * Constructs a <code>Property</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Property} obj Optional instance to populate.
         * @return {module:model/Property} The populated <code>Property</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Property2();
            if (data.hasOwnProperty("max_value")) {
              obj["max_value"] = _ApiClient["default"].convertToType(data["max_value"], "Number");
            }
            if (data.hasOwnProperty("min_value")) {
              obj["min_value"] = _ApiClient["default"].convertToType(data["min_value"], "Number");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("permission")) {
              obj["permission"] = _ApiClient["default"].convertToType(data["permission"], "String");
            }
            if (data.hasOwnProperty("persist")) {
              obj["persist"] = _ApiClient["default"].convertToType(data["persist"], "Boolean");
            }
            if (data.hasOwnProperty("tag")) {
              obj["tag"] = _ApiClient["default"].convertToType(data["tag"], "Number");
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("update_parameter")) {
              obj["update_parameter"] = _ApiClient["default"].convertToType(data["update_parameter"], "Number");
            }
            if (data.hasOwnProperty("update_strategy")) {
              obj["update_strategy"] = _ApiClient["default"].convertToType(data["update_strategy"], "String");
            }
            if (data.hasOwnProperty("variable_name")) {
              obj["variable_name"] = _ApiClient["default"].convertToType(data["variable_name"], "String");
            }
          }
          return obj;
        }
      }]);
      return Property2;
    }();
    Property.prototype["max_value"] = void 0;
    Property.prototype["min_value"] = void 0;
    Property.prototype["name"] = void 0;
    Property.prototype["permission"] = void 0;
    Property.prototype["persist"] = true;
    Property.prototype["tag"] = void 0;
    Property.prototype["type"] = void 0;
    Property.prototype["update_parameter"] = void 0;
    Property.prototype["update_strategy"] = void 0;
    Property.prototype["variable_name"] = void 0;
    Property["PermissionEnum"] = {
      /**
       * value: "READ_ONLY"
       * @const
       */
      "ONLY": "READ_ONLY",
      /**
       * value: "READ_WRITE"
       * @const
       */
      "WRITE": "READ_WRITE"
    };
    Property["TypeEnum"] = {
      /**
       * value: "ANALOG"
       * @const
       */
      "ANALOG": "ANALOG",
      /**
       * value: "CHARSTRING"
       * @const
       */
      "CHARSTRING": "CHARSTRING",
      /**
       * value: "FLOAT"
       * @const
       */
      "FLOAT": "FLOAT",
      /**
       * value: "INT"
       * @const
       */
      "INT": "INT",
      /**
       * value: "LENGHT_C"
       * @const
       */
      "LENGHT_C": "LENGHT_C",
      /**
       * value: "LENGHT_I"
       * @const
       */
      "LENGHT_I": "LENGHT_I",
      /**
       * value: "LENGHT_M"
       * @const
       */
      "LENGHT_M": "LENGHT_M",
      /**
       * value: "PERCENTAGE"
       * @const
       */
      "PERCENTAGE": "PERCENTAGE",
      /**
       * value: "STATUS"
       * @const
       */
      "STATUS": "STATUS",
      /**
       * value: "TEMPERATURE_C"
       * @const
       */
      "TEMPERATURE_C": "TEMPERATURE_C",
      /**
       * value: "TEMPERATURE_F"
       * @const
       */
      "TEMPERATURE_F": "TEMPERATURE_F",
      /**
       * value: "METER"
       * @const
       */
      "METER": "METER",
      /**
       * value: "KILOGRAM"
       * @const
       */
      "KILOGRAM": "KILOGRAM",
      /**
       * value: "GRAM"
       * @const
       */
      "GRAM": "GRAM",
      /**
       * value: "SECOND"
       * @const
       */
      "SECOND": "SECOND",
      /**
       * value: "AMPERE"
       * @const
       */
      "AMPERE": "AMPERE",
      /**
       * value: "KELVIN"
       * @const
       */
      "KELVIN": "KELVIN",
      /**
       * value: "CANDELA"
       * @const
       */
      "CANDELA": "CANDELA",
      /**
       * value: "MOLE"
       * @const
       */
      "MOLE": "MOLE",
      /**
       * value: "HERTZ"
       * @const
       */
      "HERTZ": "HERTZ",
      /**
       * value: "RADIAN"
       * @const
       */
      "RADIAN": "RADIAN",
      /**
       * value: "STERADIAN"
       * @const
       */
      "STERADIAN": "STERADIAN",
      /**
       * value: "NEWTON"
       * @const
       */
      "NEWTON": "NEWTON",
      /**
       * value: "PASCAL"
       * @const
       */
      "PASCAL": "PASCAL",
      /**
       * value: "JOULE"
       * @const
       */
      "JOULE": "JOULE",
      /**
       * value: "WATT"
       * @const
       */
      "WATT": "WATT",
      /**
       * value: "COULOMB"
       * @const
       */
      "COULOMB": "COULOMB",
      /**
       * value: "VOLT"
       * @const
       */
      "VOLT": "VOLT",
      /**
       * value: "FARAD"
       * @const
       */
      "FARAD": "FARAD",
      /**
       * value: "OHM"
       * @const
       */
      "OHM": "OHM",
      /**
       * value: "SIEMENS"
       * @const
       */
      "SIEMENS": "SIEMENS",
      /**
       * value: "WEBER"
       * @const
       */
      "WEBER": "WEBER",
      /**
       * value: "TESLA"
       * @const
       */
      "TESLA": "TESLA",
      /**
       * value: "HENRY"
       * @const
       */
      "HENRY": "HENRY",
      /**
       * value: "DEGREES_CELSIUS"
       * @const
       */
      "DEGREES_CELSIUS": "DEGREES_CELSIUS",
      /**
       * value: "LUMEN"
       * @const
       */
      "LUMEN": "LUMEN",
      /**
       * value: "LUX"
       * @const
       */
      "LUX": "LUX",
      /**
       * value: "BECQUEREL"
       * @const
       */
      "BECQUEREL": "BECQUEREL",
      /**
       * value: "GRAY"
       * @const
       */
      "GRAY": "GRAY",
      /**
       * value: "SIEVERT"
       * @const
       */
      "SIEVERT": "SIEVERT",
      /**
       * value: "KATAL"
       * @const
       */
      "KATAL": "KATAL",
      /**
       * value: "SQUARE_METER"
       * @const
       */
      "SQUARE_METER": "SQUARE_METER",
      /**
       * value: "CUBIC_METER"
       * @const
       */
      "CUBIC_METER": "CUBIC_METER",
      /**
       * value: "LITER"
       * @const
       */
      "LITER": "LITER",
      /**
       * value: "METER_PER_SECOND"
       * @const
       */
      "METER_PER_SECOND": "METER_PER_SECOND",
      /**
       * value: "METER_PER_SQUARE_SECOND"
       * @const
       */
      "METER_PER_SQUARE_SECOND": "METER_PER_SQUARE_SECOND",
      /**
       * value: "CUBIC_METER_PER_SECOND"
       * @const
       */
      "CUBIC_METER_PER_SECOND": "CUBIC_METER_PER_SECOND",
      /**
       * value: "LITER_PER_SECOND"
       * @const
       */
      "LITER_PER_SECOND": "LITER_PER_SECOND",
      /**
       * value: "WATT_PER_SQUARE_METER"
       * @const
       */
      "WATT_PER_SQUARE_METER": "WATT_PER_SQUARE_METER",
      /**
       * value: "CANDELA_PER_SQUARE_METER"
       * @const
       */
      "CANDELA_PER_SQUARE_METER": "CANDELA_PER_SQUARE_METER",
      /**
       * value: "BIT"
       * @const
       */
      "BIT": "BIT",
      /**
       * value: "BIT_PER_SECOND"
       * @const
       */
      "BIT_PER_SECOND": "BIT_PER_SECOND",
      /**
       * value: "DEGREES_LATITUDE"
       * @const
       */
      "DEGREES_LATITUDE": "DEGREES_LATITUDE",
      /**
       * value: "DEGREES_LONGITUDE"
       * @const
       */
      "DEGREES_LONGITUDE": "DEGREES_LONGITUDE",
      /**
       * value: "PH_VALUE"
       * @const
       */
      "PH_VALUE": "PH_VALUE",
      /**
       * value: "DECIBEL"
       * @const
       */
      "DECIBEL": "DECIBEL",
      /**
       * value: "DECIBEL_1W"
       * @const
       */
      "DECIBEL_1W": "DECIBEL_1W",
      /**
       * value: "BEL"
       * @const
       */
      "BEL": "BEL",
      /**
       * value: "COUNT"
       * @const
       */
      "COUNT": "COUNT",
      /**
       * value: "RATIO_DIV"
       * @const
       */
      "RATIO_DIV": "RATIO_DIV",
      /**
       * value: "RATIO_MOD"
       * @const
       */
      "RATIO_MOD": "RATIO_MOD",
      /**
       * value: "PERCENTAGE_RELATIVE_HUMIDITY"
       * @const
       */
      "PERCENTAGE_RELATIVE_HUMIDITY": "PERCENTAGE_RELATIVE_HUMIDITY",
      /**
       * value: "PERCENTAGE_BATTERY_LEVEL"
       * @const
       */
      "PERCENTAGE_BATTERY_LEVEL": "PERCENTAGE_BATTERY_LEVEL",
      /**
       * value: "SECONDS_BATTERY_LEVEL"
       * @const
       */
      "SECONDS_BATTERY_LEVEL": "SECONDS_BATTERY_LEVEL",
      /**
       * value: "EVENT_RATE_SECOND"
       * @const
       */
      "EVENT_RATE_SECOND": "EVENT_RATE_SECOND",
      /**
       * value: "EVENT_RATE_MINUTE"
       * @const
       */
      "EVENT_RATE_MINUTE": "EVENT_RATE_MINUTE",
      /**
       * value: "HEART_RATE"
       * @const
       */
      "HEART_RATE": "HEART_RATE",
      /**
       * value: "HEART_BEATS"
       * @const
       */
      "HEART_BEATS": "HEART_BEATS",
      /**
       * value: "SIEMENS_PER_METER"
       * @const
       */
      "SIEMENS_PER_METER": "SIEMENS_PER_METER",
      /**
       * value: "LOCATION"
       * @const
       */
      "LOCATION": "LOCATION",
      /**
       * value: "COLOR_HSB"
       * @const
       */
      "COLOR_HSB": "COLOR_HSB",
      /**
       * value: "COLOR_RGB"
       * @const
       */
      "COLOR_RGB": "COLOR_RGB",
      /**
       * value: "GENERIC_COMPLEX_PROPERTY"
       * @const
       */
      "GENERIC_COMPLEX_PROPERTY": "GENERIC_COMPLEX_PROPERTY",
      /**
       * value: "HOME_COLORED_LIGHT"
       * @const
       */
      "HOME_COLORED_LIGHT": "HOME_COLORED_LIGHT",
      /**
       * value: "HOME_DIMMED_LIGHT"
       * @const
       */
      "HOME_DIMMED_LIGHT": "HOME_DIMMED_LIGHT",
      /**
       * value: "HOME_LIGHT"
       * @const
       */
      "HOME_LIGHT": "HOME_LIGHT",
      /**
       * value: "HOME_CONTACT_SENSOR"
       * @const
       */
      "HOME_CONTACT_SENSOR": "HOME_CONTACT_SENSOR",
      /**
       * value: "HOME_MOTION_SENSOR"
       * @const
       */
      "HOME_MOTION_SENSOR": "HOME_MOTION_SENSOR",
      /**
       * value: "HOME_SMART_PLUG"
       * @const
       */
      "HOME_SMART_PLUG": "HOME_SMART_PLUG",
      /**
       * value: "HOME_TEMPERATURE"
       * @const
       */
      "HOME_TEMPERATURE": "HOME_TEMPERATURE",
      /**
       * value: "HOME_TEMPERATURE_C"
       * @const
       */
      "HOME_TEMPERATURE_C": "HOME_TEMPERATURE_C",
      /**
       * value: "HOME_TEMPERATURE_F"
       * @const
       */
      "HOME_TEMPERATURE_F": "HOME_TEMPERATURE_F",
      /**
       * value: "HOME_SWITCH"
       * @const
       */
      "HOME_SWITCH": "HOME_SWITCH",
      /**
       * value: "HOME_TELEVISION"
       * @const
       */
      "HOME_TELEVISION": "HOME_TELEVISION",
      /**
       * value: "ENERGY"
       * @const
       */
      "ENERGY": "ENERGY",
      /**
       * value: "FORCE"
       * @const
       */
      "FORCE": "FORCE",
      /**
       * value: "TEMPERATURE"
       * @const
       */
      "TEMPERATURE": "TEMPERATURE",
      /**
       * value: "POWER"
       * @const
       */
      "POWER": "POWER",
      /**
       * value: "ELECTRIC_CURRENT"
       * @const
       */
      "ELECTRIC_CURRENT": "ELECTRIC_CURRENT",
      /**
       * value: "ELECTRIC_POTENTIAL"
       * @const
       */
      "ELECTRIC_POTENTIAL": "ELECTRIC_POTENTIAL",
      /**
       * value: "ELECTRICAL_RESISTANCE"
       * @const
       */
      "ELECTRICAL_RESISTANCE": "ELECTRICAL_RESISTANCE",
      /**
       * value: "CAPACITANCE"
       * @const
       */
      "CAPACITANCE": "CAPACITANCE",
      /**
       * value: "TIME"
       * @const
       */
      "TIME": "TIME",
      /**
       * value: "FREQUENCY"
       * @const
       */
      "FREQUENCY": "FREQUENCY",
      /**
       * value: "DATA_RATE"
       * @const
       */
      "DATA_RATE": "DATA_RATE",
      /**
       * value: "ACCELERATION"
       * @const
       */
      "ACCELERATION": "ACCELERATION",
      /**
       * value: "AREA"
       * @const
       */
      "AREA": "AREA",
      /**
       * value: "LENGTH"
       * @const
       */
      "LENGTH": "LENGTH",
      /**
       * value: "VELOCITY"
       * @const
       */
      "VELOCITY": "VELOCITY",
      /**
       * value: "MASS"
       * @const
       */
      "MASS": "MASS",
      /**
       * value: "VOLUME"
       * @const
       */
      "VOLUME": "VOLUME",
      /**
       * value: "FLOW_RATE"
       * @const
       */
      "FLOW_RATE": "FLOW_RATE",
      /**
       * value: "ANGLE"
       * @const
       */
      "ANGLE": "ANGLE",
      /**
       * value: "ILLUMINANCE"
       * @const
       */
      "ILLUMINANCE": "ILLUMINANCE",
      /**
       * value: "LUMINOUS_FLUX"
       * @const
       */
      "LUMINOUS_FLUX": "LUMINOUS_FLUX",
      /**
       * value: "LUMINANCE"
       * @const
       */
      "LUMINANCE": "LUMINANCE",
      /**
       * value: "LUMINOUS_INTENSITY"
       * @const
       */
      "LUMINOUS_INTENSITY": "LUMINOUS_INTENSITY",
      /**
       * value: "LOGARITHMIC_QUANTITY"
       * @const
       */
      "LOGARITHMIC_QUANTITY": "LOGARITHMIC_QUANTITY",
      /**
       * value: "PRESSURE"
       * @const
       */
      "PRESSURE": "PRESSURE",
      /**
       * value: "INFORMATION_CONTENT"
       * @const
       */
      "INFORMATION_CONTENT": "INFORMATION_CONTENT",
      /**
       * value: "SCHEDULE"
       * @const
       */
      "SCHEDULE": "SCHEDULE"
    };
    Property["UpdateStrategyEnum"] = {
      /**
       * value: "ON_CHANGE"
       * @const
       */
      "ON_CHANGE": "ON_CHANGE",
      /**
       * value: "TIMED"
       * @const
       */
      "TIMED": "TIMED"
    };
    var _default = Property;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/PropertyValue.js
var require_PropertyValue = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/PropertyValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var PropertyValue = function() {
      function PropertyValue2(value) {
        _classCallCheck(this, PropertyValue2);
        PropertyValue2.initialize(this, value);
      }
      _createClass(PropertyValue2, null, [{
        key: "initialize",
        value: function initialize(obj, value) {
          obj["value"] = value;
        }
        /**
         * Constructs a <code>PropertyValue</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/PropertyValue} obj Optional instance to populate.
         * @return {module:model/PropertyValue} The populated <code>PropertyValue</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PropertyValue2();
            if (data.hasOwnProperty("device_id")) {
              obj["device_id"] = _ApiClient["default"].convertToType(data["device_id"], "String");
            }
            if (data.hasOwnProperty("value")) {
              obj["value"] = _ApiClient["default"].convertToType(data["value"], Object);
            }
          }
          return obj;
        }
      }]);
      return PropertyValue2;
    }();
    PropertyValue.prototype["device_id"] = void 0;
    PropertyValue.prototype["value"] = void 0;
    var _default = PropertyValue;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Sharerequest.js
var require_Sharerequest = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Sharerequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Sharerequest = function() {
      function Sharerequest2() {
        _classCallCheck(this, Sharerequest2);
        Sharerequest2.initialize(this);
      }
      _createClass(Sharerequest2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>Sharerequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Sharerequest} obj Optional instance to populate.
         * @return {module:model/Sharerequest} The populated <code>Sharerequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Sharerequest2();
            if (data.hasOwnProperty("message")) {
              obj["message"] = _ApiClient["default"].convertToType(data["message"], "String");
            }
          }
          return obj;
        }
      }]);
      return Sharerequest2;
    }();
    Sharerequest.prototype["message"] = void 0;
    var _default = Sharerequest;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ThingCreate.js
var require_ThingCreate = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ThingCreate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _Property = _interopRequireDefault(require_Property());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ThingCreate = function() {
      function ThingCreate2() {
        _classCallCheck(this, ThingCreate2);
        ThingCreate2.initialize(this);
      }
      _createClass(ThingCreate2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>ThingCreate</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ThingCreate} obj Optional instance to populate.
         * @return {module:model/ThingCreate} The populated <code>ThingCreate</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ThingCreate2();
            if (data.hasOwnProperty("device_id")) {
              obj["device_id"] = _ApiClient["default"].convertToType(data["device_id"], "String");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("properties")) {
              obj["properties"] = _ApiClient["default"].convertToType(data["properties"], [_Property["default"]]);
            }
            if (data.hasOwnProperty("timezone")) {
              obj["timezone"] = _ApiClient["default"].convertToType(data["timezone"], "String");
            }
            if (data.hasOwnProperty("webhook_active")) {
              obj["webhook_active"] = _ApiClient["default"].convertToType(data["webhook_active"], "Boolean");
            }
            if (data.hasOwnProperty("webhook_uri")) {
              obj["webhook_uri"] = _ApiClient["default"].convertToType(data["webhook_uri"], "String");
            }
          }
          return obj;
        }
      }]);
      return ThingCreate2;
    }();
    ThingCreate.prototype["device_id"] = void 0;
    ThingCreate.prototype["id"] = void 0;
    ThingCreate.prototype["name"] = void 0;
    ThingCreate.prototype["properties"] = void 0;
    ThingCreate.prototype["timezone"] = "America/New_York";
    ThingCreate.prototype["webhook_active"] = void 0;
    ThingCreate.prototype["webhook_uri"] = void 0;
    var _default = ThingCreate;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ThingSketch.js
var require_ThingSketch = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ThingSketch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ThingSketch = function() {
      function ThingSketch2() {
        _classCallCheck(this, ThingSketch2);
        ThingSketch2.initialize(this);
      }
      _createClass(ThingSketch2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>ThingSketch</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ThingSketch} obj Optional instance to populate.
         * @return {module:model/ThingSketch} The populated <code>ThingSketch</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ThingSketch2();
            if (data.hasOwnProperty("sketch_version")) {
              obj["sketch_version"] = _ApiClient["default"].convertToType(data["sketch_version"], "String");
            }
          }
          return obj;
        }
      }]);
      return ThingSketch2;
    }();
    ThingSketch.prototype["sketch_version"] = void 0;
    ThingSketch["SketchVersionEnum"] = {
      /**
       * value: "v1"
       * @const
       */
      "v1": "v1",
      /**
       * value: "v2"
       * @const
       */
      "v2": "v2"
    };
    var _default = ThingSketch;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/ThingUpdate.js
var require_ThingUpdate = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/ThingUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _Property = _interopRequireDefault(require_Property());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ThingUpdate = function() {
      function ThingUpdate2() {
        _classCallCheck(this, ThingUpdate2);
        ThingUpdate2.initialize(this);
      }
      _createClass(ThingUpdate2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>ThingUpdate</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ThingUpdate} obj Optional instance to populate.
         * @return {module:model/ThingUpdate} The populated <code>ThingUpdate</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ThingUpdate2();
            if (data.hasOwnProperty("device_id")) {
              obj["device_id"] = _ApiClient["default"].convertToType(data["device_id"], "String");
            }
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("properties")) {
              obj["properties"] = _ApiClient["default"].convertToType(data["properties"], [_Property["default"]]);
            }
            if (data.hasOwnProperty("timezone")) {
              obj["timezone"] = _ApiClient["default"].convertToType(data["timezone"], "String");
            }
            if (data.hasOwnProperty("webhook_active")) {
              obj["webhook_active"] = _ApiClient["default"].convertToType(data["webhook_active"], "Boolean");
            }
            if (data.hasOwnProperty("webhook_uri")) {
              obj["webhook_uri"] = _ApiClient["default"].convertToType(data["webhook_uri"], "String");
            }
          }
          return obj;
        }
      }]);
      return ThingUpdate2;
    }();
    ThingUpdate.prototype["device_id"] = void 0;
    ThingUpdate.prototype["id"] = void 0;
    ThingUpdate.prototype["name"] = void 0;
    ThingUpdate.prototype["properties"] = void 0;
    ThingUpdate.prototype["timezone"] = void 0;
    ThingUpdate.prototype["webhook_active"] = void 0;
    ThingUpdate.prototype["webhook_uri"] = void 0;
    var _default = ThingUpdate;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/UpdateSketch.js
var require_UpdateSketch = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/UpdateSketch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var UpdateSketch = function() {
      function UpdateSketch2() {
        _classCallCheck(this, UpdateSketch2);
        UpdateSketch2.initialize(this);
      }
      _createClass(UpdateSketch2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>UpdateSketch</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/UpdateSketch} obj Optional instance to populate.
         * @return {module:model/UpdateSketch} The populated <code>UpdateSketch</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new UpdateSketch2();
            if (data.hasOwnProperty("sketch_version")) {
              obj["sketch_version"] = _ApiClient["default"].convertToType(data["sketch_version"], "String");
            }
          }
          return obj;
        }
      }]);
      return UpdateSketch2;
    }();
    UpdateSketch.prototype["sketch_version"] = void 0;
    UpdateSketch["SketchVersionEnum"] = {
      /**
       * value: "v1"
       * @const
       */
      "v1": "v1",
      /**
       * value: "v2"
       * @const
       */
      "v2": "v2"
    };
    var _default = UpdateSketch;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/model/Widgetlink.js
var require_Widgetlink = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/model/Widgetlink.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Widgetlink = function() {
      function Widgetlink2() {
        _classCallCheck(this, Widgetlink2);
        Widgetlink2.initialize(this);
      }
      _createClass(Widgetlink2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>Widgetlink</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Widgetlink} obj Optional instance to populate.
         * @return {module:model/Widgetlink} The populated <code>Widgetlink</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Widgetlink2();
            if (data.hasOwnProperty("variables")) {
              obj["variables"] = _ApiClient["default"].convertToType(data["variables"], ["String"]);
            }
          }
          return obj;
        }
      }]);
      return Widgetlink2;
    }();
    Widgetlink.prototype["variables"] = void 0;
    var _default = Widgetlink;
    exports["default"] = _default;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/DashboardsV2Api.js
var require_DashboardsV2Api = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/DashboardsV2Api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoDashboardshare = _interopRequireDefault(require_ArduinoDashboardshare());
    var _ArduinoDashboardv = _interopRequireDefault(require_ArduinoDashboardv2());
    var _ArduinoVariableslinks = _interopRequireDefault(require_ArduinoVariableslinks());
    var _Dashboardshare = _interopRequireDefault(require_Dashboardshare());
    var _Dashboardv = _interopRequireDefault(require_Dashboardv2());
    var _Error = _interopRequireDefault(require_Error());
    var _Sharerequest = _interopRequireDefault(require_Sharerequest());
    var _Widgetlink = _interopRequireDefault(require_Widgetlink());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var DashboardsV2Api = function() {
      function DashboardsV2Api2(apiClient) {
        _classCallCheck(this, DashboardsV2Api2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(DashboardsV2Api2, [{
        key: "dashboardsV2CreateWithHttpInfo",
        value: function dashboardsV2CreateWithHttpInfo(dashboardv2, opts) {
          opts = opts || {};
          var postBody = dashboardv2;
          if (dashboardv2 === void 0 || dashboardv2 === null) {
            throw new _Error["default"]("Missing the required parameter 'dashboardv2' when calling dashboardsV2Create");
          }
          var pathParams = {};
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = [];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoDashboardv["default"];
          return this.apiClient.callApi("/v2/dashboards", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * create dashboards_v2
         * Create a new dashboard
         * @param {module:model/Dashboardv2} dashboardv2 DashboardV2Payload describes a dashboard
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDashboardv2}
         */
      }, {
        key: "dashboardsV2Create",
        value: function dashboardsV2Create(dashboardv2, opts) {
          return this.dashboardsV2CreateWithHttpInfo(dashboardv2, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * delete dashboards_v2
         * Delete a dashboard
         * @param {String} id The id of the dashboard
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "dashboardsV2DeleteWithHttpInfo",
        value: function dashboardsV2DeleteWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Delete");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = [];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/dashboards/{id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * delete dashboards_v2
         * Delete a dashboard
         * @param {String} id The id of the dashboard
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "dashboardsV2Delete",
        value: function dashboardsV2Delete(id, opts) {
          return this.dashboardsV2DeleteWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * deleteShare dashboards_v2
         * Delete a user the dashboard has been shared with
         * @param {String} id The id of the dashboard
         * @param {String} userId The id of the user
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "dashboardsV2DeleteShareWithHttpInfo",
        value: function dashboardsV2DeleteShareWithHttpInfo(id, userId, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2DeleteShare");
          }
          if (userId === void 0 || userId === null) {
            throw new _Error["default"]("Missing the required parameter 'userId' when calling dashboardsV2DeleteShare");
          }
          var pathParams = {
            "id": id,
            "user_id": userId
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = [];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/dashboards/{id}/shares/{user_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * deleteShare dashboards_v2
         * Delete a user the dashboard has been shared with
         * @param {String} id The id of the dashboard
         * @param {String} userId The id of the user
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "dashboardsV2DeleteShare",
        value: function dashboardsV2DeleteShare(id, userId, opts) {
          return this.dashboardsV2DeleteShareWithHttpInfo(id, userId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * link dashboards_v2
         * Link or detach widget variables
         * @param {String} id The id of the dashboard
         * @param {String} widgetId The id of the widget
         * @param {module:model/Widgetlink} widgetlink 
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoVariableslinks} and HTTP response
         */
      }, {
        key: "dashboardsV2LinkWithHttpInfo",
        value: function dashboardsV2LinkWithHttpInfo(id, widgetId, widgetlink, opts) {
          opts = opts || {};
          var postBody = widgetlink;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Link");
          }
          if (widgetId === void 0 || widgetId === null) {
            throw new _Error["default"]("Missing the required parameter 'widgetId' when calling dashboardsV2Link");
          }
          if (widgetlink === void 0 || widgetlink === null) {
            throw new _Error["default"]("Missing the required parameter 'widgetlink' when calling dashboardsV2Link");
          }
          var pathParams = {
            "id": id,
            "widgetId": widgetId
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = [];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoVariableslinks["default"];
          return this.apiClient.callApi("/v2/dashboards/{id}/widgets/{widgetId}/variables", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * link dashboards_v2
         * Link or detach widget variables
         * @param {String} id The id of the dashboard
         * @param {String} widgetId The id of the widget
         * @param {module:model/Widgetlink} widgetlink 
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoVariableslinks}
         */
      }, {
        key: "dashboardsV2Link",
        value: function dashboardsV2Link(id, widgetId, widgetlink, opts) {
          return this.dashboardsV2LinkWithHttpInfo(id, widgetId, widgetlink, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * list dashboards_v2
         * Returns the list of dashboards
         * @param {Object} opts Optional parameters
         * @param {String} opts.name The name of the dashboard
         * @param {String} opts.userId The user_id of the dashboard's owner
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoDashboardv2>} and HTTP response
         */
      }, {
        key: "dashboardsV2ListWithHttpInfo",
        value: function dashboardsV2ListWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "name": opts["name"],
            "user_id": opts["userId"]
          };
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = [];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [_ArduinoDashboardv["default"]];
          return this.apiClient.callApi("/v2/dashboards", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * list dashboards_v2
         * Returns the list of dashboards
         * @param {Object} opts Optional parameters
         * @param {String} opts.name The name of the dashboard
         * @param {String} opts.userId The user_id of the dashboard's owner
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoDashboardv2>}
         */
      }, {
        key: "dashboardsV2List",
        value: function dashboardsV2List(opts) {
          return this.dashboardsV2ListWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * listShares dashboards_v2
         * List of users the dashboard has been shared with
         * @param {String} id The id of the dashboard
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoDashboardshare>} and HTTP response
         */
      }, {
        key: "dashboardsV2ListSharesWithHttpInfo",
        value: function dashboardsV2ListSharesWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2ListShares");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = [];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [_ArduinoDashboardshare["default"]];
          return this.apiClient.callApi("/v2/dashboards/{id}/shares", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * listShares dashboards_v2
         * List of users the dashboard has been shared with
         * @param {String} id The id of the dashboard
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoDashboardshare>}
         */
      }, {
        key: "dashboardsV2ListShares",
        value: function dashboardsV2ListShares(id, opts) {
          return this.dashboardsV2ListSharesWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * requestAccess dashboards_v2
         * Request access to a dashboard
         * @param {String} id The id of the dashboard
         * @param {module:model/Sharerequest} sharerequest 
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "dashboardsV2RequestAccessWithHttpInfo",
        value: function dashboardsV2RequestAccessWithHttpInfo(id, sharerequest, opts) {
          opts = opts || {};
          var postBody = sharerequest;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2RequestAccess");
          }
          if (sharerequest === void 0 || sharerequest === null) {
            throw new _Error["default"]("Missing the required parameter 'sharerequest' when calling dashboardsV2RequestAccess");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = [];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/dashboards/{id}/share_request", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * requestAccess dashboards_v2
         * Request access to a dashboard
         * @param {String} id The id of the dashboard
         * @param {module:model/Sharerequest} sharerequest 
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "dashboardsV2RequestAccess",
        value: function dashboardsV2RequestAccess(id, sharerequest, opts) {
          return this.dashboardsV2RequestAccessWithHttpInfo(id, sharerequest, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * share dashboards_v2
         * Share a dashboard
         * @param {String} id The id of the dashboard
         * @param {module:model/Dashboardshare} dashboardshare 
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "dashboardsV2ShareWithHttpInfo",
        value: function dashboardsV2ShareWithHttpInfo(id, dashboardshare, opts) {
          opts = opts || {};
          var postBody = dashboardshare;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Share");
          }
          if (dashboardshare === void 0 || dashboardshare === null) {
            throw new _Error["default"]("Missing the required parameter 'dashboardshare' when calling dashboardsV2Share");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = [];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/dashboards/{id}/shares", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * share dashboards_v2
         * Share a dashboard
         * @param {String} id The id of the dashboard
         * @param {module:model/Dashboardshare} dashboardshare 
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "dashboardsV2Share",
        value: function dashboardsV2Share(id, dashboardshare, opts) {
          return this.dashboardsV2ShareWithHttpInfo(id, dashboardshare, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * show dashboards_v2
         * Show a dashboard
         * @param {String} id The id of the dashboard
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDashboardv2} and HTTP response
         */
      }, {
        key: "dashboardsV2ShowWithHttpInfo",
        value: function dashboardsV2ShowWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Show");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = [];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoDashboardv["default"];
          return this.apiClient.callApi("/v2/dashboards/{id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * show dashboards_v2
         * Show a dashboard
         * @param {String} id The id of the dashboard
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDashboardv2}
         */
      }, {
        key: "dashboardsV2Show",
        value: function dashboardsV2Show(id, opts) {
          return this.dashboardsV2ShowWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * update dashboards_v2
         * Updates an existing dashboard
         * @param {String} id The id of the dashboard
         * @param {module:model/Dashboardv2} dashboardv2 DashboardV2Payload describes a dashboard
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDashboardv2} and HTTP response
         */
      }, {
        key: "dashboardsV2UpdateWithHttpInfo",
        value: function dashboardsV2UpdateWithHttpInfo(id, dashboardv2, opts) {
          opts = opts || {};
          var postBody = dashboardv2;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling dashboardsV2Update");
          }
          if (dashboardv2 === void 0 || dashboardv2 === null) {
            throw new _Error["default"]("Missing the required parameter 'dashboardv2' when calling dashboardsV2Update");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = [];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoDashboardv["default"];
          return this.apiClient.callApi("/v2/dashboards/{id}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * update dashboards_v2
         * Updates an existing dashboard
         * @param {String} id The id of the dashboard
         * @param {module:model/Dashboardv2} dashboardv2 DashboardV2Payload describes a dashboard
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDashboardv2}
         */
      }, {
        key: "dashboardsV2Update",
        value: function dashboardsV2Update(id, dashboardv2, opts) {
          return this.dashboardsV2UpdateWithHttpInfo(id, dashboardv2, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return DashboardsV2Api2;
    }();
    exports["default"] = DashboardsV2Api;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/DevicesV2Api.js
var require_DevicesV2Api = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/DevicesV2Api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoDevicev = _interopRequireDefault(require_ArduinoDevicev2());
    var _ArduinoDevicev2EventProperties = _interopRequireDefault(require_ArduinoDevicev2EventProperties());
    var _ArduinoDevicev2properties = _interopRequireDefault(require_ArduinoDevicev2properties());
    var _ArduinoDevicev2propertyvalues = _interopRequireDefault(require_ArduinoDevicev2propertyvalues());
    var _CreateDevicesV2Payload = _interopRequireDefault(require_CreateDevicesV2Payload());
    var _Devicev = _interopRequireDefault(require_Devicev2());
    var _Error = _interopRequireDefault(require_Error());
    var _PropertiesValues = _interopRequireDefault(require_PropertiesValues());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var DevicesV2Api = function() {
      function DevicesV2Api2(apiClient) {
        _classCallCheck(this, DevicesV2Api2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(DevicesV2Api2, [{
        key: "devicesV2CreateWithHttpInfo",
        value: function devicesV2CreateWithHttpInfo(createDevicesV2Payload, opts) {
          opts = opts || {};
          var postBody = createDevicesV2Payload;
          if (createDevicesV2Payload === void 0 || createDevicesV2Payload === null) {
            throw new _Error["default"]("Missing the required parameter 'createDevicesV2Payload' when calling devicesV2Create");
          }
          var pathParams = {};
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoDevicev["default"];
          return this.apiClient.callApi("/v2/devices", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * create devices_v2
         * Creates a new device associated to the user.
         * @param {module:model/CreateDevicesV2Payload} createDevicesV2Payload DeviceV2 describes a device.
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2}
         */
      }, {
        key: "devicesV2Create",
        value: function devicesV2Create(createDevicesV2Payload, opts) {
          return this.devicesV2CreateWithHttpInfo(createDevicesV2Payload, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * delete devices_v2
         * Removes a device associated to the user
         * @param {String} id The id of the device
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "devicesV2DeleteWithHttpInfo",
        value: function devicesV2DeleteWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Delete");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/devices/{id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * delete devices_v2
         * Removes a device associated to the user
         * @param {String} id The id of the device
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "devicesV2Delete",
        value: function devicesV2Delete(id, opts) {
          return this.devicesV2DeleteWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * getEvents devices_v2
         * GET device events
         * @param {String} id The id of the device
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit The number of events to select
         * @param {String} opts.start The time at which to start selecting events
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2EventProperties} and HTTP response
         */
      }, {
        key: "devicesV2GetEventsWithHttpInfo",
        value: function devicesV2GetEventsWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2GetEvents");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {
            "limit": opts["limit"],
            "start": opts["start"]
          };
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoDevicev2EventProperties["default"];
          return this.apiClient.callApi("/v2/devices/{id}/events", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * getEvents devices_v2
         * GET device events
         * @param {String} id The id of the device
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit The number of events to select
         * @param {String} opts.start The time at which to start selecting events
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2EventProperties}
         */
      }, {
        key: "devicesV2GetEvents",
        value: function devicesV2GetEvents(id, opts) {
          return this.devicesV2GetEventsWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * getProperties devices_v2
         * GET device properties
         * @param {String} id The id of the device
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2properties} and HTTP response
         */
      }, {
        key: "devicesV2GetPropertiesWithHttpInfo",
        value: function devicesV2GetPropertiesWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2GetProperties");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {
            "show_deleted": opts["showDeleted"]
          };
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoDevicev2properties["default"];
          return this.apiClient.callApi("/v2/devices/{id}/properties", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * getProperties devices_v2
         * GET device properties
         * @param {String} id The id of the device
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2properties}
         */
      }, {
        key: "devicesV2GetProperties",
        value: function devicesV2GetProperties(id, opts) {
          return this.devicesV2GetPropertiesWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * list devices_v2
         * Returns the list of devices associated to the user
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.acrossUserIds If true, returns all the devices (default to false)
         * @param {String} opts.serial Filter by device serial number
         * @param {Array.<String>} opts.tags Filter by tags
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoDevicev2>} and HTTP response
         */
      }, {
        key: "devicesV2ListWithHttpInfo",
        value: function devicesV2ListWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "across_user_ids": opts["acrossUserIds"],
            "serial": opts["serial"],
            "tags": this.apiClient.buildCollectionParam(opts["tags"], "multi")
          };
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [_ArduinoDevicev["default"]];
          return this.apiClient.callApi("/v2/devices", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * list devices_v2
         * Returns the list of devices associated to the user
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.acrossUserIds If true, returns all the devices (default to false)
         * @param {String} opts.serial Filter by device serial number
         * @param {Array.<String>} opts.tags Filter by tags
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoDevicev2>}
         */
      }, {
        key: "devicesV2List",
        value: function devicesV2List(opts) {
          return this.devicesV2ListWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * show devices_v2
         * Returns the device requested by the user
         * @param {String} id The id of the device
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2} and HTTP response
         */
      }, {
        key: "devicesV2ShowWithHttpInfo",
        value: function devicesV2ShowWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Show");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoDevicev["default"];
          return this.apiClient.callApi("/v2/devices/{id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * show devices_v2
         * Returns the device requested by the user
         * @param {String} id The id of the device
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2}
         */
      }, {
        key: "devicesV2Show",
        value: function devicesV2Show(id, opts) {
          return this.devicesV2ShowWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * timeseries devices_v2
         * GET device properties values in a range of time
         * @param {String} id The id of the device
         * @param {String} pid The id of the property
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit The number of properties to select
         * @param {String} opts.start The time at which to start selecting properties
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2propertyvalues} and HTTP response
         */
      }, {
        key: "devicesV2TimeseriesWithHttpInfo",
        value: function devicesV2TimeseriesWithHttpInfo(id, pid, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Timeseries");
          }
          if (pid === void 0 || pid === null) {
            throw new _Error["default"]("Missing the required parameter 'pid' when calling devicesV2Timeseries");
          }
          var pathParams = {
            "id": id,
            "pid": pid
          };
          var queryParams = {
            "limit": opts["limit"],
            "start": opts["start"]
          };
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoDevicev2propertyvalues["default"];
          return this.apiClient.callApi("/v2/devices/{id}/properties/{pid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * timeseries devices_v2
         * GET device properties values in a range of time
         * @param {String} id The id of the device
         * @param {String} pid The id of the property
         * @param {Object} opts Optional parameters
         * @param {Number} opts.limit The number of properties to select
         * @param {String} opts.start The time at which to start selecting properties
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2propertyvalues}
         */
      }, {
        key: "devicesV2Timeseries",
        value: function devicesV2Timeseries(id, pid, opts) {
          return this.devicesV2TimeseriesWithHttpInfo(id, pid, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * update devices_v2
         * Updates a device associated to the user
         * @param {String} id The id of the device
         * @param {module:model/Devicev2} devicev2 DeviceV2 describes a device.
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2} and HTTP response
         */
      }, {
        key: "devicesV2UpdateWithHttpInfo",
        value: function devicesV2UpdateWithHttpInfo(id, devicev2, opts) {
          opts = opts || {};
          var postBody = devicev2;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Update");
          }
          if (devicev2 === void 0 || devicev2 === null) {
            throw new _Error["default"]("Missing the required parameter 'devicev2' when calling devicesV2Update");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoDevicev["default"];
          return this.apiClient.callApi("/v2/devices/{id}", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * update devices_v2
         * Updates a device associated to the user
         * @param {String} id The id of the device
         * @param {module:model/Devicev2} devicev2 DeviceV2 describes a device.
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2}
         */
      }, {
        key: "devicesV2Update",
        value: function devicesV2Update(id, devicev2, opts) {
          return this.devicesV2UpdateWithHttpInfo(id, devicev2, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * updateProperties devices_v2
         * Update device properties last values
         * @param {String} id The id of the device
         * @param {module:model/PropertiesValues} propertiesValues 
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "devicesV2UpdatePropertiesWithHttpInfo",
        value: function devicesV2UpdatePropertiesWithHttpInfo(id, propertiesValues, opts) {
          opts = opts || {};
          var postBody = propertiesValues;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2UpdateProperties");
          }
          if (propertiesValues === void 0 || propertiesValues === null) {
            throw new _Error["default"]("Missing the required parameter 'propertiesValues' when calling devicesV2UpdateProperties");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/devices/{id}/properties", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * updateProperties devices_v2
         * Update device properties last values
         * @param {String} id The id of the device
         * @param {module:model/PropertiesValues} propertiesValues 
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "devicesV2UpdateProperties",
        value: function devicesV2UpdateProperties(id, propertiesValues, opts) {
          return this.devicesV2UpdatePropertiesWithHttpInfo(id, propertiesValues, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return DevicesV2Api2;
    }();
    exports["default"] = DevicesV2Api;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/DevicesV2CertsApi.js
var require_DevicesV2CertsApi = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/DevicesV2CertsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoDevicev2Cert = _interopRequireDefault(require_ArduinoDevicev2Cert());
    var _CreateDevicesV2CertsPayload = _interopRequireDefault(require_CreateDevicesV2CertsPayload());
    var _Devicev2Cert = _interopRequireDefault(require_Devicev2Cert());
    var _Error = _interopRequireDefault(require_Error());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var DevicesV2CertsApi = function() {
      function DevicesV2CertsApi2(apiClient) {
        _classCallCheck(this, DevicesV2CertsApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(DevicesV2CertsApi2, [{
        key: "devicesV2CertsCreateWithHttpInfo",
        value: function devicesV2CertsCreateWithHttpInfo(id, createDevicesV2CertsPayload) {
          var postBody = createDevicesV2CertsPayload;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2CertsCreate");
          }
          if (createDevicesV2CertsPayload === void 0 || createDevicesV2CertsPayload === null) {
            throw new _Error["default"]("Missing the required parameter 'createDevicesV2CertsPayload' when calling devicesV2CertsCreate");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoDevicev2Cert["default"];
          return this.apiClient.callApi("/v2/devices/{id}/certs", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * create devices_v2_certs
         * Creates a new cert associated to a device. The csr is signed and saved in database. The CommonName will be replaced with the device id.
         * @param {String} id The id of the device
         * @param {module:model/CreateDevicesV2CertsPayload} createDevicesV2CertsPayload 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2Cert}
         */
      }, {
        key: "devicesV2CertsCreate",
        value: function devicesV2CertsCreate(id, createDevicesV2CertsPayload) {
          return this.devicesV2CertsCreateWithHttpInfo(id, createDevicesV2CertsPayload).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * delete devices_v2_certs
         * Removes a cert associated to a device
         * @param {String} cid The id of the cert
         * @param {String} id The id of the device
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "devicesV2CertsDeleteWithHttpInfo",
        value: function devicesV2CertsDeleteWithHttpInfo(cid, id) {
          var postBody = null;
          if (cid === void 0 || cid === null) {
            throw new _Error["default"]("Missing the required parameter 'cid' when calling devicesV2CertsDelete");
          }
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2CertsDelete");
          }
          var pathParams = {
            "cid": cid,
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/devices/{id}/certs/{cid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * delete devices_v2_certs
         * Removes a cert associated to a device
         * @param {String} cid The id of the cert
         * @param {String} id The id of the device
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "devicesV2CertsDelete",
        value: function devicesV2CertsDelete(cid, id) {
          return this.devicesV2CertsDeleteWithHttpInfo(cid, id).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * list devices_v2_certs
         * Returns the list of certs associated to the device
         * @param {String} id The id of the device
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoDevicev2Cert>} and HTTP response
         */
      }, {
        key: "devicesV2CertsListWithHttpInfo",
        value: function devicesV2CertsListWithHttpInfo(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2CertsList");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [_ArduinoDevicev2Cert["default"]];
          return this.apiClient.callApi("/v2/devices/{id}/certs", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * list devices_v2_certs
         * Returns the list of certs associated to the device
         * @param {String} id The id of the device
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoDevicev2Cert>}
         */
      }, {
        key: "devicesV2CertsList",
        value: function devicesV2CertsList(id) {
          return this.devicesV2CertsListWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * show devices_v2_certs
         * Returns the cert requested by the user
         * @param {String} cid The id of the cert
         * @param {String} id The id of the device
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2Cert} and HTTP response
         */
      }, {
        key: "devicesV2CertsShowWithHttpInfo",
        value: function devicesV2CertsShowWithHttpInfo(cid, id) {
          var postBody = null;
          if (cid === void 0 || cid === null) {
            throw new _Error["default"]("Missing the required parameter 'cid' when calling devicesV2CertsShow");
          }
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2CertsShow");
          }
          var pathParams = {
            "cid": cid,
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoDevicev2Cert["default"];
          return this.apiClient.callApi("/v2/devices/{id}/certs/{cid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * show devices_v2_certs
         * Returns the cert requested by the user
         * @param {String} cid The id of the cert
         * @param {String} id The id of the device
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2Cert}
         */
      }, {
        key: "devicesV2CertsShow",
        value: function devicesV2CertsShow(cid, id) {
          return this.devicesV2CertsShowWithHttpInfo(cid, id).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * update devices_v2_certs
         * Updates a cert associated to a device. The csr is signed and saved in database. The CommonName will be replaced with the device id.
         * @param {String} cid The id of the cert
         * @param {String} id The id of the device
         * @param {module:model/Devicev2Cert} devicev2Cert 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2Cert} and HTTP response
         */
      }, {
        key: "devicesV2CertsUpdateWithHttpInfo",
        value: function devicesV2CertsUpdateWithHttpInfo(cid, id, devicev2Cert) {
          var postBody = devicev2Cert;
          if (cid === void 0 || cid === null) {
            throw new _Error["default"]("Missing the required parameter 'cid' when calling devicesV2CertsUpdate");
          }
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2CertsUpdate");
          }
          if (devicev2Cert === void 0 || devicev2Cert === null) {
            throw new _Error["default"]("Missing the required parameter 'devicev2Cert' when calling devicesV2CertsUpdate");
          }
          var pathParams = {
            "cid": cid,
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoDevicev2Cert["default"];
          return this.apiClient.callApi("/v2/devices/{id}/certs/{cid}", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * update devices_v2_certs
         * Updates a cert associated to a device. The csr is signed and saved in database. The CommonName will be replaced with the device id.
         * @param {String} cid The id of the cert
         * @param {String} id The id of the device
         * @param {module:model/Devicev2Cert} devicev2Cert 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2Cert}
         */
      }, {
        key: "devicesV2CertsUpdate",
        value: function devicesV2CertsUpdate(cid, id, devicev2Cert) {
          return this.devicesV2CertsUpdateWithHttpInfo(cid, id, devicev2Cert).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return DevicesV2CertsApi2;
    }();
    exports["default"] = DevicesV2CertsApi;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/DevicesV2OtaApi.js
var require_DevicesV2OtaApi = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/DevicesV2OtaApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _Devicev2Otabinaryurl = _interopRequireDefault(require_Devicev2Otabinaryurl());
    var _Error = _interopRequireDefault(require_Error());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var DevicesV2OtaApi = function() {
      function DevicesV2OtaApi2(apiClient) {
        _classCallCheck(this, DevicesV2OtaApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(DevicesV2OtaApi2, [{
        key: "devicesV2OtaSendWithHttpInfo",
        value: function devicesV2OtaSendWithHttpInfo(id, devicev2Otabinaryurl) {
          var postBody = devicev2Otabinaryurl;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2OtaSend");
          }
          if (devicev2Otabinaryurl === void 0 || devicev2Otabinaryurl === null) {
            throw new _Error["default"]("Missing the required parameter 'devicev2Otabinaryurl' when calling devicesV2OtaSend");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/devices/{id}/ota", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * send devices_v2_ota
         * Send a binary url to a device
         * @param {String} id The id of the device
         * @param {module:model/Devicev2Otabinaryurl} devicev2Otabinaryurl 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "devicesV2OtaSend",
        value: function devicesV2OtaSend(id, devicev2Otabinaryurl) {
          return this.devicesV2OtaSendWithHttpInfo(id, devicev2Otabinaryurl).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * upload devices_v2_ota
         * Upload a binary and send it to a device
         * @param {String} id The id of the device
         * @param {File} otaFile OTA file
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.async If false, wait for the full OTA process, until it gets a result from the device (default to true)
         * @param {Number} opts.expireInMins Binary expire time in minutes, default 10 mins (default to 10)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "devicesV2OtaUploadWithHttpInfo",
        value: function devicesV2OtaUploadWithHttpInfo(id, otaFile, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2OtaUpload");
          }
          if (otaFile === void 0 || otaFile === null) {
            throw new _Error["default"]("Missing the required parameter 'otaFile' when calling devicesV2OtaUpload");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {
            "async": opts["async"],
            "expire_in_mins": opts["expireInMins"],
            "ota_file": otaFile
          };
          var authNames = ["oauth2"];
          var contentTypes = ["multipart/form-data"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/devices/{id}/ota", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * upload devices_v2_ota
         * Upload a binary and send it to a device
         * @param {String} id The id of the device
         * @param {File} otaFile OTA file
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.async If false, wait for the full OTA process, until it gets a result from the device (default to true)
         * @param {Number} opts.expireInMins Binary expire time in minutes, default 10 mins (default to 10)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "devicesV2OtaUpload",
        value: function devicesV2OtaUpload(id, otaFile, opts) {
          return this.devicesV2OtaUploadWithHttpInfo(id, otaFile, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return DevicesV2OtaApi2;
    }();
    exports["default"] = DevicesV2OtaApi;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/DevicesV2PassApi.js
var require_DevicesV2PassApi = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/DevicesV2PassApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoDevicev2Pass = _interopRequireDefault(require_ArduinoDevicev2Pass());
    var _CheckDevicesV2PassPayload = _interopRequireDefault(require_CheckDevicesV2PassPayload());
    var _Devicev2Pass = _interopRequireDefault(require_Devicev2Pass());
    var _Error = _interopRequireDefault(require_Error());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var DevicesV2PassApi = function() {
      function DevicesV2PassApi2(apiClient) {
        _classCallCheck(this, DevicesV2PassApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(DevicesV2PassApi2, [{
        key: "devicesV2PassCheckWithHttpInfo",
        value: function devicesV2PassCheckWithHttpInfo(id, checkDevicesV2PassPayload) {
          var postBody = checkDevicesV2PassPayload;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2PassCheck");
          }
          if (checkDevicesV2PassPayload === void 0 || checkDevicesV2PassPayload === null) {
            throw new _Error["default"]("Missing the required parameter 'checkDevicesV2PassPayload' when calling devicesV2PassCheck");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/devices/{id}/pass", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * check devices_v2_pass
         * Check if the password matches.
         * @param {String} id The id of the device
         * @param {module:model/CheckDevicesV2PassPayload} checkDevicesV2PassPayload 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "devicesV2PassCheck",
        value: function devicesV2PassCheck(id, checkDevicesV2PassPayload) {
          return this.devicesV2PassCheckWithHttpInfo(id, checkDevicesV2PassPayload).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * delete devices_v2_pass
         * Removes the password for the device.
         * @param {String} id The id of the device
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "devicesV2PassDeleteWithHttpInfo",
        value: function devicesV2PassDeleteWithHttpInfo(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2PassDelete");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/devices/{id}/pass", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * delete devices_v2_pass
         * Removes the password for the device.
         * @param {String} id The id of the device
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "devicesV2PassDelete",
        value: function devicesV2PassDelete(id) {
          return this.devicesV2PassDeleteWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * get devices_v2_pass
         * Returns whether the password for this device is set or not. It doesn't return the password.
         * @param {String} id The id of the device
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.suggestedPassword If true, return a suggested password (default to false)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2Pass} and HTTP response
         */
      }, {
        key: "devicesV2PassGetWithHttpInfo",
        value: function devicesV2PassGetWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2PassGet");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {
            "suggested_password": opts["suggestedPassword"]
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoDevicev2Pass["default"];
          return this.apiClient.callApi("/v2/devices/{id}/pass", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * get devices_v2_pass
         * Returns whether the password for this device is set or not. It doesn't return the password.
         * @param {String} id The id of the device
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.suggestedPassword If true, return a suggested password (default to false)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2Pass}
         */
      }, {
        key: "devicesV2PassGet",
        value: function devicesV2PassGet(id, opts) {
          return this.devicesV2PassGetWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * set devices_v2_pass
         * Sets the password for the device. It can never be read back.
         * @param {String} id The id of the device
         * @param {module:model/Devicev2Pass} devicev2Pass 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2Pass} and HTTP response
         */
      }, {
        key: "devicesV2PassSetWithHttpInfo",
        value: function devicesV2PassSetWithHttpInfo(id, devicev2Pass) {
          var postBody = devicev2Pass;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2PassSet");
          }
          if (devicev2Pass === void 0 || devicev2Pass === null) {
            throw new _Error["default"]("Missing the required parameter 'devicev2Pass' when calling devicesV2PassSet");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoDevicev2Pass["default"];
          return this.apiClient.callApi("/v2/devices/{id}/pass", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * set devices_v2_pass
         * Sets the password for the device. It can never be read back.
         * @param {String} id The id of the device
         * @param {module:model/Devicev2Pass} devicev2Pass 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2Pass}
         */
      }, {
        key: "devicesV2PassSet",
        value: function devicesV2PassSet(id, devicev2Pass) {
          return this.devicesV2PassSetWithHttpInfo(id, devicev2Pass).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return DevicesV2PassApi2;
    }();
    exports["default"] = DevicesV2PassApi;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/DevicesV2TagsApi.js
var require_DevicesV2TagsApi = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/DevicesV2TagsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoTags = _interopRequireDefault(require_ArduinoTags());
    var _Error = _interopRequireDefault(require_Error());
    var _Tag = _interopRequireDefault(require_Tag());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var DevicesV2TagsApi = function() {
      function DevicesV2TagsApi2(apiClient) {
        _classCallCheck(this, DevicesV2TagsApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(DevicesV2TagsApi2, [{
        key: "devicesV2TagsDeleteWithHttpInfo",
        value: function devicesV2TagsDeleteWithHttpInfo(id, key) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2TagsDelete");
          }
          if (key === void 0 || key === null) {
            throw new _Error["default"]("Missing the required parameter 'key' when calling devicesV2TagsDelete");
          }
          var pathParams = {
            "id": id,
            "key": key
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/devices/{id}/tags/{key}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * delete devices_v2_tags
         * Delete a tag associated to the device given its key.
         * @param {String} id The id of the device
         * @param {String} key The key of the tag
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "devicesV2TagsDelete",
        value: function devicesV2TagsDelete(id, key) {
          return this.devicesV2TagsDeleteWithHttpInfo(id, key).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * list devices_v2_tags
         * List tags associated to the device.
         * @param {String} id The id of the device
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoTags} and HTTP response
         */
      }, {
        key: "devicesV2TagsListWithHttpInfo",
        value: function devicesV2TagsListWithHttpInfo(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2TagsList");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoTags["default"];
          return this.apiClient.callApi("/v2/devices/{id}/tags", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * list devices_v2_tags
         * List tags associated to the device.
         * @param {String} id The id of the device
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoTags}
         */
      }, {
        key: "devicesV2TagsList",
        value: function devicesV2TagsList(id) {
          return this.devicesV2TagsListWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * upsert devices_v2_tags
         * Creates or updates a tag associated to the device.
         * @param {String} id The id of the device
         * @param {module:model/Tag} tag 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "devicesV2TagsUpsertWithHttpInfo",
        value: function devicesV2TagsUpsertWithHttpInfo(id, tag) {
          var postBody = tag;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2TagsUpsert");
          }
          if (tag === void 0 || tag === null) {
            throw new _Error["default"]("Missing the required parameter 'tag' when calling devicesV2TagsUpsert");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/devices/{id}/tags", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * upsert devices_v2_tags
         * Creates or updates a tag associated to the device.
         * @param {String} id The id of the device
         * @param {module:model/Tag} tag 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "devicesV2TagsUpsert",
        value: function devicesV2TagsUpsert(id, tag) {
          return this.devicesV2TagsUpsertWithHttpInfo(id, tag).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return DevicesV2TagsApi2;
    }();
    exports["default"] = DevicesV2TagsApi;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/LoraDevicesV1Api.js
var require_LoraDevicesV1Api = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/LoraDevicesV1Api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoLoradevicev = _interopRequireDefault(require_ArduinoLoradevicev1());
    var _CreateLoraDevicesV1Payload = _interopRequireDefault(require_CreateLoraDevicesV1Payload());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var LoraDevicesV1Api = function() {
      function LoraDevicesV1Api2(apiClient) {
        _classCallCheck(this, LoraDevicesV1Api2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(LoraDevicesV1Api2, [{
        key: "loraDevicesV1CreateWithHttpInfo",
        value: function loraDevicesV1CreateWithHttpInfo(createLoraDevicesV1Payload) {
          var postBody = createLoraDevicesV1Payload;
          if (createLoraDevicesV1Payload === void 0 || createLoraDevicesV1Payload === null) {
            throw new Error("Missing the required parameter 'createLoraDevicesV1Payload' when calling loraDevicesV1Create");
          }
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = [];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoLoradevicev["default"];
          return this.apiClient.callApi("/v1/lora-devices/", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * create lora_devices_v1
         * Create a new lora device. Its info are saved on our database, and on the lora provider network. Creates a device_v2 automatically
         * @param {module:model/CreateLoraDevicesV1Payload} createLoraDevicesV1Payload 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoLoradevicev1}
         */
      }, {
        key: "loraDevicesV1Create",
        value: function loraDevicesV1Create(createLoraDevicesV1Payload) {
          return this.loraDevicesV1CreateWithHttpInfo(createLoraDevicesV1Payload).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return LoraDevicesV1Api2;
    }();
    exports["default"] = LoraDevicesV1Api;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/LoraFreqPlanV1Api.js
var require_LoraFreqPlanV1Api = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/LoraFreqPlanV1Api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoLorafreqplansv = _interopRequireDefault(require_ArduinoLorafreqplansv1());
    var _Error = _interopRequireDefault(require_Error());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var LoraFreqPlanV1Api = function() {
      function LoraFreqPlanV1Api2(apiClient) {
        _classCallCheck(this, LoraFreqPlanV1Api2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(LoraFreqPlanV1Api2, [{
        key: "loraFreqPlanV1ListWithHttpInfo",
        value: function loraFreqPlanV1ListWithHttpInfo() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = [];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoLorafreqplansv["default"];
          return this.apiClient.callApi("/v1/lora-freq-plans/", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * list lora_freq_plan_v1
         * List the lora frequency plans supported
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoLorafreqplansv1}
         */
      }, {
        key: "loraFreqPlanV1List",
        value: function loraFreqPlanV1List() {
          return this.loraFreqPlanV1ListWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return LoraFreqPlanV1Api2;
    }();
    exports["default"] = LoraFreqPlanV1Api;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/PropertiesV2Api.js
var require_PropertiesV2Api = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/PropertiesV2Api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoProperty = _interopRequireDefault(require_ArduinoProperty());
    var _ArduinoTimeseriesmedia = _interopRequireDefault(require_ArduinoTimeseriesmedia());
    var _Error = _interopRequireDefault(require_Error());
    var _Property = _interopRequireDefault(require_Property());
    var _PropertyValue = _interopRequireDefault(require_PropertyValue());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var PropertiesV2Api = function() {
      function PropertiesV2Api2(apiClient) {
        _classCallCheck(this, PropertiesV2Api2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(PropertiesV2Api2, [{
        key: "propertiesV2CreateWithHttpInfo",
        value: function propertiesV2CreateWithHttpInfo(id, property) {
          var postBody = property;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Create");
          }
          if (property === void 0 || property === null) {
            throw new _Error["default"]("Missing the required parameter 'property' when calling propertiesV2Create");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoProperty["default"];
          return this.apiClient.callApi("/v2/things/{id}/properties", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * create properties_v2
         * Creates a new property associated to a thing
         * @param {String} id The id of the thing
         * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
         */
      }, {
        key: "propertiesV2Create",
        value: function propertiesV2Create(id, property) {
          return this.propertiesV2CreateWithHttpInfo(id, property).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * delete properties_v2
         * Removes a property associated to a thing
         * @param {String} id The id of the thing
         * @param {String} pid The id of the property
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.force If true, hard delete the property (default to false)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "propertiesV2DeleteWithHttpInfo",
        value: function propertiesV2DeleteWithHttpInfo(id, pid, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Delete");
          }
          if (pid === void 0 || pid === null) {
            throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Delete");
          }
          var pathParams = {
            "id": id,
            "pid": pid
          };
          var queryParams = {
            "force": opts["force"]
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/things/{id}/properties/{pid}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * delete properties_v2
         * Removes a property associated to a thing
         * @param {String} id The id of the thing
         * @param {String} pid The id of the property
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.force If true, hard delete the property (default to false)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "propertiesV2Delete",
        value: function propertiesV2Delete(id, pid, opts) {
          return this.propertiesV2DeleteWithHttpInfo(id, pid, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * list properties_v2
         * Returns the list of properties associated to the thing
         * @param {String} id The id of the thing
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoProperty>} and HTTP response
         */
      }, {
        key: "propertiesV2ListWithHttpInfo",
        value: function propertiesV2ListWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2List");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {
            "show_deleted": opts["showDeleted"]
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [_ArduinoProperty["default"]];
          return this.apiClient.callApi("/v2/things/{id}/properties", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * list properties_v2
         * Returns the list of properties associated to the thing
         * @param {String} id The id of the thing
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoProperty>}
         */
      }, {
        key: "propertiesV2List",
        value: function propertiesV2List(id, opts) {
          return this.propertiesV2ListWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * publish properties_v2
         * Publish a property value to MQTT
         * @param {String} id The id of the thing
         * @param {String} pid The id of the property
         * @param {module:model/PropertyValue} propertyValue PropertyValuePayload describes a property value
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "propertiesV2PublishWithHttpInfo",
        value: function propertiesV2PublishWithHttpInfo(id, pid, propertyValue) {
          var postBody = propertyValue;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Publish");
          }
          if (pid === void 0 || pid === null) {
            throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Publish");
          }
          if (propertyValue === void 0 || propertyValue === null) {
            throw new _Error["default"]("Missing the required parameter 'propertyValue' when calling propertiesV2Publish");
          }
          var pathParams = {
            "id": id,
            "pid": pid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/things/{id}/properties/{pid}/publish", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * publish properties_v2
         * Publish a property value to MQTT
         * @param {String} id The id of the thing
         * @param {String} pid The id of the property
         * @param {module:model/PropertyValue} propertyValue PropertyValuePayload describes a property value
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "propertiesV2Publish",
        value: function propertiesV2Publish(id, pid, propertyValue) {
          return this.propertiesV2PublishWithHttpInfo(id, pid, propertyValue).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * show properties_v2
         * Returns the property requested by the user
         * @param {String} id The id of the thing
         * @param {String} pid The id of the property
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
         */
      }, {
        key: "propertiesV2ShowWithHttpInfo",
        value: function propertiesV2ShowWithHttpInfo(id, pid, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Show");
          }
          if (pid === void 0 || pid === null) {
            throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Show");
          }
          var pathParams = {
            "id": id,
            "pid": pid
          };
          var queryParams = {
            "show_deleted": opts["showDeleted"]
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoProperty["default"];
          return this.apiClient.callApi("/v2/things/{id}/properties/{pid}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * show properties_v2
         * Returns the property requested by the user
         * @param {String} id The id of the thing
         * @param {String} pid The id of the property
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
         */
      }, {
        key: "propertiesV2Show",
        value: function propertiesV2Show(id, pid, opts) {
          return this.propertiesV2ShowWithHttpInfo(id, pid, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * timeseries properties_v2
         * Get numerical property's historic data binned on a specified time interval (note: the total number of data points should NOT be greater than 1000 otherwise the result will be truncated)
         * @param {String} id The id of the thing
         * @param {String} pid ID of a numerical property
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.desc Whether data's ordering (by time) should be descending (default to false)
         * @param {String} opts.from Get data with a timestamp >= to this date (default: 2 weeks ago, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
         * @param {Number} opts.interval Binning interval in seconds (defaut: the smallest possible value compatibly with the limit of 1000 data points in the response)
         * @param {String} opts.to Get data with a timestamp < to this date (default: now, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoTimeseriesmedia} and HTTP response
         */
      }, {
        key: "propertiesV2TimeseriesWithHttpInfo",
        value: function propertiesV2TimeseriesWithHttpInfo(id, pid, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Timeseries");
          }
          if (pid === void 0 || pid === null) {
            throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Timeseries");
          }
          var pathParams = {
            "id": id,
            "pid": pid
          };
          var queryParams = {
            "desc": opts["desc"],
            "from": opts["from"],
            "interval": opts["interval"],
            "to": opts["to"]
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoTimeseriesmedia["default"];
          return this.apiClient.callApi("/v2/things/{id}/properties/{pid}/timeseries", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * timeseries properties_v2
         * Get numerical property's historic data binned on a specified time interval (note: the total number of data points should NOT be greater than 1000 otherwise the result will be truncated)
         * @param {String} id The id of the thing
         * @param {String} pid ID of a numerical property
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.desc Whether data's ordering (by time) should be descending (default to false)
         * @param {String} opts.from Get data with a timestamp >= to this date (default: 2 weeks ago, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
         * @param {Number} opts.interval Binning interval in seconds (defaut: the smallest possible value compatibly with the limit of 1000 data points in the response)
         * @param {String} opts.to Get data with a timestamp < to this date (default: now, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoTimeseriesmedia}
         */
      }, {
        key: "propertiesV2Timeseries",
        value: function propertiesV2Timeseries(id, pid, opts) {
          return this.propertiesV2TimeseriesWithHttpInfo(id, pid, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * update properties_v2
         * Updates a property associated to a thing
         * @param {String} id The id of the thing
         * @param {String} pid The id of the property
         * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
         */
      }, {
        key: "propertiesV2UpdateWithHttpInfo",
        value: function propertiesV2UpdateWithHttpInfo(id, pid, property) {
          var postBody = property;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Update");
          }
          if (pid === void 0 || pid === null) {
            throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Update");
          }
          if (property === void 0 || property === null) {
            throw new _Error["default"]("Missing the required parameter 'property' when calling propertiesV2Update");
          }
          var pathParams = {
            "id": id,
            "pid": pid
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoProperty["default"];
          return this.apiClient.callApi("/v2/things/{id}/properties/{pid}", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * update properties_v2
         * Updates a property associated to a thing
         * @param {String} id The id of the thing
         * @param {String} pid The id of the property
         * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
         */
      }, {
        key: "propertiesV2Update",
        value: function propertiesV2Update(id, pid, property) {
          return this.propertiesV2UpdateWithHttpInfo(id, pid, property).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return PropertiesV2Api2;
    }();
    exports["default"] = PropertiesV2Api;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/SeriesV2Api.js
var require_SeriesV2Api = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/SeriesV2Api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoSeriesBatch = _interopRequireDefault(require_ArduinoSeriesBatch());
    var _ArduinoSeriesRawBatch = _interopRequireDefault(require_ArduinoSeriesRawBatch());
    var _ArduinoSeriesRawBatchLastvalue = _interopRequireDefault(require_ArduinoSeriesRawBatchLastvalue());
    var _BatchLastValueRequestsMediaV = _interopRequireDefault(require_BatchLastValueRequestsMediaV1());
    var _BatchQueryRawRequestsMediaV = _interopRequireDefault(require_BatchQueryRawRequestsMediaV1());
    var _BatchQueryRequestsMediaV = _interopRequireDefault(require_BatchQueryRequestsMediaV1());
    var _Error = _interopRequireDefault(require_Error());
    var _HistoricDataRequest = _interopRequireDefault(require_HistoricDataRequest());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var SeriesV2Api = function() {
      function SeriesV2Api2(apiClient) {
        _classCallCheck(this, SeriesV2Api2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(SeriesV2Api2, [{
        key: "seriesV2BatchQueryWithHttpInfo",
        value: function seriesV2BatchQueryWithHttpInfo(batchQueryRequestsMediaV1) {
          var postBody = batchQueryRequestsMediaV1;
          if (batchQueryRequestsMediaV1 === void 0 || batchQueryRequestsMediaV1 === null) {
            throw new _Error["default"]("Missing the required parameter 'batchQueryRequestsMediaV1' when calling seriesV2BatchQuery");
          }
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoSeriesBatch["default"];
          return this.apiClient.callApi("/v2/series/batch_query", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * batch_query series_v2
         * Returns the batch of time-series data
         * @param {module:model/BatchQueryRequestsMediaV1} batchQueryRequestsMediaV1 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoSeriesBatch}
         */
      }, {
        key: "seriesV2BatchQuery",
        value: function seriesV2BatchQuery(batchQueryRequestsMediaV1) {
          return this.seriesV2BatchQueryWithHttpInfo(batchQueryRequestsMediaV1).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * batch_query_raw series_v2
         * Returns the batch of time-series data raw
         * @param {module:model/BatchQueryRawRequestsMediaV1} batchQueryRawRequestsMediaV1 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoSeriesRawBatch} and HTTP response
         */
      }, {
        key: "seriesV2BatchQueryRawWithHttpInfo",
        value: function seriesV2BatchQueryRawWithHttpInfo(batchQueryRawRequestsMediaV1) {
          var postBody = batchQueryRawRequestsMediaV1;
          if (batchQueryRawRequestsMediaV1 === void 0 || batchQueryRawRequestsMediaV1 === null) {
            throw new _Error["default"]("Missing the required parameter 'batchQueryRawRequestsMediaV1' when calling seriesV2BatchQueryRaw");
          }
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoSeriesRawBatch["default"];
          return this.apiClient.callApi("/v2/series/batch_query_raw", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * batch_query_raw series_v2
         * Returns the batch of time-series data raw
         * @param {module:model/BatchQueryRawRequestsMediaV1} batchQueryRawRequestsMediaV1 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoSeriesRawBatch}
         */
      }, {
        key: "seriesV2BatchQueryRaw",
        value: function seriesV2BatchQueryRaw(batchQueryRawRequestsMediaV1) {
          return this.seriesV2BatchQueryRawWithHttpInfo(batchQueryRawRequestsMediaV1).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * batch_query_raw_last_value series_v2
         * Returns the batch of time-series data raw
         * @param {module:model/BatchLastValueRequestsMediaV1} batchLastValueRequestsMediaV1 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoSeriesRawBatchLastvalue} and HTTP response
         */
      }, {
        key: "seriesV2BatchQueryRawLastValueWithHttpInfo",
        value: function seriesV2BatchQueryRawLastValueWithHttpInfo(batchLastValueRequestsMediaV1) {
          var postBody = batchLastValueRequestsMediaV1;
          if (batchLastValueRequestsMediaV1 === void 0 || batchLastValueRequestsMediaV1 === null) {
            throw new _Error["default"]("Missing the required parameter 'batchLastValueRequestsMediaV1' when calling seriesV2BatchQueryRawLastValue");
          }
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoSeriesRawBatchLastvalue["default"];
          return this.apiClient.callApi("/v2/series/batch_query_raw/lastvalue", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * batch_query_raw_last_value series_v2
         * Returns the batch of time-series data raw
         * @param {module:model/BatchLastValueRequestsMediaV1} batchLastValueRequestsMediaV1 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoSeriesRawBatchLastvalue}
         */
      }, {
        key: "seriesV2BatchQueryRawLastValue",
        value: function seriesV2BatchQueryRawLastValue(batchLastValueRequestsMediaV1) {
          return this.seriesV2BatchQueryRawLastValueWithHttpInfo(batchLastValueRequestsMediaV1).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * historic_data series_v2
         * Request sending of historical data of properties by email
         * @param {module:model/HistoricDataRequest} historicDataRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "seriesV2HistoricDataWithHttpInfo",
        value: function seriesV2HistoricDataWithHttpInfo(historicDataRequest) {
          var postBody = historicDataRequest;
          if (historicDataRequest === void 0 || historicDataRequest === null) {
            throw new _Error["default"]("Missing the required parameter 'historicDataRequest' when calling seriesV2HistoricData");
          }
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/series/historic_data", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * historic_data series_v2
         * Request sending of historical data of properties by email
         * @param {module:model/HistoricDataRequest} historicDataRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "seriesV2HistoricData",
        value: function seriesV2HistoricData(historicDataRequest) {
          return this.seriesV2HistoricDataWithHttpInfo(historicDataRequest).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return SeriesV2Api2;
    }();
    exports["default"] = SeriesV2Api;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/ThingsV2Api.js
var require_ThingsV2Api = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/ThingsV2Api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoThing = _interopRequireDefault(require_ArduinoThing());
    var _Error = _interopRequireDefault(require_Error());
    var _ThingCreate = _interopRequireDefault(require_ThingCreate());
    var _ThingSketch = _interopRequireDefault(require_ThingSketch());
    var _ThingUpdate = _interopRequireDefault(require_ThingUpdate());
    var _UpdateSketch = _interopRequireDefault(require_UpdateSketch());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ThingsV2Api = function() {
      function ThingsV2Api2(apiClient) {
        _classCallCheck(this, ThingsV2Api2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(ThingsV2Api2, [{
        key: "thingsV2CreateWithHttpInfo",
        value: function thingsV2CreateWithHttpInfo(thingCreate, opts) {
          opts = opts || {};
          var postBody = thingCreate;
          if (thingCreate === void 0 || thingCreate === null) {
            throw new _Error["default"]("Missing the required parameter 'thingCreate' when calling thingsV2Create");
          }
          var pathParams = {};
          var queryParams = {
            "force": opts["force"]
          };
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoThing["default"];
          return this.apiClient.callApi("/v2/things", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * create things_v2
         * Creates a new thing associated to the user
         * @param {module:model/ThingCreate} thingCreate Payload to create a new thing
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
         */
      }, {
        key: "thingsV2Create",
        value: function thingsV2Create(thingCreate, opts) {
          return this.thingsV2CreateWithHttpInfo(thingCreate, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * createSketch things_v2
         * Creates a new sketch thing associated to the thing
         * @param {String} id The id of the thing
         * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
         */
      }, {
        key: "thingsV2CreateSketchWithHttpInfo",
        value: function thingsV2CreateSketchWithHttpInfo(id, thingSketch, opts) {
          opts = opts || {};
          var postBody = thingSketch;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2CreateSketch");
          }
          if (thingSketch === void 0 || thingSketch === null) {
            throw new _Error["default"]("Missing the required parameter 'thingSketch' when calling thingsV2CreateSketch");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoThing["default"];
          return this.apiClient.callApi("/v2/things/{id}/sketch", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * createSketch things_v2
         * Creates a new sketch thing associated to the thing
         * @param {String} id The id of the thing
         * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
         */
      }, {
        key: "thingsV2CreateSketch",
        value: function thingsV2CreateSketch(id, thingSketch, opts) {
          return this.thingsV2CreateSketchWithHttpInfo(id, thingSketch, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * delete things_v2
         * Removes a thing associated to the user
         * @param {String} id The id of the thing
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.force If true, hard delete the thing (default to false)
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "thingsV2DeleteWithHttpInfo",
        value: function thingsV2DeleteWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2Delete");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {
            "force": opts["force"]
          };
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/things/{id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * delete things_v2
         * Removes a thing associated to the user
         * @param {String} id The id of the thing
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.force If true, hard delete the thing (default to false)
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "thingsV2Delete",
        value: function thingsV2Delete(id, opts) {
          return this.thingsV2DeleteWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * deleteSketch things_v2
         * @param {String} id The id of the thing
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
         */
      }, {
        key: "thingsV2DeleteSketchWithHttpInfo",
        value: function thingsV2DeleteSketchWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2DeleteSketch");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoThing["default"];
          return this.apiClient.callApi("/v2/things/{id}/sketch", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * deleteSketch things_v2
         * @param {String} id The id of the thing
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
         */
      }, {
        key: "thingsV2DeleteSketch",
        value: function thingsV2DeleteSketch(id, opts) {
          return this.thingsV2DeleteSketchWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * list things_v2
         * Returns the list of things associated to the user
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.acrossUserIds If true, returns all the things (default to false)
         * @param {String} opts.deviceId The id of the device you want to filter
         * @param {Array.<String>} opts.ids Filter only the desired things
         * @param {Boolean} opts.showDeleted If true, shows the soft deleted things (default to false)
         * @param {Boolean} opts.showProperties If true, returns things with their properties, and last values (default to false)
         * @param {Array.<String>} opts.tags Filter by tags
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoThing>} and HTTP response
         */
      }, {
        key: "thingsV2ListWithHttpInfo",
        value: function thingsV2ListWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "across_user_ids": opts["acrossUserIds"],
            "device_id": opts["deviceId"],
            "ids": this.apiClient.buildCollectionParam(opts["ids"], "multi"),
            "show_deleted": opts["showDeleted"],
            "show_properties": opts["showProperties"],
            "tags": this.apiClient.buildCollectionParam(opts["tags"], "multi")
          };
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [_ArduinoThing["default"]];
          return this.apiClient.callApi("/v2/things", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * list things_v2
         * Returns the list of things associated to the user
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.acrossUserIds If true, returns all the things (default to false)
         * @param {String} opts.deviceId The id of the device you want to filter
         * @param {Array.<String>} opts.ids Filter only the desired things
         * @param {Boolean} opts.showDeleted If true, shows the soft deleted things (default to false)
         * @param {Boolean} opts.showProperties If true, returns things with their properties, and last values (default to false)
         * @param {Array.<String>} opts.tags Filter by tags
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoThing>}
         */
      }, {
        key: "thingsV2List",
        value: function thingsV2List(opts) {
          return this.thingsV2ListWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * show things_v2
         * Returns the thing requested by the user
         * @param {String} id The id of the thing
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
         */
      }, {
        key: "thingsV2ShowWithHttpInfo",
        value: function thingsV2ShowWithHttpInfo(id, opts) {
          opts = opts || {};
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2Show");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {
            "show_deleted": opts["showDeleted"]
          };
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoThing["default"];
          return this.apiClient.callApi("/v2/things/{id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * show things_v2
         * Returns the thing requested by the user
         * @param {String} id The id of the thing
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
         */
      }, {
        key: "thingsV2Show",
        value: function thingsV2Show(id, opts) {
          return this.thingsV2ShowWithHttpInfo(id, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * update things_v2
         * Updates a thing associated to the user
         * @param {String} id The id of the thing
         * @param {module:model/ThingUpdate} thingUpdate Payload to update an existing thing
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
         */
      }, {
        key: "thingsV2UpdateWithHttpInfo",
        value: function thingsV2UpdateWithHttpInfo(id, thingUpdate, opts) {
          opts = opts || {};
          var postBody = thingUpdate;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2Update");
          }
          if (thingUpdate === void 0 || thingUpdate === null) {
            throw new _Error["default"]("Missing the required parameter 'thingUpdate' when calling thingsV2Update");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {
            "force": opts["force"]
          };
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoThing["default"];
          return this.apiClient.callApi("/v2/things/{id}", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * update things_v2
         * Updates a thing associated to the user
         * @param {String} id The id of the thing
         * @param {module:model/ThingUpdate} thingUpdate Payload to update an existing thing
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
         * @param {String} opts.xOrganization 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
         */
      }, {
        key: "thingsV2Update",
        value: function thingsV2Update(id, thingUpdate, opts) {
          return this.thingsV2UpdateWithHttpInfo(id, thingUpdate, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * updateSketch things_v2
         * Update an existing thing sketch
         * @param {String} id The id of the thing
         * @param {String} sketchId The id of the sketch
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @param {module:model/UpdateSketch} opts.updateSketch 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
         */
      }, {
        key: "thingsV2UpdateSketchWithHttpInfo",
        value: function thingsV2UpdateSketchWithHttpInfo(id, sketchId, opts) {
          opts = opts || {};
          var postBody = opts["updateSketch"];
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2UpdateSketch");
          }
          if (sketchId === void 0 || sketchId === null) {
            throw new _Error["default"]("Missing the required parameter 'sketchId' when calling thingsV2UpdateSketch");
          }
          var pathParams = {
            "id": id,
            "sketchId": sketchId
          };
          var queryParams = {};
          var headerParams = {
            "X-Organization": opts["xOrganization"]
          };
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = _ArduinoThing["default"];
          return this.apiClient.callApi("/v2/things/{id}/sketch/{sketchId}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * updateSketch things_v2
         * Update an existing thing sketch
         * @param {String} id The id of the thing
         * @param {String} sketchId The id of the sketch
         * @param {Object} opts Optional parameters
         * @param {String} opts.xOrganization 
         * @param {module:model/UpdateSketch} opts.updateSketch 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
         */
      }, {
        key: "thingsV2UpdateSketch",
        value: function thingsV2UpdateSketch(id, sketchId, opts) {
          return this.thingsV2UpdateSketchWithHttpInfo(id, sketchId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return ThingsV2Api2;
    }();
    exports["default"] = ThingsV2Api;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/api/ThingsV2TagsApi.js
var require_ThingsV2TagsApi = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/api/ThingsV2TagsApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoTags = _interopRequireDefault(require_ArduinoTags());
    var _Error = _interopRequireDefault(require_Error());
    var _Tag = _interopRequireDefault(require_Tag());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ThingsV2TagsApi = function() {
      function ThingsV2TagsApi2(apiClient) {
        _classCallCheck(this, ThingsV2TagsApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(ThingsV2TagsApi2, [{
        key: "thingsV2TagsDeleteWithHttpInfo",
        value: function thingsV2TagsDeleteWithHttpInfo(id, key) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2TagsDelete");
          }
          if (key === void 0 || key === null) {
            throw new _Error["default"]("Missing the required parameter 'key' when calling thingsV2TagsDelete");
          }
          var pathParams = {
            "id": id,
            "key": key
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/things/{id}/tags/{key}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * delete things_v2_tags
         * Delete a tag associated to the thing given its key.
         * @param {String} id The id of the thing
         * @param {String} key The key of the tag
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "thingsV2TagsDelete",
        value: function thingsV2TagsDelete(id, key) {
          return this.thingsV2TagsDeleteWithHttpInfo(id, key).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * list things_v2_tags
         * List tags associated to the thing.
         * @param {String} id The id of the thing
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoTags} and HTTP response
         */
      }, {
        key: "thingsV2TagsListWithHttpInfo",
        value: function thingsV2TagsListWithHttpInfo(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2TagsList");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ArduinoTags["default"];
          return this.apiClient.callApi("/v2/things/{id}/tags", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * list things_v2_tags
         * List tags associated to the thing.
         * @param {String} id The id of the thing
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoTags}
         */
      }, {
        key: "thingsV2TagsList",
        value: function thingsV2TagsList(id) {
          return this.thingsV2TagsListWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * upsert things_v2_tags
         * Creates or updates a tag associated to the thing.
         * @param {String} id The id of the thing
         * @param {module:model/Tag} tag 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "thingsV2TagsUpsertWithHttpInfo",
        value: function thingsV2TagsUpsertWithHttpInfo(id, tag) {
          var postBody = tag;
          if (id === void 0 || id === null) {
            throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2TagsUpsert");
          }
          if (tag === void 0 || tag === null) {
            throw new _Error["default"]("Missing the required parameter 'tag' when calling thingsV2TagsUpsert");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = ["application/json", "application/x-www-form-urlencoded"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi("/v2/things/{id}/tags", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * upsert things_v2_tags
         * Creates or updates a tag associated to the thing.
         * @param {String} id The id of the thing
         * @param {module:model/Tag} tag 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "thingsV2TagsUpsert",
        value: function thingsV2TagsUpsert(id, tag) {
          return this.thingsV2TagsUpsertWithHttpInfo(id, tag).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return ThingsV2TagsApi2;
    }();
    exports["default"] = ThingsV2TagsApi;
  }
});

// node_modules/@arduino/arduino-iot-client/dist/index.js
var require_dist = __commonJS({
  "node_modules/@arduino/arduino-iot-client/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "ApiClient", {
      enumerable: true,
      get: function get() {
        return _ApiClient["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoCompressedv2", {
      enumerable: true,
      get: function get() {
        return _ArduinoCompressedv["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDashboardowner", {
      enumerable: true,
      get: function get() {
        return _ArduinoDashboardowner["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDashboardshare", {
      enumerable: true,
      get: function get() {
        return _ArduinoDashboardshare["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDashboardv2", {
      enumerable: true,
      get: function get() {
        return _ArduinoDashboardv["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2Cert", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev2Cert["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2EventProperties", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev2EventProperties["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2Pass", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev2Pass["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2SimpleProperties", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev2SimpleProperties["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2Webhook", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev2Webhook["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2properties", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev2properties["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2propertyvalue", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev2propertyvalue["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2propertyvalueValue", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev2propertyvalueValue["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2propertyvalueValueStatistics", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev2propertyvalueValueStatistics["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2propertyvalues", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev2propertyvalues["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoDevicev2propertyvaluesLastEvaluatedKey", {
      enumerable: true,
      get: function get() {
        return _ArduinoDevicev2propertyvaluesLastEvaluatedKey["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoLinkedvariable", {
      enumerable: true,
      get: function get() {
        return _ArduinoLinkedvariable["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoLoradevicev1", {
      enumerable: true,
      get: function get() {
        return _ArduinoLoradevicev["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoLorafreqplansv1", {
      enumerable: true,
      get: function get() {
        return _ArduinoLorafreqplansv["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoLorafreqplanv1", {
      enumerable: true,
      get: function get() {
        return _ArduinoLorafreqplanv["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoProperty", {
      enumerable: true,
      get: function get() {
        return _ArduinoProperty["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoSeriesBatch", {
      enumerable: true,
      get: function get() {
        return _ArduinoSeriesBatch["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoSeriesRawBatch", {
      enumerable: true,
      get: function get() {
        return _ArduinoSeriesRawBatch["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoSeriesRawBatchLastvalue", {
      enumerable: true,
      get: function get() {
        return _ArduinoSeriesRawBatchLastvalue["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoSeriesRawLastValueResponse", {
      enumerable: true,
      get: function get() {
        return _ArduinoSeriesRawLastValueResponse["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoSeriesRawResponse", {
      enumerable: true,
      get: function get() {
        return _ArduinoSeriesRawResponse["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoSeriesResponse", {
      enumerable: true,
      get: function get() {
        return _ArduinoSeriesResponse["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoTags", {
      enumerable: true,
      get: function get() {
        return _ArduinoTags["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoThing", {
      enumerable: true,
      get: function get() {
        return _ArduinoThing["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoTimeseriesmedia", {
      enumerable: true,
      get: function get() {
        return _ArduinoTimeseriesmedia["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoTimezone", {
      enumerable: true,
      get: function get() {
        return _ArduinoTimezone["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoVariableslinks", {
      enumerable: true,
      get: function get() {
        return _ArduinoVariableslinks["default"];
      }
    });
    Object.defineProperty(exports, "ArduinoWidgetv2", {
      enumerable: true,
      get: function get() {
        return _ArduinoWidgetv["default"];
      }
    });
    Object.defineProperty(exports, "BatchLastValueRequestsMediaV1", {
      enumerable: true,
      get: function get() {
        return _BatchLastValueRequestsMediaV["default"];
      }
    });
    Object.defineProperty(exports, "BatchQueryRawLastValueRequestMediaV1", {
      enumerable: true,
      get: function get() {
        return _BatchQueryRawLastValueRequestMediaV["default"];
      }
    });
    Object.defineProperty(exports, "BatchQueryRawRequestMediaV1", {
      enumerable: true,
      get: function get() {
        return _BatchQueryRawRequestMediaV["default"];
      }
    });
    Object.defineProperty(exports, "BatchQueryRawRequestsMediaV1", {
      enumerable: true,
      get: function get() {
        return _BatchQueryRawRequestsMediaV["default"];
      }
    });
    Object.defineProperty(exports, "BatchQueryRawResponseSeriesMediaV1", {
      enumerable: true,
      get: function get() {
        return _BatchQueryRawResponseSeriesMediaV["default"];
      }
    });
    Object.defineProperty(exports, "BatchQueryRequestMediaV1", {
      enumerable: true,
      get: function get() {
        return _BatchQueryRequestMediaV["default"];
      }
    });
    Object.defineProperty(exports, "BatchQueryRequestsMediaV1", {
      enumerable: true,
      get: function get() {
        return _BatchQueryRequestsMediaV["default"];
      }
    });
    Object.defineProperty(exports, "CheckDevicesV2PassPayload", {
      enumerable: true,
      get: function get() {
        return _CheckDevicesV2PassPayload["default"];
      }
    });
    Object.defineProperty(exports, "CreateDevicesV2CertsPayload", {
      enumerable: true,
      get: function get() {
        return _CreateDevicesV2CertsPayload["default"];
      }
    });
    Object.defineProperty(exports, "CreateDevicesV2Payload", {
      enumerable: true,
      get: function get() {
        return _CreateDevicesV2Payload["default"];
      }
    });
    Object.defineProperty(exports, "CreateLoraDevicesV1Payload", {
      enumerable: true,
      get: function get() {
        return _CreateLoraDevicesV1Payload["default"];
      }
    });
    Object.defineProperty(exports, "Dashboardshare", {
      enumerable: true,
      get: function get() {
        return _Dashboardshare["default"];
      }
    });
    Object.defineProperty(exports, "Dashboardv2", {
      enumerable: true,
      get: function get() {
        return _Dashboardv["default"];
      }
    });
    Object.defineProperty(exports, "Devicev2", {
      enumerable: true,
      get: function get() {
        return _Devicev["default"];
      }
    });
    Object.defineProperty(exports, "Devicev2Cert", {
      enumerable: true,
      get: function get() {
        return _Devicev2Cert["default"];
      }
    });
    Object.defineProperty(exports, "Devicev2Otabinaryurl", {
      enumerable: true,
      get: function get() {
        return _Devicev2Otabinaryurl["default"];
      }
    });
    Object.defineProperty(exports, "Devicev2Pass", {
      enumerable: true,
      get: function get() {
        return _Devicev2Pass["default"];
      }
    });
    Object.defineProperty(exports, "Error", {
      enumerable: true,
      get: function get() {
        return _Error["default"];
      }
    });
    Object.defineProperty(exports, "HistoricDataRequest", {
      enumerable: true,
      get: function get() {
        return _HistoricDataRequest["default"];
      }
    });
    Object.defineProperty(exports, "InlineObject", {
      enumerable: true,
      get: function get() {
        return _InlineObject["default"];
      }
    });
    Object.defineProperty(exports, "PropertiesValue", {
      enumerable: true,
      get: function get() {
        return _PropertiesValue["default"];
      }
    });
    Object.defineProperty(exports, "PropertiesValues", {
      enumerable: true,
      get: function get() {
        return _PropertiesValues["default"];
      }
    });
    Object.defineProperty(exports, "Property", {
      enumerable: true,
      get: function get() {
        return _Property["default"];
      }
    });
    Object.defineProperty(exports, "PropertyValue", {
      enumerable: true,
      get: function get() {
        return _PropertyValue["default"];
      }
    });
    Object.defineProperty(exports, "Sharerequest", {
      enumerable: true,
      get: function get() {
        return _Sharerequest["default"];
      }
    });
    Object.defineProperty(exports, "Tag", {
      enumerable: true,
      get: function get() {
        return _Tag["default"];
      }
    });
    Object.defineProperty(exports, "ThingCreate", {
      enumerable: true,
      get: function get() {
        return _ThingCreate["default"];
      }
    });
    Object.defineProperty(exports, "ThingSketch", {
      enumerable: true,
      get: function get() {
        return _ThingSketch["default"];
      }
    });
    Object.defineProperty(exports, "ThingUpdate", {
      enumerable: true,
      get: function get() {
        return _ThingUpdate["default"];
      }
    });
    Object.defineProperty(exports, "TimeseriesDataPoint", {
      enumerable: true,
      get: function get() {
        return _TimeseriesDataPoint["default"];
      }
    });
    Object.defineProperty(exports, "UpdateSketch", {
      enumerable: true,
      get: function get() {
        return _UpdateSketch["default"];
      }
    });
    Object.defineProperty(exports, "Widget", {
      enumerable: true,
      get: function get() {
        return _Widget["default"];
      }
    });
    Object.defineProperty(exports, "Widgetlink", {
      enumerable: true,
      get: function get() {
        return _Widgetlink["default"];
      }
    });
    Object.defineProperty(exports, "DashboardsV2Api", {
      enumerable: true,
      get: function get() {
        return _DashboardsV2Api["default"];
      }
    });
    Object.defineProperty(exports, "DevicesV2Api", {
      enumerable: true,
      get: function get() {
        return _DevicesV2Api["default"];
      }
    });
    Object.defineProperty(exports, "DevicesV2CertsApi", {
      enumerable: true,
      get: function get() {
        return _DevicesV2CertsApi["default"];
      }
    });
    Object.defineProperty(exports, "DevicesV2OtaApi", {
      enumerable: true,
      get: function get() {
        return _DevicesV2OtaApi["default"];
      }
    });
    Object.defineProperty(exports, "DevicesV2PassApi", {
      enumerable: true,
      get: function get() {
        return _DevicesV2PassApi["default"];
      }
    });
    Object.defineProperty(exports, "DevicesV2TagsApi", {
      enumerable: true,
      get: function get() {
        return _DevicesV2TagsApi["default"];
      }
    });
    Object.defineProperty(exports, "LoraDevicesV1Api", {
      enumerable: true,
      get: function get() {
        return _LoraDevicesV1Api["default"];
      }
    });
    Object.defineProperty(exports, "LoraFreqPlanV1Api", {
      enumerable: true,
      get: function get() {
        return _LoraFreqPlanV1Api["default"];
      }
    });
    Object.defineProperty(exports, "PropertiesV2Api", {
      enumerable: true,
      get: function get() {
        return _PropertiesV2Api["default"];
      }
    });
    Object.defineProperty(exports, "SeriesV2Api", {
      enumerable: true,
      get: function get() {
        return _SeriesV2Api["default"];
      }
    });
    Object.defineProperty(exports, "ThingsV2Api", {
      enumerable: true,
      get: function get() {
        return _ThingsV2Api["default"];
      }
    });
    Object.defineProperty(exports, "ThingsV2TagsApi", {
      enumerable: true,
      get: function get() {
        return _ThingsV2TagsApi["default"];
      }
    });
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ArduinoCompressedv = _interopRequireDefault(require_ArduinoCompressedv2());
    var _ArduinoDashboardowner = _interopRequireDefault(require_ArduinoDashboardowner());
    var _ArduinoDashboardshare = _interopRequireDefault(require_ArduinoDashboardshare());
    var _ArduinoDashboardv = _interopRequireDefault(require_ArduinoDashboardv2());
    var _ArduinoDevicev = _interopRequireDefault(require_ArduinoDevicev2());
    var _ArduinoDevicev2Cert = _interopRequireDefault(require_ArduinoDevicev2Cert());
    var _ArduinoDevicev2EventProperties = _interopRequireDefault(require_ArduinoDevicev2EventProperties());
    var _ArduinoDevicev2Pass = _interopRequireDefault(require_ArduinoDevicev2Pass());
    var _ArduinoDevicev2SimpleProperties = _interopRequireDefault(require_ArduinoDevicev2SimpleProperties());
    var _ArduinoDevicev2Webhook = _interopRequireDefault(require_ArduinoDevicev2Webhook());
    var _ArduinoDevicev2properties = _interopRequireDefault(require_ArduinoDevicev2properties());
    var _ArduinoDevicev2propertyvalue = _interopRequireDefault(require_ArduinoDevicev2propertyvalue());
    var _ArduinoDevicev2propertyvalueValue = _interopRequireDefault(require_ArduinoDevicev2propertyvalueValue());
    var _ArduinoDevicev2propertyvalueValueStatistics = _interopRequireDefault(require_ArduinoDevicev2propertyvalueValueStatistics());
    var _ArduinoDevicev2propertyvalues = _interopRequireDefault(require_ArduinoDevicev2propertyvalues());
    var _ArduinoDevicev2propertyvaluesLastEvaluatedKey = _interopRequireDefault(require_ArduinoDevicev2propertyvaluesLastEvaluatedKey());
    var _ArduinoLinkedvariable = _interopRequireDefault(require_ArduinoLinkedvariable());
    var _ArduinoLoradevicev = _interopRequireDefault(require_ArduinoLoradevicev1());
    var _ArduinoLorafreqplansv = _interopRequireDefault(require_ArduinoLorafreqplansv1());
    var _ArduinoLorafreqplanv = _interopRequireDefault(require_ArduinoLorafreqplanv1());
    var _ArduinoProperty = _interopRequireDefault(require_ArduinoProperty());
    var _ArduinoSeriesBatch = _interopRequireDefault(require_ArduinoSeriesBatch());
    var _ArduinoSeriesRawBatch = _interopRequireDefault(require_ArduinoSeriesRawBatch());
    var _ArduinoSeriesRawBatchLastvalue = _interopRequireDefault(require_ArduinoSeriesRawBatchLastvalue());
    var _ArduinoSeriesRawLastValueResponse = _interopRequireDefault(require_ArduinoSeriesRawLastValueResponse());
    var _ArduinoSeriesRawResponse = _interopRequireDefault(require_ArduinoSeriesRawResponse());
    var _ArduinoSeriesResponse = _interopRequireDefault(require_ArduinoSeriesResponse());
    var _ArduinoTags = _interopRequireDefault(require_ArduinoTags());
    var _ArduinoThing = _interopRequireDefault(require_ArduinoThing());
    var _ArduinoTimeseriesmedia = _interopRequireDefault(require_ArduinoTimeseriesmedia());
    var _ArduinoTimezone = _interopRequireDefault(require_ArduinoTimezone());
    var _ArduinoVariableslinks = _interopRequireDefault(require_ArduinoVariableslinks());
    var _ArduinoWidgetv = _interopRequireDefault(require_ArduinoWidgetv2());
    var _BatchLastValueRequestsMediaV = _interopRequireDefault(require_BatchLastValueRequestsMediaV1());
    var _BatchQueryRawLastValueRequestMediaV = _interopRequireDefault(require_BatchQueryRawLastValueRequestMediaV1());
    var _BatchQueryRawRequestMediaV = _interopRequireDefault(require_BatchQueryRawRequestMediaV1());
    var _BatchQueryRawRequestsMediaV = _interopRequireDefault(require_BatchQueryRawRequestsMediaV1());
    var _BatchQueryRawResponseSeriesMediaV = _interopRequireDefault(require_BatchQueryRawResponseSeriesMediaV1());
    var _BatchQueryRequestMediaV = _interopRequireDefault(require_BatchQueryRequestMediaV1());
    var _BatchQueryRequestsMediaV = _interopRequireDefault(require_BatchQueryRequestsMediaV1());
    var _CheckDevicesV2PassPayload = _interopRequireDefault(require_CheckDevicesV2PassPayload());
    var _CreateDevicesV2CertsPayload = _interopRequireDefault(require_CreateDevicesV2CertsPayload());
    var _CreateDevicesV2Payload = _interopRequireDefault(require_CreateDevicesV2Payload());
    var _CreateLoraDevicesV1Payload = _interopRequireDefault(require_CreateLoraDevicesV1Payload());
    var _Dashboardshare = _interopRequireDefault(require_Dashboardshare());
    var _Dashboardv = _interopRequireDefault(require_Dashboardv2());
    var _Devicev = _interopRequireDefault(require_Devicev2());
    var _Devicev2Cert = _interopRequireDefault(require_Devicev2Cert());
    var _Devicev2Otabinaryurl = _interopRequireDefault(require_Devicev2Otabinaryurl());
    var _Devicev2Pass = _interopRequireDefault(require_Devicev2Pass());
    var _Error = _interopRequireDefault(require_Error());
    var _HistoricDataRequest = _interopRequireDefault(require_HistoricDataRequest());
    var _InlineObject = _interopRequireDefault(require_InlineObject());
    var _PropertiesValue = _interopRequireDefault(require_PropertiesValue());
    var _PropertiesValues = _interopRequireDefault(require_PropertiesValues());
    var _Property = _interopRequireDefault(require_Property());
    var _PropertyValue = _interopRequireDefault(require_PropertyValue());
    var _Sharerequest = _interopRequireDefault(require_Sharerequest());
    var _Tag = _interopRequireDefault(require_Tag());
    var _ThingCreate = _interopRequireDefault(require_ThingCreate());
    var _ThingSketch = _interopRequireDefault(require_ThingSketch());
    var _ThingUpdate = _interopRequireDefault(require_ThingUpdate());
    var _TimeseriesDataPoint = _interopRequireDefault(require_TimeseriesDataPoint());
    var _UpdateSketch = _interopRequireDefault(require_UpdateSketch());
    var _Widget = _interopRequireDefault(require_Widget());
    var _Widgetlink = _interopRequireDefault(require_Widgetlink());
    var _DashboardsV2Api = _interopRequireDefault(require_DashboardsV2Api());
    var _DevicesV2Api = _interopRequireDefault(require_DevicesV2Api());
    var _DevicesV2CertsApi = _interopRequireDefault(require_DevicesV2CertsApi());
    var _DevicesV2OtaApi = _interopRequireDefault(require_DevicesV2OtaApi());
    var _DevicesV2PassApi = _interopRequireDefault(require_DevicesV2PassApi());
    var _DevicesV2TagsApi = _interopRequireDefault(require_DevicesV2TagsApi());
    var _LoraDevicesV1Api = _interopRequireDefault(require_LoraDevicesV1Api());
    var _LoraFreqPlanV1Api = _interopRequireDefault(require_LoraFreqPlanV1Api());
    var _PropertiesV2Api = _interopRequireDefault(require_PropertiesV2Api());
    var _SeriesV2Api = _interopRequireDefault(require_SeriesV2Api());
    var _ThingsV2Api = _interopRequireDefault(require_ThingsV2Api());
    var _ThingsV2TagsApi = _interopRequireDefault(require_ThingsV2TagsApi());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
  }
});
export default require_dist();
//# sourceMappingURL=@arduino_arduino-iot-client.js.map
