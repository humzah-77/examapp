"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ArduinoTimezone = _interopRequireDefault(require("./ArduinoTimezone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The ArduinoLinkedvariable model module.
 * @module model/ArduinoLinkedvariable
 * @version 1.4.2
 */
var ArduinoLinkedvariable =
/*#__PURE__*/
function () {
  /**
   * Constructs a new <code>ArduinoLinkedvariable</code>.
   * ArduinoLinkedvariable media type (default view)
   * @alias module:model/ArduinoLinkedvariable
   * @param id {String} The id of the linked variable
   * @param name {String} The name of the variable
   * @param permission {String} The permission of the linked variable
   * @param thingId {String} The id of the related thing
   * @param thingName {String} The name of the related thing
   * @param type {String} The type of the variable
   * @param variableName {String} The name of the variable in the code
   */
  function ArduinoLinkedvariable(id, name, permission, thingId, thingName, type, variableName) {
    _classCallCheck(this, ArduinoLinkedvariable);

    ArduinoLinkedvariable.initialize(this, id, name, permission, thingId, thingName, type, variableName);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ArduinoLinkedvariable, null, [{
    key: "initialize",
    value: function initialize(obj, id, name, permission, thingId, thingName, type, variableName) {
      obj['id'] = id;
      obj['name'] = name;
      obj['permission'] = permission;
      obj['thing_id'] = thingId;
      obj['thing_name'] = thingName;
      obj['type'] = type;
      obj['variable_name'] = variableName;
    }
    /**
     * Constructs a <code>ArduinoLinkedvariable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoLinkedvariable} obj Optional instance to populate.
     * @return {module:model/ArduinoLinkedvariable} The populated <code>ArduinoLinkedvariable</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoLinkedvariable();

        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }

        if (data.hasOwnProperty('last_value')) {
          obj['last_value'] = _ApiClient["default"].convertToType(data['last_value'], Object);
        }

        if (data.hasOwnProperty('last_value_updated_at')) {
          obj['last_value_updated_at'] = _ApiClient["default"].convertToType(data['last_value_updated_at'], 'Date');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('permission')) {
          obj['permission'] = _ApiClient["default"].convertToType(data['permission'], 'String');
        }

        if (data.hasOwnProperty('thing_id')) {
          obj['thing_id'] = _ApiClient["default"].convertToType(data['thing_id'], 'String');
        }

        if (data.hasOwnProperty('thing_name')) {
          obj['thing_name'] = _ApiClient["default"].convertToType(data['thing_name'], 'String');
        }

        if (data.hasOwnProperty('thing_timezone')) {
          obj['thing_timezone'] = _ArduinoTimezone["default"].constructFromObject(data['thing_timezone']);
        }

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }

        if (data.hasOwnProperty('variable_name')) {
          obj['variable_name'] = _ApiClient["default"].convertToType(data['variable_name'], 'String');
        }
      }

      return obj;
    }
  }]);

  return ArduinoLinkedvariable;
}();
/**
 * The id of the linked variable
 * @member {String} id
 */


ArduinoLinkedvariable.prototype['id'] = undefined;
/**
 * Last value of the linked property
 * @member {Object} last_value
 */

ArduinoLinkedvariable.prototype['last_value'] = undefined;
/**
 * Update date of the last value
 * @member {Date} last_value_updated_at
 */

ArduinoLinkedvariable.prototype['last_value_updated_at'] = undefined;
/**
 * The name of the variable
 * @member {String} name
 */

ArduinoLinkedvariable.prototype['name'] = undefined;
/**
 * The permission of the linked variable
 * @member {String} permission
 */

ArduinoLinkedvariable.prototype['permission'] = undefined;
/**
 * The id of the related thing
 * @member {String} thing_id
 */

ArduinoLinkedvariable.prototype['thing_id'] = undefined;
/**
 * The name of the related thing
 * @member {String} thing_name
 */

ArduinoLinkedvariable.prototype['thing_name'] = undefined;
/**
 * @member {module:model/ArduinoTimezone} thing_timezone
 */

ArduinoLinkedvariable.prototype['thing_timezone'] = undefined;
/**
 * The type of the variable
 * @member {String} type
 */

ArduinoLinkedvariable.prototype['type'] = undefined;
/**
 * The name of the variable in the code
 * @member {String} variable_name
 */

ArduinoLinkedvariable.prototype['variable_name'] = undefined;
var _default = ArduinoLinkedvariable;
exports["default"] = _default;