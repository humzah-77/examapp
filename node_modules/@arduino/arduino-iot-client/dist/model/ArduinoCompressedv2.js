"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The ArduinoCompressedv2 model module.
 * @module model/ArduinoCompressedv2
 * @version 1.4.2
 */
var ArduinoCompressedv2 =
/*#__PURE__*/
function () {
  /**
   * Constructs a new <code>ArduinoCompressedv2</code>.
   * compressed contains the info from which to generate the certificate (default view)
   * @alias module:model/ArduinoCompressedv2
   * @param notAfter {Date} The ending date of the certificate
   * @param notBefore {Date} The starting date of the certificate
   * @param serial {String} The serial number of the certificate
   * @param signature {String} The signature of the certificate
   * @param signatureAsn1X {String} The ASN1 X component of certificate signature
   * @param signatureAsn1Y {String} The ASN1 Y component of certificate signature
   */
  function ArduinoCompressedv2(notAfter, notBefore, serial, signature, signatureAsn1X, signatureAsn1Y) {
    _classCallCheck(this, ArduinoCompressedv2);

    ArduinoCompressedv2.initialize(this, notAfter, notBefore, serial, signature, signatureAsn1X, signatureAsn1Y);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ArduinoCompressedv2, null, [{
    key: "initialize",
    value: function initialize(obj, notAfter, notBefore, serial, signature, signatureAsn1X, signatureAsn1Y) {
      obj['not_after'] = notAfter;
      obj['not_before'] = notBefore;
      obj['serial'] = serial;
      obj['signature'] = signature;
      obj['signature_asn1_x'] = signatureAsn1X;
      obj['signature_asn1_y'] = signatureAsn1Y;
    }
    /**
     * Constructs a <code>ArduinoCompressedv2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoCompressedv2} obj Optional instance to populate.
     * @return {module:model/ArduinoCompressedv2} The populated <code>ArduinoCompressedv2</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoCompressedv2();

        if (data.hasOwnProperty('authority_key_identifier')) {
          obj['authority_key_identifier'] = _ApiClient["default"].convertToType(data['authority_key_identifier'], 'String');
        }

        if (data.hasOwnProperty('not_after')) {
          obj['not_after'] = _ApiClient["default"].convertToType(data['not_after'], 'Date');
        }

        if (data.hasOwnProperty('not_before')) {
          obj['not_before'] = _ApiClient["default"].convertToType(data['not_before'], 'Date');
        }

        if (data.hasOwnProperty('serial')) {
          obj['serial'] = _ApiClient["default"].convertToType(data['serial'], 'String');
        }

        if (data.hasOwnProperty('signature')) {
          obj['signature'] = _ApiClient["default"].convertToType(data['signature'], 'String');
        }

        if (data.hasOwnProperty('signature_asn1_x')) {
          obj['signature_asn1_x'] = _ApiClient["default"].convertToType(data['signature_asn1_x'], 'String');
        }

        if (data.hasOwnProperty('signature_asn1_y')) {
          obj['signature_asn1_y'] = _ApiClient["default"].convertToType(data['signature_asn1_y'], 'String');
        }
      }

      return obj;
    }
  }]);

  return ArduinoCompressedv2;
}();
/**
 * The Authority Key Identifier of the certificate
 * @member {String} authority_key_identifier
 */


ArduinoCompressedv2.prototype['authority_key_identifier'] = undefined;
/**
 * The ending date of the certificate
 * @member {Date} not_after
 */

ArduinoCompressedv2.prototype['not_after'] = undefined;
/**
 * The starting date of the certificate
 * @member {Date} not_before
 */

ArduinoCompressedv2.prototype['not_before'] = undefined;
/**
 * The serial number of the certificate
 * @member {String} serial
 */

ArduinoCompressedv2.prototype['serial'] = undefined;
/**
 * The signature of the certificate
 * @member {String} signature
 */

ArduinoCompressedv2.prototype['signature'] = undefined;
/**
 * The ASN1 X component of certificate signature
 * @member {String} signature_asn1_x
 */

ArduinoCompressedv2.prototype['signature_asn1_x'] = undefined;
/**
 * The ASN1 Y component of certificate signature
 * @member {String} signature_asn1_y
 */

ArduinoCompressedv2.prototype['signature_asn1_y'] = undefined;
var _default = ArduinoCompressedv2;
exports["default"] = _default;