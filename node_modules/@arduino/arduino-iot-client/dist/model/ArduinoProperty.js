"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The ArduinoProperty model module.
 * @module model/ArduinoProperty
 * @version 1.4.2
 */
var ArduinoProperty =
/*#__PURE__*/
function () {
  /**
   * Constructs a new <code>ArduinoProperty</code>.
   * ArduinoProperty media type (default view)
   * @alias module:model/ArduinoProperty
   * @param href {String} The api reference of this property
   * @param id {String} The id of the property
   * @param name {String} The friendly name of the property
   * @param permission {String} The permission of the property
   * @param thingId {String} The id of the thing
   * @param type {String} The type of the property
   * @param updateStrategy {String} The update strategy for the property value
   */
  function ArduinoProperty(href, id, name, permission, thingId, type, updateStrategy) {
    _classCallCheck(this, ArduinoProperty);

    ArduinoProperty.initialize(this, href, id, name, permission, thingId, type, updateStrategy);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ArduinoProperty, null, [{
    key: "initialize",
    value: function initialize(obj, href, id, name, permission, thingId, type, updateStrategy) {
      obj['href'] = href;
      obj['id'] = id;
      obj['name'] = name;
      obj['permission'] = permission;
      obj['thing_id'] = thingId;
      obj['type'] = type;
      obj['update_strategy'] = updateStrategy;
    }
    /**
     * Constructs a <code>ArduinoProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoProperty} obj Optional instance to populate.
     * @return {module:model/ArduinoProperty} The populated <code>ArduinoProperty</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoProperty();

        if (data.hasOwnProperty('created_at')) {
          obj['created_at'] = _ApiClient["default"].convertToType(data['created_at'], 'Date');
        }

        if (data.hasOwnProperty('deleted_at')) {
          obj['deleted_at'] = _ApiClient["default"].convertToType(data['deleted_at'], 'Date');
        }

        if (data.hasOwnProperty('href')) {
          obj['href'] = _ApiClient["default"].convertToType(data['href'], 'String');
        }

        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }

        if (data.hasOwnProperty('last_value')) {
          obj['last_value'] = _ApiClient["default"].convertToType(data['last_value'], Object);
        }

        if (data.hasOwnProperty('max_value')) {
          obj['max_value'] = _ApiClient["default"].convertToType(data['max_value'], 'Number');
        }

        if (data.hasOwnProperty('min_value')) {
          obj['min_value'] = _ApiClient["default"].convertToType(data['min_value'], 'Number');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('permission')) {
          obj['permission'] = _ApiClient["default"].convertToType(data['permission'], 'String');
        }

        if (data.hasOwnProperty('persist')) {
          obj['persist'] = _ApiClient["default"].convertToType(data['persist'], 'Boolean');
        }

        if (data.hasOwnProperty('sync_id')) {
          obj['sync_id'] = _ApiClient["default"].convertToType(data['sync_id'], 'String');
        }

        if (data.hasOwnProperty('tag')) {
          obj['tag'] = _ApiClient["default"].convertToType(data['tag'], 'Number');
        }

        if (data.hasOwnProperty('thing_id')) {
          obj['thing_id'] = _ApiClient["default"].convertToType(data['thing_id'], 'String');
        }

        if (data.hasOwnProperty('thing_name')) {
          obj['thing_name'] = _ApiClient["default"].convertToType(data['thing_name'], 'String');
        }

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }

        if (data.hasOwnProperty('update_parameter')) {
          obj['update_parameter'] = _ApiClient["default"].convertToType(data['update_parameter'], 'Number');
        }

        if (data.hasOwnProperty('update_strategy')) {
          obj['update_strategy'] = _ApiClient["default"].convertToType(data['update_strategy'], 'String');
        }

        if (data.hasOwnProperty('updated_at')) {
          obj['updated_at'] = _ApiClient["default"].convertToType(data['updated_at'], 'Date');
        }

        if (data.hasOwnProperty('value_updated_at')) {
          obj['value_updated_at'] = _ApiClient["default"].convertToType(data['value_updated_at'], 'Date');
        }

        if (data.hasOwnProperty('variable_name')) {
          obj['variable_name'] = _ApiClient["default"].convertToType(data['variable_name'], 'String');
        }
      }

      return obj;
    }
  }]);

  return ArduinoProperty;
}();
/**
 * Creation date of the property
 * @member {Date} created_at
 */


ArduinoProperty.prototype['created_at'] = undefined;
/**
 * Delete date of the property
 * @member {Date} deleted_at
 */

ArduinoProperty.prototype['deleted_at'] = undefined;
/**
 * The api reference of this property
 * @member {String} href
 */

ArduinoProperty.prototype['href'] = undefined;
/**
 * The id of the property
 * @member {String} id
 */

ArduinoProperty.prototype['id'] = undefined;
/**
 * Last value of this property
 * @member {Object} last_value
 */

ArduinoProperty.prototype['last_value'] = undefined;
/**
 * Maximum value of this property
 * @member {Number} max_value
 */

ArduinoProperty.prototype['max_value'] = undefined;
/**
 * Minimum value of this property
 * @member {Number} min_value
 */

ArduinoProperty.prototype['min_value'] = undefined;
/**
 * The friendly name of the property
 * @member {String} name
 */

ArduinoProperty.prototype['name'] = undefined;
/**
 * The permission of the property
 * @member {String} permission
 */

ArduinoProperty.prototype['permission'] = undefined;
/**
 * If true, data will persist into a timeseries database
 * @member {Boolean} persist
 */

ArduinoProperty.prototype['persist'] = undefined;
/**
 * The id of the sync pool
 * @member {String} sync_id
 */

ArduinoProperty.prototype['sync_id'] = undefined;
/**
 * The integer id of the property
 * @member {Number} tag
 */

ArduinoProperty.prototype['tag'] = undefined;
/**
 * The id of the thing
 * @member {String} thing_id
 */

ArduinoProperty.prototype['thing_id'] = undefined;
/**
 * The name of the associated thing
 * @member {String} thing_name
 */

ArduinoProperty.prototype['thing_name'] = undefined;
/**
 * The type of the property
 * @member {String} type
 */

ArduinoProperty.prototype['type'] = undefined;
/**
 * The update frequency in seconds, or the amount of the property has to change in order to trigger an update
 * @member {Number} update_parameter
 */

ArduinoProperty.prototype['update_parameter'] = undefined;
/**
 * The update strategy for the property value
 * @member {String} update_strategy
 */

ArduinoProperty.prototype['update_strategy'] = undefined;
/**
 * Update date of the property
 * @member {Date} updated_at
 */

ArduinoProperty.prototype['updated_at'] = undefined;
/**
 * Last update timestamp of this property
 * @member {Date} value_updated_at
 */

ArduinoProperty.prototype['value_updated_at'] = undefined;
/**
 * The sketch variable name of the property
 * @member {String} variable_name
 */

ArduinoProperty.prototype['variable_name'] = undefined;
var _default = ArduinoProperty;
exports["default"] = _default;