"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ArduinoDashboardowner = _interopRequireDefault(require("./ArduinoDashboardowner"));

var _ArduinoDashboardshare = _interopRequireDefault(require("./ArduinoDashboardshare"));

var _ArduinoWidgetv = _interopRequireDefault(require("./ArduinoWidgetv2"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The ArduinoDashboardv2 model module.
 * @module model/ArduinoDashboardv2
 * @version 1.4.2
 */
var ArduinoDashboardv2 =
/*#__PURE__*/
function () {
  /**
   * Constructs a new <code>ArduinoDashboardv2</code>.
   * Dashboard is a collection of widgets (default view)
   * @alias module:model/ArduinoDashboardv2
   * @param id {String} The friendly name of the dashboard
   * @param name {String} The friendly name of the dashboard
   * @param updatedAt {Date} Last update date
   */
  function ArduinoDashboardv2(id, name, updatedAt) {
    _classCallCheck(this, ArduinoDashboardv2);

    ArduinoDashboardv2.initialize(this, id, name, updatedAt);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ArduinoDashboardv2, null, [{
    key: "initialize",
    value: function initialize(obj, id, name, updatedAt) {
      obj['id'] = id;
      obj['name'] = name;
      obj['updated_at'] = updatedAt;
    }
    /**
     * Constructs a <code>ArduinoDashboardv2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoDashboardv2} obj Optional instance to populate.
     * @return {module:model/ArduinoDashboardv2} The populated <code>ArduinoDashboardv2</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoDashboardv2();

        if (data.hasOwnProperty('created_by')) {
          obj['created_by'] = _ArduinoDashboardowner["default"].constructFromObject(data['created_by']);
        }

        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('organization_id')) {
          obj['organization_id'] = _ApiClient["default"].convertToType(data['organization_id'], 'String');
        }

        if (data.hasOwnProperty('shared_by')) {
          obj['shared_by'] = _ArduinoDashboardshare["default"].constructFromObject(data['shared_by']);
        }

        if (data.hasOwnProperty('shared_with')) {
          obj['shared_with'] = _ApiClient["default"].convertToType(data['shared_with'], [_ArduinoDashboardshare["default"]]);
        }

        if (data.hasOwnProperty('updated_at')) {
          obj['updated_at'] = _ApiClient["default"].convertToType(data['updated_at'], 'Date');
        }

        if (data.hasOwnProperty('widgets')) {
          obj['widgets'] = _ApiClient["default"].convertToType(data['widgets'], [_ArduinoWidgetv["default"]]);
        }
      }

      return obj;
    }
  }]);

  return ArduinoDashboardv2;
}();
/**
 * @member {module:model/ArduinoDashboardowner} created_by
 */


ArduinoDashboardv2.prototype['created_by'] = undefined;
/**
 * The friendly name of the dashboard
 * @member {String} id
 */

ArduinoDashboardv2.prototype['id'] = undefined;
/**
 * The friendly name of the dashboard
 * @member {String} name
 */

ArduinoDashboardv2.prototype['name'] = undefined;
/**
 * Id of the organization the dashboard belongs to
 * @member {String} organization_id
 */

ArduinoDashboardv2.prototype['organization_id'] = undefined;
/**
 * @member {module:model/ArduinoDashboardshare} shared_by
 */

ArduinoDashboardv2.prototype['shared_by'] = undefined;
/**
 * ArduinoDashboardshareCollection is the media type for an array of ArduinoDashboardshare (default view)
 * @member {Array.<module:model/ArduinoDashboardshare>} shared_with
 */

ArduinoDashboardv2.prototype['shared_with'] = undefined;
/**
 * Last update date
 * @member {Date} updated_at
 */

ArduinoDashboardv2.prototype['updated_at'] = undefined;
/**
 * ArduinoWidgetv2Collection is the media type for an array of ArduinoWidgetv2 (default view)
 * @member {Array.<module:model/ArduinoWidgetv2>} widgets
 */

ArduinoDashboardv2.prototype['widgets'] = undefined;
var _default = ArduinoDashboardv2;
exports["default"] = _default;