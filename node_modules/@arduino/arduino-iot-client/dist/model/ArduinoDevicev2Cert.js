"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ArduinoCompressedv = _interopRequireDefault(require("./ArduinoCompressedv2"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The ArduinoDevicev2Cert model module.
 * @module model/ArduinoDevicev2Cert
 * @version 1.4.2
 */
var ArduinoDevicev2Cert =
/*#__PURE__*/
function () {
  /**
   * Constructs a new <code>ArduinoDevicev2Cert</code>.
   * DeviceCertV2 describes a certificate associated to the device (default view)
   * @alias module:model/ArduinoDevicev2Cert
   * @param compressed {module:model/ArduinoCompressedv2} 
   * @param der {String} The certificate in DER format
   * @param deviceId {String} The unique identifier of the device
   * @param enabled {Boolean} Whether the certificate is enabled
   * @param href {String} The api reference of this cert
   * @param id {String} The unique identifier of the key
   * @param pem {String} The certificate in pem format
   */
  function ArduinoDevicev2Cert(compressed, der, deviceId, enabled, href, id, pem) {
    _classCallCheck(this, ArduinoDevicev2Cert);

    ArduinoDevicev2Cert.initialize(this, compressed, der, deviceId, enabled, href, id, pem);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ArduinoDevicev2Cert, null, [{
    key: "initialize",
    value: function initialize(obj, compressed, der, deviceId, enabled, href, id, pem) {
      obj['compressed'] = compressed;
      obj['der'] = der;
      obj['device_id'] = deviceId;
      obj['enabled'] = enabled;
      obj['href'] = href;
      obj['id'] = id;
      obj['pem'] = pem;
    }
    /**
     * Constructs a <code>ArduinoDevicev2Cert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoDevicev2Cert} obj Optional instance to populate.
     * @return {module:model/ArduinoDevicev2Cert} The populated <code>ArduinoDevicev2Cert</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoDevicev2Cert();

        if (data.hasOwnProperty('ca')) {
          obj['ca'] = _ApiClient["default"].convertToType(data['ca'], 'String');
        }

        if (data.hasOwnProperty('compressed')) {
          obj['compressed'] = _ArduinoCompressedv["default"].constructFromObject(data['compressed']);
        }

        if (data.hasOwnProperty('der')) {
          obj['der'] = _ApiClient["default"].convertToType(data['der'], 'String');
        }

        if (data.hasOwnProperty('device_id')) {
          obj['device_id'] = _ApiClient["default"].convertToType(data['device_id'], 'String');
        }

        if (data.hasOwnProperty('enabled')) {
          obj['enabled'] = _ApiClient["default"].convertToType(data['enabled'], 'Boolean');
        }

        if (data.hasOwnProperty('href')) {
          obj['href'] = _ApiClient["default"].convertToType(data['href'], 'String');
        }

        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }

        if (data.hasOwnProperty('pem')) {
          obj['pem'] = _ApiClient["default"].convertToType(data['pem'], 'String');
        }
      }

      return obj;
    }
  }]);

  return ArduinoDevicev2Cert;
}();
/**
 * The Certification Authority used to sign the certificate
 * @member {String} ca
 */


ArduinoDevicev2Cert.prototype['ca'] = undefined;
/**
 * @member {module:model/ArduinoCompressedv2} compressed
 */

ArduinoDevicev2Cert.prototype['compressed'] = undefined;
/**
 * The certificate in DER format
 * @member {String} der
 */

ArduinoDevicev2Cert.prototype['der'] = undefined;
/**
 * The unique identifier of the device
 * @member {String} device_id
 */

ArduinoDevicev2Cert.prototype['device_id'] = undefined;
/**
 * Whether the certificate is enabled
 * @member {Boolean} enabled
 * @default true
 */

ArduinoDevicev2Cert.prototype['enabled'] = true;
/**
 * The api reference of this cert
 * @member {String} href
 */

ArduinoDevicev2Cert.prototype['href'] = undefined;
/**
 * The unique identifier of the key
 * @member {String} id
 */

ArduinoDevicev2Cert.prototype['id'] = undefined;
/**
 * The certificate in pem format
 * @member {String} pem
 */

ArduinoDevicev2Cert.prototype['pem'] = undefined;
var _default = ArduinoDevicev2Cert;
exports["default"] = _default;