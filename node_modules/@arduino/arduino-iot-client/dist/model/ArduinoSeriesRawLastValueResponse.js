"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The ArduinoSeriesRawLastValueResponse model module.
 * @module model/ArduinoSeriesRawLastValueResponse
 * @version 1.4.2
 */
var ArduinoSeriesRawLastValueResponse =
/*#__PURE__*/
function () {
  /**
   * Constructs a new <code>ArduinoSeriesRawLastValueResponse</code>.
   * ArduinoSeriesRawLastValueResponse media type (default view)
   * @alias module:model/ArduinoSeriesRawLastValueResponse
   * @param countValues {Number} Total number of values in the array 'values'
   * @param propertyId {String} Property id
   * @param thingId {String} Thing id
   * @param times {Array.<Date>} Timestamp in RFC3339
   * @param values {Array.<Object>} Values can be in Float, String, Bool, Object
   */
  function ArduinoSeriesRawLastValueResponse(countValues, propertyId, thingId, times, values) {
    _classCallCheck(this, ArduinoSeriesRawLastValueResponse);

    ArduinoSeriesRawLastValueResponse.initialize(this, countValues, propertyId, thingId, times, values);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ArduinoSeriesRawLastValueResponse, null, [{
    key: "initialize",
    value: function initialize(obj, countValues, propertyId, thingId, times, values) {
      obj['count_values'] = countValues;
      obj['property_id'] = propertyId;
      obj['thing_id'] = thingId;
      obj['times'] = times;
      obj['values'] = values;
    }
    /**
     * Constructs a <code>ArduinoSeriesRawLastValueResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoSeriesRawLastValueResponse} obj Optional instance to populate.
     * @return {module:model/ArduinoSeriesRawLastValueResponse} The populated <code>ArduinoSeriesRawLastValueResponse</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoSeriesRawLastValueResponse();

        if (data.hasOwnProperty('count_values')) {
          obj['count_values'] = _ApiClient["default"].convertToType(data['count_values'], 'Number');
        }

        if (data.hasOwnProperty('property_id')) {
          obj['property_id'] = _ApiClient["default"].convertToType(data['property_id'], 'String');
        }

        if (data.hasOwnProperty('thing_id')) {
          obj['thing_id'] = _ApiClient["default"].convertToType(data['thing_id'], 'String');
        }

        if (data.hasOwnProperty('times')) {
          obj['times'] = _ApiClient["default"].convertToType(data['times'], ['Date']);
        }

        if (data.hasOwnProperty('values')) {
          obj['values'] = _ApiClient["default"].convertToType(data['values'], [Object]);
        }
      }

      return obj;
    }
  }]);

  return ArduinoSeriesRawLastValueResponse;
}();
/**
 * Total number of values in the array 'values'
 * @member {Number} count_values
 */


ArduinoSeriesRawLastValueResponse.prototype['count_values'] = undefined;
/**
 * Property id
 * @member {String} property_id
 */

ArduinoSeriesRawLastValueResponse.prototype['property_id'] = undefined;
/**
 * Thing id
 * @member {String} thing_id
 */

ArduinoSeriesRawLastValueResponse.prototype['thing_id'] = undefined;
/**
 * Timestamp in RFC3339
 * @member {Array.<Date>} times
 */

ArduinoSeriesRawLastValueResponse.prototype['times'] = undefined;
/**
 * Values can be in Float, String, Bool, Object
 * @member {Array.<Object>} values
 */

ArduinoSeriesRawLastValueResponse.prototype['values'] = undefined;
var _default = ArduinoSeriesRawLastValueResponse;
exports["default"] = _default;