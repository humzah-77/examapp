"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The ArduinoSeriesResponse model module.
 * @module model/ArduinoSeriesResponse
 * @version 1.4.2
 */
var ArduinoSeriesResponse =
/*#__PURE__*/
function () {
  /**
   * Constructs a new <code>ArduinoSeriesResponse</code>.
   * ArduinoSeriesResponse media type (default view)
   * @alias module:model/ArduinoSeriesResponse
   * @param countValues {Number} Total number of values in the array 'values'
   * @param fromDate {Date} From date
   * @param interval {Number} Resolution in seconds
   * @param query {String} Query of for the data
   * @param respVersion {Number} Response version
   * @param status {String} Status of the response
   * @param times {Array.<Date>} Timestamp in RFC3339
   * @param toDate {Date} To date
   * @param values {Array.<Number>} Values in Float
   */
  function ArduinoSeriesResponse(countValues, fromDate, interval, query, respVersion, status, times, toDate, values) {
    _classCallCheck(this, ArduinoSeriesResponse);

    ArduinoSeriesResponse.initialize(this, countValues, fromDate, interval, query, respVersion, status, times, toDate, values);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ArduinoSeriesResponse, null, [{
    key: "initialize",
    value: function initialize(obj, countValues, fromDate, interval, query, respVersion, status, times, toDate, values) {
      obj['count_values'] = countValues;
      obj['from_date'] = fromDate;
      obj['interval'] = interval;
      obj['query'] = query;
      obj['resp_version'] = respVersion;
      obj['status'] = status;
      obj['times'] = times;
      obj['to_date'] = toDate;
      obj['values'] = values;
    }
    /**
     * Constructs a <code>ArduinoSeriesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoSeriesResponse} obj Optional instance to populate.
     * @return {module:model/ArduinoSeriesResponse} The populated <code>ArduinoSeriesResponse</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoSeriesResponse();

        if (data.hasOwnProperty('count_values')) {
          obj['count_values'] = _ApiClient["default"].convertToType(data['count_values'], 'Number');
        }

        if (data.hasOwnProperty('from_date')) {
          obj['from_date'] = _ApiClient["default"].convertToType(data['from_date'], 'Date');
        }

        if (data.hasOwnProperty('interval')) {
          obj['interval'] = _ApiClient["default"].convertToType(data['interval'], 'Number');
        }

        if (data.hasOwnProperty('message')) {
          obj['message'] = _ApiClient["default"].convertToType(data['message'], 'String');
        }

        if (data.hasOwnProperty('query')) {
          obj['query'] = _ApiClient["default"].convertToType(data['query'], 'String');
        }

        if (data.hasOwnProperty('resp_version')) {
          obj['resp_version'] = _ApiClient["default"].convertToType(data['resp_version'], 'Number');
        }

        if (data.hasOwnProperty('series_limit')) {
          obj['series_limit'] = _ApiClient["default"].convertToType(data['series_limit'], 'Number');
        }

        if (data.hasOwnProperty('status')) {
          obj['status'] = _ApiClient["default"].convertToType(data['status'], 'String');
        }

        if (data.hasOwnProperty('times')) {
          obj['times'] = _ApiClient["default"].convertToType(data['times'], ['Date']);
        }

        if (data.hasOwnProperty('to_date')) {
          obj['to_date'] = _ApiClient["default"].convertToType(data['to_date'], 'Date');
        }

        if (data.hasOwnProperty('values')) {
          obj['values'] = _ApiClient["default"].convertToType(data['values'], ['Number']);
        }
      }

      return obj;
    }
  }]);

  return ArduinoSeriesResponse;
}();
/**
 * Total number of values in the array 'values'
 * @member {Number} count_values
 */


ArduinoSeriesResponse.prototype['count_values'] = undefined;
/**
 * From date
 * @member {Date} from_date
 */

ArduinoSeriesResponse.prototype['from_date'] = undefined;
/**
 * Resolution in seconds
 * @member {Number} interval
 */

ArduinoSeriesResponse.prototype['interval'] = undefined;
/**
 * If the response is different than 'ok'
 * @member {String} message
 * @default ''
 */

ArduinoSeriesResponse.prototype['message'] = '';
/**
 * Query of for the data
 * @member {String} query
 */

ArduinoSeriesResponse.prototype['query'] = undefined;
/**
 * Response version
 * @member {Number} resp_version
 */

ArduinoSeriesResponse.prototype['resp_version'] = undefined;
/**
 * Max of values
 * @member {Number} series_limit
 */

ArduinoSeriesResponse.prototype['series_limit'] = undefined;
/**
 * Status of the response
 * @member {String} status
 */

ArduinoSeriesResponse.prototype['status'] = undefined;
/**
 * Timestamp in RFC3339
 * @member {Array.<Date>} times
 */

ArduinoSeriesResponse.prototype['times'] = undefined;
/**
 * To date
 * @member {Date} to_date
 */

ArduinoSeriesResponse.prototype['to_date'] = undefined;
/**
 * Values in Float
 * @member {Array.<Number>} values
 */

ArduinoSeriesResponse.prototype['values'] = undefined;
var _default = ArduinoSeriesResponse;
exports["default"] = _default;