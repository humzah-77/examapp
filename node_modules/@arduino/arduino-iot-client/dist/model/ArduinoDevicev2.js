"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ArduinoDevicev2SimpleProperties = _interopRequireDefault(require("./ArduinoDevicev2SimpleProperties"));

var _ArduinoDevicev2Webhook = _interopRequireDefault(require("./ArduinoDevicev2Webhook"));

var _ArduinoThing = _interopRequireDefault(require("./ArduinoThing"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The ArduinoDevicev2 model module.
 * @module model/ArduinoDevicev2
 * @version 1.4.2
 */
var ArduinoDevicev2 =
/*#__PURE__*/
function () {
  /**
   * Constructs a new <code>ArduinoDevicev2</code>.
   * ArduinoDevicev2 media type (default view)
   * @alias module:model/ArduinoDevicev2
   * @param href {String} The api reference of this device
   * @param id {String} The arn of the device
   * @param label {String} The label of the device
   * @param name {String} The friendly name of the device
   * @param serial {String} The serial uuid of the device
   * @param type {String} The type of the device
   * @param userId {String} The id of the user
   */
  function ArduinoDevicev2(href, id, label, name, serial, type, userId) {
    _classCallCheck(this, ArduinoDevicev2);

    ArduinoDevicev2.initialize(this, href, id, label, name, serial, type, userId);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ArduinoDevicev2, null, [{
    key: "initialize",
    value: function initialize(obj, href, id, label, name, serial, type, userId) {
      obj['href'] = href;
      obj['id'] = id;
      obj['label'] = label;
      obj['name'] = name;
      obj['serial'] = serial;
      obj['type'] = type;
      obj['user_id'] = userId;
    }
    /**
     * Constructs a <code>ArduinoDevicev2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoDevicev2} obj Optional instance to populate.
     * @return {module:model/ArduinoDevicev2} The populated <code>ArduinoDevicev2</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoDevicev2();

        if (data.hasOwnProperty('created_at')) {
          obj['created_at'] = _ApiClient["default"].convertToType(data['created_at'], 'Date');
        }

        if (data.hasOwnProperty('events')) {
          obj['events'] = _ApiClient["default"].convertToType(data['events'], [_ArduinoDevicev2SimpleProperties["default"]]);
        }

        if (data.hasOwnProperty('fqbn')) {
          obj['fqbn'] = _ApiClient["default"].convertToType(data['fqbn'], 'String');
        }

        if (data.hasOwnProperty('href')) {
          obj['href'] = _ApiClient["default"].convertToType(data['href'], 'String');
        }

        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }

        if (data.hasOwnProperty('label')) {
          obj['label'] = _ApiClient["default"].convertToType(data['label'], 'String');
        }

        if (data.hasOwnProperty('last_activity_at')) {
          obj['last_activity_at'] = _ApiClient["default"].convertToType(data['last_activity_at'], 'Date');
        }

        if (data.hasOwnProperty('latest_wifi_fw_version')) {
          obj['latest_wifi_fw_version'] = _ApiClient["default"].convertToType(data['latest_wifi_fw_version'], 'String');
        }

        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], {
            'String': Object
          });
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('organization_id')) {
          obj['organization_id'] = _ApiClient["default"].convertToType(data['organization_id'], 'String');
        }

        if (data.hasOwnProperty('ota_available')) {
          obj['ota_available'] = _ApiClient["default"].convertToType(data['ota_available'], 'Boolean');
        }

        if (data.hasOwnProperty('ota_compatible')) {
          obj['ota_compatible'] = _ApiClient["default"].convertToType(data['ota_compatible'], 'Boolean');
        }

        if (data.hasOwnProperty('required_wifi_fw_version')) {
          obj['required_wifi_fw_version'] = _ApiClient["default"].convertToType(data['required_wifi_fw_version'], 'String');
        }

        if (data.hasOwnProperty('serial')) {
          obj['serial'] = _ApiClient["default"].convertToType(data['serial'], 'String');
        }

        if (data.hasOwnProperty('tags')) {
          obj['tags'] = _ApiClient["default"].convertToType(data['tags'], {
            'String': Object
          });
        }

        if (data.hasOwnProperty('thing')) {
          obj['thing'] = _ArduinoThing["default"].constructFromObject(data['thing']);
        }

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }

        if (data.hasOwnProperty('user_id')) {
          obj['user_id'] = _ApiClient["default"].convertToType(data['user_id'], 'String');
        }

        if (data.hasOwnProperty('webhooks')) {
          obj['webhooks'] = _ApiClient["default"].convertToType(data['webhooks'], [_ArduinoDevicev2Webhook["default"]]);
        }

        if (data.hasOwnProperty('wifi_fw_version')) {
          obj['wifi_fw_version'] = _ApiClient["default"].convertToType(data['wifi_fw_version'], 'String');
        }
      }

      return obj;
    }
  }]);

  return ArduinoDevicev2;
}();
/**
 * Creation date of the device
 * @member {Date} created_at
 */


ArduinoDevicev2.prototype['created_at'] = undefined;
/**
 * ArduinoDevicev2SimplePropertiesCollection is the media type for an array of ArduinoDevicev2SimpleProperties (default view)
 * @member {Array.<module:model/ArduinoDevicev2SimpleProperties>} events
 */

ArduinoDevicev2.prototype['events'] = undefined;
/**
 * The fully qualified board name
 * @member {String} fqbn
 */

ArduinoDevicev2.prototype['fqbn'] = undefined;
/**
 * The api reference of this device
 * @member {String} href
 */

ArduinoDevicev2.prototype['href'] = undefined;
/**
 * The arn of the device
 * @member {String} id
 */

ArduinoDevicev2.prototype['id'] = undefined;
/**
 * The label of the device
 * @member {String} label
 */

ArduinoDevicev2.prototype['label'] = undefined;
/**
 * Last activity date
 * @member {Date} last_activity_at
 */

ArduinoDevicev2.prototype['last_activity_at'] = undefined;
/**
 * The latest version of the NINA/WIFI101 firmware available for this device
 * @member {String} latest_wifi_fw_version
 */

ArduinoDevicev2.prototype['latest_wifi_fw_version'] = undefined;
/**
 * The metadata of the device
 * @member {Object.<String, Object>} metadata
 */

ArduinoDevicev2.prototype['metadata'] = undefined;
/**
 * The friendly name of the device
 * @member {String} name
 */

ArduinoDevicev2.prototype['name'] = undefined;
/**
 * Id of the organization the device belongs to
 * @member {String} organization_id
 */

ArduinoDevicev2.prototype['organization_id'] = undefined;
/**
 * True if the device type is ready to receive OTA updated
 * @member {Boolean} ota_available
 */

ArduinoDevicev2.prototype['ota_available'] = undefined;
/**
 * True if the device type is OTA compatible
 * @member {Boolean} ota_compatible
 */

ArduinoDevicev2.prototype['ota_compatible'] = undefined;
/**
 * The required version of the NINA/WIFI101 firmware needed by IoT Cloud
 * @member {String} required_wifi_fw_version
 */

ArduinoDevicev2.prototype['required_wifi_fw_version'] = undefined;
/**
 * The serial uuid of the device
 * @member {String} serial
 */

ArduinoDevicev2.prototype['serial'] = undefined;
/**
 * Tags belonging to the device
 * @member {Object.<String, Object>} tags
 */

ArduinoDevicev2.prototype['tags'] = undefined;
/**
 * @member {module:model/ArduinoThing} thing
 */

ArduinoDevicev2.prototype['thing'] = undefined;
/**
 * The type of the device
 * @member {String} type
 */

ArduinoDevicev2.prototype['type'] = undefined;
/**
 * The id of the user
 * @member {String} user_id
 */

ArduinoDevicev2.prototype['user_id'] = undefined;
/**
 * ArduinoDevicev2WebhookCollection is the media type for an array of ArduinoDevicev2Webhook (default view)
 * @member {Array.<module:model/ArduinoDevicev2Webhook>} webhooks
 */

ArduinoDevicev2.prototype['webhooks'] = undefined;
/**
 * The version of the NINA/WIFI101 firmware running on the device
 * @member {String} wifi_fw_version
 */

ArduinoDevicev2.prototype['wifi_fw_version'] = undefined;
var _default = ArduinoDevicev2;
exports["default"] = _default;