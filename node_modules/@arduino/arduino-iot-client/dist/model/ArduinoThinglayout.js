"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ArduinoProperty = _interopRequireDefault(require("./ArduinoProperty"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The ArduinoThinglayout model module.
 * @module model/ArduinoThinglayout
 * @version 0.0.1
 */
var ArduinoThinglayout =
/*#__PURE__*/
function () {
  /**
   * Constructs a new <code>ArduinoThinglayout</code>.
   * ArduinoThinglayout media type (default view)
   * @alias module:model/ArduinoThinglayout
   * @param href {String} The api reference of this thing
   * @param id {String} The id of the thing
   * @param name {String} The friendly name of the thing
   * @param userId {String} The user id of the owner
   */
  function ArduinoThinglayout(href, id, name, userId) {
    _classCallCheck(this, ArduinoThinglayout);

    ArduinoThinglayout.initialize(this, href, id, name, userId);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(ArduinoThinglayout, null, [{
    key: "initialize",
    value: function initialize(obj, href, id, name, userId) {
      obj['href'] = href;
      obj['id'] = id;
      obj['name'] = name;
      obj['user_id'] = userId;
    }
    /**
     * Constructs a <code>ArduinoThinglayout</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoThinglayout} obj Optional instance to populate.
     * @return {module:model/ArduinoThinglayout} The populated <code>ArduinoThinglayout</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoThinglayout();

        if (data.hasOwnProperty('created_at')) {
          obj['created_at'] = _ApiClient["default"].convertToType(data['created_at'], 'Date');
        }

        if (data.hasOwnProperty('data_retention_days')) {
          obj['data_retention_days'] = _ApiClient["default"].convertToType(data['data_retention_days'], 'Number');
        }

        if (data.hasOwnProperty('deleted_at')) {
          obj['deleted_at'] = _ApiClient["default"].convertToType(data['deleted_at'], 'Date');
        }

        if (data.hasOwnProperty('device_id')) {
          obj['device_id'] = _ApiClient["default"].convertToType(data['device_id'], 'String');
        }

        if (data.hasOwnProperty('href')) {
          obj['href'] = _ApiClient["default"].convertToType(data['href'], 'String');
        }

        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('properties')) {
          obj['properties'] = _ApiClient["default"].convertToType(data['properties'], [_ArduinoProperty["default"]]);
        }

        if (data.hasOwnProperty('properties_count')) {
          obj['properties_count'] = _ApiClient["default"].convertToType(data['properties_count'], 'Number');
        }

        if (data.hasOwnProperty('sketch_id')) {
          obj['sketch_id'] = _ApiClient["default"].convertToType(data['sketch_id'], 'String');
        }

        if (data.hasOwnProperty('updated_at')) {
          obj['updated_at'] = _ApiClient["default"].convertToType(data['updated_at'], 'Date');
        }

        if (data.hasOwnProperty('user_id')) {
          obj['user_id'] = _ApiClient["default"].convertToType(data['user_id'], 'String');
        }

        if (data.hasOwnProperty('webhook_active')) {
          obj['webhook_active'] = _ApiClient["default"].convertToType(data['webhook_active'], 'Boolean');
        }

        if (data.hasOwnProperty('webhook_uri')) {
          obj['webhook_uri'] = _ApiClient["default"].convertToType(data['webhook_uri'], 'String');
        }
      }

      return obj;
    }
  }]);

  return ArduinoThinglayout;
}();
/**
 * Creation date of the thing
 * @member {Date} created_at
 */


ArduinoThinglayout.prototype['created_at'] = undefined;
/**
 * How many days the data will be kept
 * @member {Number} data_retention_days
 */

ArduinoThinglayout.prototype['data_retention_days'] = undefined;
/**
 * Delete date of the thing
 * @member {Date} deleted_at
 */

ArduinoThinglayout.prototype['deleted_at'] = undefined;
/**
 * The arn of the device
 * @member {String} device_id
 */

ArduinoThinglayout.prototype['device_id'] = undefined;
/**
 * The api reference of this thing
 * @member {String} href
 */

ArduinoThinglayout.prototype['href'] = undefined;
/**
 * The id of the thing
 * @member {String} id
 */

ArduinoThinglayout.prototype['id'] = undefined;
/**
 * The friendly name of the thing
 * @member {String} name
 */

ArduinoThinglayout.prototype['name'] = undefined;
/**
 * ArduinoPropertyCollection is the media type for an array of ArduinoProperty (default view)
 * @member {Array.<module:model/ArduinoProperty>} properties
 */

ArduinoThinglayout.prototype['properties'] = undefined;
/**
 * The number of properties of the thing
 * @member {Number} properties_count
 */

ArduinoThinglayout.prototype['properties_count'] = undefined;
/**
 * The id of the attached sketch
 * @member {String} sketch_id
 */

ArduinoThinglayout.prototype['sketch_id'] = undefined;
/**
 * Update date of the thing
 * @member {Date} updated_at
 */

ArduinoThinglayout.prototype['updated_at'] = undefined;
/**
 * The user id of the owner
 * @member {String} user_id
 */

ArduinoThinglayout.prototype['user_id'] = undefined;
/**
 * Webhook uri
 * @member {Boolean} webhook_active
 */

ArduinoThinglayout.prototype['webhook_active'] = undefined;
/**
 * Webhook uri
 * @member {String} webhook_uri
 */

ArduinoThinglayout.prototype['webhook_uri'] = undefined;
var _default = ArduinoThinglayout;
exports["default"] = _default;