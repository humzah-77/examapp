"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _Devicev2Otabinaryurl = _interopRequireDefault(require("../model/Devicev2Otabinaryurl"));

var _Error = _interopRequireDefault(require("../model/Error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* DevicesV2Ota service.
* @module api/DevicesV2OtaApi
* @version 1.4.2
*/
var DevicesV2OtaApi =
/*#__PURE__*/
function () {
  /**
  * Constructs a new DevicesV2OtaApi. 
  * @alias module:api/DevicesV2OtaApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DevicesV2OtaApi(apiClient) {
    _classCallCheck(this, DevicesV2OtaApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * send devices_v2_ota
   * Send a binary url to a device
   * @param {String} id The id of the device
   * @param {module:model/Devicev2Otabinaryurl} devicev2Otabinaryurl 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  _createClass(DevicesV2OtaApi, [{
    key: "devicesV2OtaSendWithHttpInfo",
    value: function devicesV2OtaSendWithHttpInfo(id, devicev2Otabinaryurl) {
      var postBody = devicev2Otabinaryurl; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2OtaSend");
      } // verify the required parameter 'devicev2Otabinaryurl' is set


      if (devicev2Otabinaryurl === undefined || devicev2Otabinaryurl === null) {
        throw new _Error["default"]("Missing the required parameter 'devicev2Otabinaryurl' when calling devicesV2OtaSend");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/v2/devices/{id}/ota', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * send devices_v2_ota
     * Send a binary url to a device
     * @param {String} id The id of the device
     * @param {module:model/Devicev2Otabinaryurl} devicev2Otabinaryurl 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "devicesV2OtaSend",
    value: function devicesV2OtaSend(id, devicev2Otabinaryurl) {
      return this.devicesV2OtaSendWithHttpInfo(id, devicev2Otabinaryurl).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * upload devices_v2_ota
     * Upload a binary and send it to a device
     * @param {String} id The id of the device
     * @param {File} otaFile OTA file
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.async If false, wait for the full OTA process, until it gets a result from the device (default to true)
     * @param {Number} opts.expireInMins Binary expire time in minutes, default 10 mins (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "devicesV2OtaUploadWithHttpInfo",
    value: function devicesV2OtaUploadWithHttpInfo(id, otaFile, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2OtaUpload");
      } // verify the required parameter 'otaFile' is set


      if (otaFile === undefined || otaFile === null) {
        throw new _Error["default"]("Missing the required parameter 'otaFile' when calling devicesV2OtaUpload");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'async': opts['async'],
        'expire_in_mins': opts['expireInMins'],
        'ota_file': otaFile
      };
      var authNames = ['oauth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/v2/devices/{id}/ota', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * upload devices_v2_ota
     * Upload a binary and send it to a device
     * @param {String} id The id of the device
     * @param {File} otaFile OTA file
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.async If false, wait for the full OTA process, until it gets a result from the device (default to true)
     * @param {Number} opts.expireInMins Binary expire time in minutes, default 10 mins (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "devicesV2OtaUpload",
    value: function devicesV2OtaUpload(id, otaFile, opts) {
      return this.devicesV2OtaUploadWithHttpInfo(id, otaFile, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return DevicesV2OtaApi;
}();

exports["default"] = DevicesV2OtaApi;