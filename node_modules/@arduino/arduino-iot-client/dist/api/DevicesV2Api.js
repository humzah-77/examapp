"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ArduinoDevicev = _interopRequireDefault(require("../model/ArduinoDevicev2"));

var _ArduinoDevicev2EventProperties = _interopRequireDefault(require("../model/ArduinoDevicev2EventProperties"));

var _ArduinoDevicev2properties = _interopRequireDefault(require("../model/ArduinoDevicev2properties"));

var _ArduinoDevicev2propertyvalues = _interopRequireDefault(require("../model/ArduinoDevicev2propertyvalues"));

var _CreateDevicesV2Payload = _interopRequireDefault(require("../model/CreateDevicesV2Payload"));

var _Devicev = _interopRequireDefault(require("../model/Devicev2"));

var _Error = _interopRequireDefault(require("../model/Error"));

var _PropertiesValues = _interopRequireDefault(require("../model/PropertiesValues"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* DevicesV2 service.
* @module api/DevicesV2Api
* @version 1.4.2
*/
var DevicesV2Api =
/*#__PURE__*/
function () {
  /**
  * Constructs a new DevicesV2Api. 
  * @alias module:api/DevicesV2Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DevicesV2Api(apiClient) {
    _classCallCheck(this, DevicesV2Api);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * create devices_v2
   * Creates a new device associated to the user.
   * @param {module:model/CreateDevicesV2Payload} createDevicesV2Payload DeviceV2 describes a device.
   * @param {Object} opts Optional parameters
   * @param {String} opts.xOrganization 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2} and HTTP response
   */


  _createClass(DevicesV2Api, [{
    key: "devicesV2CreateWithHttpInfo",
    value: function devicesV2CreateWithHttpInfo(createDevicesV2Payload, opts) {
      opts = opts || {};
      var postBody = createDevicesV2Payload; // verify the required parameter 'createDevicesV2Payload' is set

      if (createDevicesV2Payload === undefined || createDevicesV2Payload === null) {
        throw new _Error["default"]("Missing the required parameter 'createDevicesV2Payload' when calling devicesV2Create");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ArduinoDevicev["default"];
      return this.apiClient.callApi('/v2/devices', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * create devices_v2
     * Creates a new device associated to the user.
     * @param {module:model/CreateDevicesV2Payload} createDevicesV2Payload DeviceV2 describes a device.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2}
     */

  }, {
    key: "devicesV2Create",
    value: function devicesV2Create(createDevicesV2Payload, opts) {
      return this.devicesV2CreateWithHttpInfo(createDevicesV2Payload, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * delete devices_v2
     * Removes a device associated to the user
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "devicesV2DeleteWithHttpInfo",
    value: function devicesV2DeleteWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Delete");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/v2/devices/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * delete devices_v2
     * Removes a device associated to the user
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "devicesV2Delete",
    value: function devicesV2Delete(id, opts) {
      return this.devicesV2DeleteWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * getEvents devices_v2
     * GET device events
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of events to select
     * @param {String} opts.start The time at which to start selecting events
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2EventProperties} and HTTP response
     */

  }, {
    key: "devicesV2GetEventsWithHttpInfo",
    value: function devicesV2GetEventsWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2GetEvents");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'limit': opts['limit'],
        'start': opts['start']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ArduinoDevicev2EventProperties["default"];
      return this.apiClient.callApi('/v2/devices/{id}/events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * getEvents devices_v2
     * GET device events
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of events to select
     * @param {String} opts.start The time at which to start selecting events
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2EventProperties}
     */

  }, {
    key: "devicesV2GetEvents",
    value: function devicesV2GetEvents(id, opts) {
      return this.devicesV2GetEventsWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * getProperties devices_v2
     * GET device properties
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2properties} and HTTP response
     */

  }, {
    key: "devicesV2GetPropertiesWithHttpInfo",
    value: function devicesV2GetPropertiesWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2GetProperties");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ArduinoDevicev2properties["default"];
      return this.apiClient.callApi('/v2/devices/{id}/properties', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * getProperties devices_v2
     * GET device properties
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2properties}
     */

  }, {
    key: "devicesV2GetProperties",
    value: function devicesV2GetProperties(id, opts) {
      return this.devicesV2GetPropertiesWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * list devices_v2
     * Returns the list of devices associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the devices (default to false)
     * @param {String} opts.serial Filter by device serial number
     * @param {Array.<String>} opts.tags Filter by tags
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoDevicev2>} and HTTP response
     */

  }, {
    key: "devicesV2ListWithHttpInfo",
    value: function devicesV2ListWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'across_user_ids': opts['acrossUserIds'],
        'serial': opts['serial'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_ArduinoDevicev["default"]];
      return this.apiClient.callApi('/v2/devices', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * list devices_v2
     * Returns the list of devices associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the devices (default to false)
     * @param {String} opts.serial Filter by device serial number
     * @param {Array.<String>} opts.tags Filter by tags
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoDevicev2>}
     */

  }, {
    key: "devicesV2List",
    value: function devicesV2List(opts) {
      return this.devicesV2ListWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * show devices_v2
     * Returns the device requested by the user
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2} and HTTP response
     */

  }, {
    key: "devicesV2ShowWithHttpInfo",
    value: function devicesV2ShowWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Show");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ArduinoDevicev["default"];
      return this.apiClient.callApi('/v2/devices/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * show devices_v2
     * Returns the device requested by the user
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2}
     */

  }, {
    key: "devicesV2Show",
    value: function devicesV2Show(id, opts) {
      return this.devicesV2ShowWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * timeseries devices_v2
     * GET device properties values in a range of time
     * @param {String} id The id of the device
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of properties to select
     * @param {String} opts.start The time at which to start selecting properties
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2propertyvalues} and HTTP response
     */

  }, {
    key: "devicesV2TimeseriesWithHttpInfo",
    value: function devicesV2TimeseriesWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Timeseries");
      } // verify the required parameter 'pid' is set


      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling devicesV2Timeseries");
      }

      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'limit': opts['limit'],
        'start': opts['start']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ArduinoDevicev2propertyvalues["default"];
      return this.apiClient.callApi('/v2/devices/{id}/properties/{pid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * timeseries devices_v2
     * GET device properties values in a range of time
     * @param {String} id The id of the device
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of properties to select
     * @param {String} opts.start The time at which to start selecting properties
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2propertyvalues}
     */

  }, {
    key: "devicesV2Timeseries",
    value: function devicesV2Timeseries(id, pid, opts) {
      return this.devicesV2TimeseriesWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * update devices_v2
     * Updates a device associated to the user
     * @param {String} id The id of the device
     * @param {module:model/Devicev2} devicev2 DeviceV2 describes a device.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2} and HTTP response
     */

  }, {
    key: "devicesV2UpdateWithHttpInfo",
    value: function devicesV2UpdateWithHttpInfo(id, devicev2, opts) {
      opts = opts || {};
      var postBody = devicev2; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2Update");
      } // verify the required parameter 'devicev2' is set


      if (devicev2 === undefined || devicev2 === null) {
        throw new _Error["default"]("Missing the required parameter 'devicev2' when calling devicesV2Update");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ArduinoDevicev["default"];
      return this.apiClient.callApi('/v2/devices/{id}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * update devices_v2
     * Updates a device associated to the user
     * @param {String} id The id of the device
     * @param {module:model/Devicev2} devicev2 DeviceV2 describes a device.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2}
     */

  }, {
    key: "devicesV2Update",
    value: function devicesV2Update(id, devicev2, opts) {
      return this.devicesV2UpdateWithHttpInfo(id, devicev2, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * updateProperties devices_v2
     * Update device properties last values
     * @param {String} id The id of the device
     * @param {module:model/PropertiesValues} propertiesValues 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "devicesV2UpdatePropertiesWithHttpInfo",
    value: function devicesV2UpdatePropertiesWithHttpInfo(id, propertiesValues, opts) {
      opts = opts || {};
      var postBody = propertiesValues; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2UpdateProperties");
      } // verify the required parameter 'propertiesValues' is set


      if (propertiesValues === undefined || propertiesValues === null) {
        throw new _Error["default"]("Missing the required parameter 'propertiesValues' when calling devicesV2UpdateProperties");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/v2/devices/{id}/properties', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * updateProperties devices_v2
     * Update device properties last values
     * @param {String} id The id of the device
     * @param {module:model/PropertiesValues} propertiesValues 
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "devicesV2UpdateProperties",
    value: function devicesV2UpdateProperties(id, propertiesValues, opts) {
      return this.devicesV2UpdatePropertiesWithHttpInfo(id, propertiesValues, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return DevicesV2Api;
}();

exports["default"] = DevicesV2Api;