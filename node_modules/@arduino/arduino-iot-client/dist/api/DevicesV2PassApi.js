"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ArduinoDevicev2Pass = _interopRequireDefault(require("../model/ArduinoDevicev2Pass"));

var _CheckDevicesV2PassPayload = _interopRequireDefault(require("../model/CheckDevicesV2PassPayload"));

var _Devicev2Pass = _interopRequireDefault(require("../model/Devicev2Pass"));

var _Error = _interopRequireDefault(require("../model/Error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* DevicesV2Pass service.
* @module api/DevicesV2PassApi
* @version 1.4.2
*/
var DevicesV2PassApi =
/*#__PURE__*/
function () {
  /**
  * Constructs a new DevicesV2PassApi. 
  * @alias module:api/DevicesV2PassApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DevicesV2PassApi(apiClient) {
    _classCallCheck(this, DevicesV2PassApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * check devices_v2_pass
   * Check if the password matches.
   * @param {String} id The id of the device
   * @param {module:model/CheckDevicesV2PassPayload} checkDevicesV2PassPayload 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  _createClass(DevicesV2PassApi, [{
    key: "devicesV2PassCheckWithHttpInfo",
    value: function devicesV2PassCheckWithHttpInfo(id, checkDevicesV2PassPayload) {
      var postBody = checkDevicesV2PassPayload; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2PassCheck");
      } // verify the required parameter 'checkDevicesV2PassPayload' is set


      if (checkDevicesV2PassPayload === undefined || checkDevicesV2PassPayload === null) {
        throw new _Error["default"]("Missing the required parameter 'checkDevicesV2PassPayload' when calling devicesV2PassCheck");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/v2/devices/{id}/pass', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * check devices_v2_pass
     * Check if the password matches.
     * @param {String} id The id of the device
     * @param {module:model/CheckDevicesV2PassPayload} checkDevicesV2PassPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "devicesV2PassCheck",
    value: function devicesV2PassCheck(id, checkDevicesV2PassPayload) {
      return this.devicesV2PassCheckWithHttpInfo(id, checkDevicesV2PassPayload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * delete devices_v2_pass
     * Removes the password for the device.
     * @param {String} id The id of the device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "devicesV2PassDeleteWithHttpInfo",
    value: function devicesV2PassDeleteWithHttpInfo(id) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2PassDelete");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/v2/devices/{id}/pass', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * delete devices_v2_pass
     * Removes the password for the device.
     * @param {String} id The id of the device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "devicesV2PassDelete",
    value: function devicesV2PassDelete(id) {
      return this.devicesV2PassDeleteWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * get devices_v2_pass
     * Returns whether the password for this device is set or not. It doesn't return the password.
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.suggestedPassword If true, return a suggested password (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2Pass} and HTTP response
     */

  }, {
    key: "devicesV2PassGetWithHttpInfo",
    value: function devicesV2PassGetWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2PassGet");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'suggested_password': opts['suggestedPassword']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ArduinoDevicev2Pass["default"];
      return this.apiClient.callApi('/v2/devices/{id}/pass', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * get devices_v2_pass
     * Returns whether the password for this device is set or not. It doesn't return the password.
     * @param {String} id The id of the device
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.suggestedPassword If true, return a suggested password (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2Pass}
     */

  }, {
    key: "devicesV2PassGet",
    value: function devicesV2PassGet(id, opts) {
      return this.devicesV2PassGetWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * set devices_v2_pass
     * Sets the password for the device. It can never be read back.
     * @param {String} id The id of the device
     * @param {module:model/Devicev2Pass} devicev2Pass 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2Pass} and HTTP response
     */

  }, {
    key: "devicesV2PassSetWithHttpInfo",
    value: function devicesV2PassSetWithHttpInfo(id, devicev2Pass) {
      var postBody = devicev2Pass; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2PassSet");
      } // verify the required parameter 'devicev2Pass' is set


      if (devicev2Pass === undefined || devicev2Pass === null) {
        throw new _Error["default"]("Missing the required parameter 'devicev2Pass' when calling devicesV2PassSet");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ArduinoDevicev2Pass["default"];
      return this.apiClient.callApi('/v2/devices/{id}/pass', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * set devices_v2_pass
     * Sets the password for the device. It can never be read back.
     * @param {String} id The id of the device
     * @param {module:model/Devicev2Pass} devicev2Pass 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2Pass}
     */

  }, {
    key: "devicesV2PassSet",
    value: function devicesV2PassSet(id, devicev2Pass) {
      return this.devicesV2PassSetWithHttpInfo(id, devicev2Pass).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return DevicesV2PassApi;
}();

exports["default"] = DevicesV2PassApi;