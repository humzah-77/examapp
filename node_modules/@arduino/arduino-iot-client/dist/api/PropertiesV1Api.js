"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ArduinoProperty = _interopRequireDefault(require("../model/ArduinoProperty"));

var _Error = _interopRequireDefault(require("../model/Error"));

var _Property = _interopRequireDefault(require("../model/Property"));

var _PropertyStringValue = _interopRequireDefault(require("../model/PropertyStringValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* PropertiesV1 service.
* @module api/PropertiesV1Api
* @version 0.0.1
*/
var PropertiesV1Api =
/*#__PURE__*/
function () {
  /**
  * Constructs a new PropertiesV1Api. 
  * @alias module:api/PropertiesV1Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PropertiesV1Api(apiClient) {
    _classCallCheck(this, PropertiesV1Api);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * create properties_v1
   * Creates a new property associated to a thing
   * @param {String} id The id of the thing
   * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
   */


  _createClass(PropertiesV1Api, [{
    key: "propertiesV1CreateWithHttpInfo",
    value: function propertiesV1CreateWithHttpInfo(id, property) {
      var postBody = property; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1Create");
      } // verify the required parameter 'property' is set


      if (property === undefined || property === null) {
        throw new _Error["default"]("Missing the required parameter 'property' when calling propertiesV1Create");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/v1/things/{id}/properties', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * create properties_v1
     * Creates a new property associated to a thing
     * @param {String} id The id of the thing
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */

  }, {
    key: "propertiesV1Create",
    value: function propertiesV1Create(id, property) {
      return this.propertiesV1CreateWithHttpInfo(id, property).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * delete properties_v1
     * Removes a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the property (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "propertiesV1DeleteWithHttpInfo",
    value: function propertiesV1DeleteWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1Delete");
      } // verify the required parameter 'pid' is set


      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV1Delete");
      }

      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/v1/things/{id}/properties/{pid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * delete properties_v1
     * Removes a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the property (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "propertiesV1Delete",
    value: function propertiesV1Delete(id, pid, opts) {
      return this.propertiesV1DeleteWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * list properties_v1
     * Returns the list of properties associated to the thing
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoProperty>} and HTTP response
     */

  }, {
    key: "propertiesV1ListWithHttpInfo",
    value: function propertiesV1ListWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1List");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.property+json; type=collection', 'application/vnd.goa.error+json'];
      var returnType = [_ArduinoProperty["default"]];
      return this.apiClient.callApi('/v1/things/{id}/properties', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * list properties_v1
     * Returns the list of properties associated to the thing
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoProperty>}
     */

  }, {
    key: "propertiesV1List",
    value: function propertiesV1List(id, opts) {
      return this.propertiesV1ListWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * send properties_v1
     * Publish a property value to MQTT, as string
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/PropertyStringValue} propertyStringValue PropertyStringValuePayload describes a property value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "propertiesV1SendWithHttpInfo",
    value: function propertiesV1SendWithHttpInfo(id, pid, propertyStringValue) {
      var postBody = propertyStringValue; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1Send");
      } // verify the required parameter 'pid' is set


      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV1Send");
      } // verify the required parameter 'propertyStringValue' is set


      if (propertyStringValue === undefined || propertyStringValue === null) {
        throw new _Error["default"]("Missing the required parameter 'propertyStringValue' when calling propertiesV1Send");
      }

      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/v1/things/{id}/properties/{pid}/send', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * send properties_v1
     * Publish a property value to MQTT, as string
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/PropertyStringValue} propertyStringValue PropertyStringValuePayload describes a property value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "propertiesV1Send",
    value: function propertiesV1Send(id, pid, propertyStringValue) {
      return this.propertiesV1SendWithHttpInfo(id, pid, propertyStringValue).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * show properties_v1
     * Returns the property requested by the user
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
     */

  }, {
    key: "propertiesV1ShowWithHttpInfo",
    value: function propertiesV1ShowWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1Show");
      } // verify the required parameter 'pid' is set


      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV1Show");
      }

      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/v1/things/{id}/properties/{pid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * show properties_v1
     * Returns the property requested by the user
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */

  }, {
    key: "propertiesV1Show",
    value: function propertiesV1Show(id, pid, opts) {
      return this.propertiesV1ShowWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * update properties_v1
     * Updates a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
     */

  }, {
    key: "propertiesV1UpdateWithHttpInfo",
    value: function propertiesV1UpdateWithHttpInfo(id, pid, property) {
      var postBody = property; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV1Update");
      } // verify the required parameter 'pid' is set


      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV1Update");
      } // verify the required parameter 'property' is set


      if (property === undefined || property === null) {
        throw new _Error["default"]("Missing the required parameter 'property' when calling propertiesV1Update");
      }

      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.property+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/v1/things/{id}/properties/{pid}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * update properties_v1
     * Updates a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */

  }, {
    key: "propertiesV1Update",
    value: function propertiesV1Update(id, pid, property) {
      return this.propertiesV1UpdateWithHttpInfo(id, pid, property).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PropertiesV1Api;
}();

exports["default"] = PropertiesV1Api;