"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ArduinoTags = _interopRequireDefault(require("../model/ArduinoTags"));

var _Error = _interopRequireDefault(require("../model/Error"));

var _Tag = _interopRequireDefault(require("../model/Tag"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* ThingsV2Tags service.
* @module api/ThingsV2TagsApi
* @version 1.4.2
*/
var ThingsV2TagsApi =
/*#__PURE__*/
function () {
  /**
  * Constructs a new ThingsV2TagsApi. 
  * @alias module:api/ThingsV2TagsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ThingsV2TagsApi(apiClient) {
    _classCallCheck(this, ThingsV2TagsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * delete things_v2_tags
   * Delete a tag associated to the thing given its key.
   * @param {String} id The id of the thing
   * @param {String} key The key of the tag
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  _createClass(ThingsV2TagsApi, [{
    key: "thingsV2TagsDeleteWithHttpInfo",
    value: function thingsV2TagsDeleteWithHttpInfo(id, key) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2TagsDelete");
      } // verify the required parameter 'key' is set


      if (key === undefined || key === null) {
        throw new _Error["default"]("Missing the required parameter 'key' when calling thingsV2TagsDelete");
      }

      var pathParams = {
        'id': id,
        'key': key
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/v2/things/{id}/tags/{key}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * delete things_v2_tags
     * Delete a tag associated to the thing given its key.
     * @param {String} id The id of the thing
     * @param {String} key The key of the tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "thingsV2TagsDelete",
    value: function thingsV2TagsDelete(id, key) {
      return this.thingsV2TagsDeleteWithHttpInfo(id, key).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * list things_v2_tags
     * List tags associated to the thing.
     * @param {String} id The id of the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoTags} and HTTP response
     */

  }, {
    key: "thingsV2TagsListWithHttpInfo",
    value: function thingsV2TagsListWithHttpInfo(id) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2TagsList");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ArduinoTags["default"];
      return this.apiClient.callApi('/v2/things/{id}/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * list things_v2_tags
     * List tags associated to the thing.
     * @param {String} id The id of the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoTags}
     */

  }, {
    key: "thingsV2TagsList",
    value: function thingsV2TagsList(id) {
      return this.thingsV2TagsListWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * upsert things_v2_tags
     * Creates or updates a tag associated to the thing.
     * @param {String} id The id of the thing
     * @param {module:model/Tag} tag 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "thingsV2TagsUpsertWithHttpInfo",
    value: function thingsV2TagsUpsertWithHttpInfo(id, tag) {
      var postBody = tag; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2TagsUpsert");
      } // verify the required parameter 'tag' is set


      if (tag === undefined || tag === null) {
        throw new _Error["default"]("Missing the required parameter 'tag' when calling thingsV2TagsUpsert");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/v2/things/{id}/tags', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * upsert things_v2_tags
     * Creates or updates a tag associated to the thing.
     * @param {String} id The id of the thing
     * @param {module:model/Tag} tag 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "thingsV2TagsUpsert",
    value: function thingsV2TagsUpsert(id, tag) {
      return this.thingsV2TagsUpsertWithHttpInfo(id, tag).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return ThingsV2TagsApi;
}();

exports["default"] = ThingsV2TagsApi;