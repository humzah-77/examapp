"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ArduinoThing = _interopRequireDefault(require("../model/ArduinoThing"));

var _ArduinoThinglayout = _interopRequireDefault(require("../model/ArduinoThinglayout"));

var _CreateThingsV1Payload = _interopRequireDefault(require("../model/CreateThingsV1Payload"));

var _Error = _interopRequireDefault(require("../model/Error"));

var _Thing = _interopRequireDefault(require("../model/Thing"));

var _ThingSketch = _interopRequireDefault(require("../model/ThingSketch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* ThingsV1 service.
* @module api/ThingsV1Api
* @version 0.0.1
*/
var ThingsV1Api =
/*#__PURE__*/
function () {
  /**
  * Constructs a new ThingsV1Api. 
  * @alias module:api/ThingsV1Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ThingsV1Api(apiClient) {
    _classCallCheck(this, ThingsV1Api);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * create things_v1
   * Creates a new thing associated to the user
   * @param {module:model/CreateThingsV1Payload} createThingsV1Payload ThingPayload describes a thing
   * @param {Object} opts Optional parameters
   * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
   */


  _createClass(ThingsV1Api, [{
    key: "thingsV1CreateWithHttpInfo",
    value: function thingsV1CreateWithHttpInfo(createThingsV1Payload, opts) {
      opts = opts || {};
      var postBody = createThingsV1Payload; // verify the required parameter 'createThingsV1Payload' is set

      if (createThingsV1Payload === undefined || createThingsV1Payload === null) {
        throw new _Error["default"]("Missing the required parameter 'createThingsV1Payload' when calling thingsV1Create");
      }

      var pathParams = {};
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v1/things', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * create things_v1
     * Creates a new thing associated to the user
     * @param {module:model/CreateThingsV1Payload} createThingsV1Payload ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */

  }, {
    key: "thingsV1Create",
    value: function thingsV1Create(createThingsV1Payload, opts) {
      return this.thingsV1CreateWithHttpInfo(createThingsV1Payload, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * createSketch things_v1
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */

  }, {
    key: "thingsV1CreateSketchWithHttpInfo",
    value: function thingsV1CreateSketchWithHttpInfo(id, thingSketch) {
      var postBody = thingSketch; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV1CreateSketch");
      } // verify the required parameter 'thingSketch' is set


      if (thingSketch === undefined || thingSketch === null) {
        throw new _Error["default"]("Missing the required parameter 'thingSketch' when calling thingsV1CreateSketch");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v1/things/{id}/sketch', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * createSketch things_v1
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */

  }, {
    key: "thingsV1CreateSketch",
    value: function thingsV1CreateSketch(id, thingSketch) {
      return this.thingsV1CreateSketchWithHttpInfo(id, thingSketch).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * delete things_v1
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "thingsV1DeleteWithHttpInfo",
    value: function thingsV1DeleteWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV1Delete");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/v1/things/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * delete things_v1
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "thingsV1Delete",
    value: function thingsV1Delete(id, opts) {
      return this.thingsV1DeleteWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * deleteSketch things_v1
     * @param {String} id The id of the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */

  }, {
    key: "thingsV1DeleteSketchWithHttpInfo",
    value: function thingsV1DeleteSketchWithHttpInfo(id) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV1DeleteSketch");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thing+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v1/things/{id}/sketch', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * deleteSketch things_v1
     * @param {String} id The id of the thing
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */

  }, {
    key: "thingsV1DeleteSketch",
    value: function thingsV1DeleteSketch(id) {
      return this.thingsV1DeleteSketchWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * layout things_v1
     * Returns the thing requested by the user, without last values data
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThinglayout} and HTTP response
     */

  }, {
    key: "thingsV1LayoutWithHttpInfo",
    value: function thingsV1LayoutWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV1Layout");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thinglayout+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThinglayout["default"];
      return this.apiClient.callApi('/v1/things/{id}/layout', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * layout things_v1
     * Returns the thing requested by the user, without last values data
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThinglayout}
     */

  }, {
    key: "thingsV1Layout",
    value: function thingsV1Layout(id, opts) {
      return this.thingsV1LayoutWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * list things_v1
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the things (default to false)
     * @param {String} opts.deviceId The id of the device you want to filter
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted things (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoThing>} and HTTP response
     */

  }, {
    key: "thingsV1ListWithHttpInfo",
    value: function thingsV1ListWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'across_user_ids': opts['acrossUserIds'],
        'device_id': opts['deviceId'],
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thing+json; type=collection'];
      var returnType = [_ArduinoThing["default"]];
      return this.apiClient.callApi('/v1/things', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * list things_v1
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the things (default to false)
     * @param {String} opts.deviceId The id of the device you want to filter
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted things (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoThing>}
     */

  }, {
    key: "thingsV1List",
    value: function thingsV1List(opts) {
      return this.thingsV1ListWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * show things_v1
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */

  }, {
    key: "thingsV1ShowWithHttpInfo",
    value: function thingsV1ShowWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV1Show");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v1/things/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * show things_v1
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */

  }, {
    key: "thingsV1Show",
    value: function thingsV1Show(id, opts) {
      return this.thingsV1ShowWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * update things_v1
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/Thing} thing ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */

  }, {
    key: "thingsV1UpdateWithHttpInfo",
    value: function thingsV1UpdateWithHttpInfo(id, thing, opts) {
      opts = opts || {};
      var postBody = thing; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV1Update");
      } // verify the required parameter 'thing' is set


      if (thing === undefined || thing === null) {
        throw new _Error["default"]("Missing the required parameter 'thing' when calling thingsV1Update");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v1/things/{id}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * update things_v1
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/Thing} thing ThingPayload describes a thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */

  }, {
    key: "thingsV1Update",
    value: function thingsV1Update(id, thing, opts) {
      return this.thingsV1UpdateWithHttpInfo(id, thing, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * updateSketch things_v1
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */

  }, {
    key: "thingsV1UpdateSketchWithHttpInfo",
    value: function thingsV1UpdateSketchWithHttpInfo(id, sketchId) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV1UpdateSketch");
      } // verify the required parameter 'sketchId' is set


      if (sketchId === undefined || sketchId === null) {
        throw new _Error["default"]("Missing the required parameter 'sketchId' when calling thingsV1UpdateSketch");
      }

      var pathParams = {
        'id': id,
        'sketchId': sketchId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v1/things/{id}/sketch/{sketchId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * updateSketch things_v1
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */

  }, {
    key: "thingsV1UpdateSketch",
    value: function thingsV1UpdateSketch(id, sketchId) {
      return this.thingsV1UpdateSketchWithHttpInfo(id, sketchId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return ThingsV1Api;
}();

exports["default"] = ThingsV1Api;