"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ArduinoProperty = _interopRequireDefault(require("../model/ArduinoProperty"));

var _ArduinoTimeseriesmedia = _interopRequireDefault(require("../model/ArduinoTimeseriesmedia"));

var _Error = _interopRequireDefault(require("../model/Error"));

var _Property = _interopRequireDefault(require("../model/Property"));

var _PropertyValue = _interopRequireDefault(require("../model/PropertyValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* PropertiesV2 service.
* @module api/PropertiesV2Api
* @version 1.4.2
*/
var PropertiesV2Api =
/*#__PURE__*/
function () {
  /**
  * Constructs a new PropertiesV2Api. 
  * @alias module:api/PropertiesV2Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PropertiesV2Api(apiClient) {
    _classCallCheck(this, PropertiesV2Api);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * create properties_v2
   * Creates a new property associated to a thing
   * @param {String} id The id of the thing
   * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
   */


  _createClass(PropertiesV2Api, [{
    key: "propertiesV2CreateWithHttpInfo",
    value: function propertiesV2CreateWithHttpInfo(id, property) {
      var postBody = property; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Create");
      } // verify the required parameter 'property' is set


      if (property === undefined || property === null) {
        throw new _Error["default"]("Missing the required parameter 'property' when calling propertiesV2Create");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/v2/things/{id}/properties', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * create properties_v2
     * Creates a new property associated to a thing
     * @param {String} id The id of the thing
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */

  }, {
    key: "propertiesV2Create",
    value: function propertiesV2Create(id, property) {
      return this.propertiesV2CreateWithHttpInfo(id, property).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * delete properties_v2
     * Removes a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the property (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "propertiesV2DeleteWithHttpInfo",
    value: function propertiesV2DeleteWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Delete");
      } // verify the required parameter 'pid' is set


      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Delete");
      }

      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/v2/things/{id}/properties/{pid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * delete properties_v2
     * Removes a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the property (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "propertiesV2Delete",
    value: function propertiesV2Delete(id, pid, opts) {
      return this.propertiesV2DeleteWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * list properties_v2
     * Returns the list of properties associated to the thing
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoProperty>} and HTTP response
     */

  }, {
    key: "propertiesV2ListWithHttpInfo",
    value: function propertiesV2ListWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2List");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_ArduinoProperty["default"]];
      return this.apiClient.callApi('/v2/things/{id}/properties', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * list properties_v2
     * Returns the list of properties associated to the thing
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoProperty>}
     */

  }, {
    key: "propertiesV2List",
    value: function propertiesV2List(id, opts) {
      return this.propertiesV2ListWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * publish properties_v2
     * Publish a property value to MQTT
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/PropertyValue} propertyValue PropertyValuePayload describes a property value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "propertiesV2PublishWithHttpInfo",
    value: function propertiesV2PublishWithHttpInfo(id, pid, propertyValue) {
      var postBody = propertyValue; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Publish");
      } // verify the required parameter 'pid' is set


      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Publish");
      } // verify the required parameter 'propertyValue' is set


      if (propertyValue === undefined || propertyValue === null) {
        throw new _Error["default"]("Missing the required parameter 'propertyValue' when calling propertiesV2Publish");
      }

      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = null;
      return this.apiClient.callApi('/v2/things/{id}/properties/{pid}/publish', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * publish properties_v2
     * Publish a property value to MQTT
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/PropertyValue} propertyValue PropertyValuePayload describes a property value
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "propertiesV2Publish",
    value: function propertiesV2Publish(id, pid, propertyValue) {
      return this.propertiesV2PublishWithHttpInfo(id, pid, propertyValue).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * show properties_v2
     * Returns the property requested by the user
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
     */

  }, {
    key: "propertiesV2ShowWithHttpInfo",
    value: function propertiesV2ShowWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Show");
      } // verify the required parameter 'pid' is set


      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Show");
      }

      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/v2/things/{id}/properties/{pid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * show properties_v2
     * Returns the property requested by the user
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted properties (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */

  }, {
    key: "propertiesV2Show",
    value: function propertiesV2Show(id, pid, opts) {
      return this.propertiesV2ShowWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * timeseries properties_v2
     * Get numerical property's historic data binned on a specified time interval (note: the total number of data points should NOT be greater than 1000 otherwise the result will be truncated)
     * @param {String} id The id of the thing
     * @param {String} pid ID of a numerical property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.desc Whether data's ordering (by time) should be descending (default to false)
     * @param {String} opts.from Get data with a timestamp >= to this date (default: 2 weeks ago, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
     * @param {Number} opts.interval Binning interval in seconds (defaut: the smallest possible value compatibly with the limit of 1000 data points in the response)
     * @param {String} opts.to Get data with a timestamp < to this date (default: now, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoTimeseriesmedia} and HTTP response
     */

  }, {
    key: "propertiesV2TimeseriesWithHttpInfo",
    value: function propertiesV2TimeseriesWithHttpInfo(id, pid, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Timeseries");
      } // verify the required parameter 'pid' is set


      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Timeseries");
      }

      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {
        'desc': opts['desc'],
        'from': opts['from'],
        'interval': opts['interval'],
        'to': opts['to']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ArduinoTimeseriesmedia["default"];
      return this.apiClient.callApi('/v2/things/{id}/properties/{pid}/timeseries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * timeseries properties_v2
     * Get numerical property's historic data binned on a specified time interval (note: the total number of data points should NOT be greater than 1000 otherwise the result will be truncated)
     * @param {String} id The id of the thing
     * @param {String} pid ID of a numerical property
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.desc Whether data's ordering (by time) should be descending (default to false)
     * @param {String} opts.from Get data with a timestamp >= to this date (default: 2 weeks ago, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
     * @param {Number} opts.interval Binning interval in seconds (defaut: the smallest possible value compatibly with the limit of 1000 data points in the response)
     * @param {String} opts.to Get data with a timestamp < to this date (default: now, min: 1842-01-01T00:00:00Z, max: 2242-01-01T00:00:00Z)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoTimeseriesmedia}
     */

  }, {
    key: "propertiesV2Timeseries",
    value: function propertiesV2Timeseries(id, pid, opts) {
      return this.propertiesV2TimeseriesWithHttpInfo(id, pid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * update properties_v2
     * Updates a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoProperty} and HTTP response
     */

  }, {
    key: "propertiesV2UpdateWithHttpInfo",
    value: function propertiesV2UpdateWithHttpInfo(id, pid, property) {
      var postBody = property; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling propertiesV2Update");
      } // verify the required parameter 'pid' is set


      if (pid === undefined || pid === null) {
        throw new _Error["default"]("Missing the required parameter 'pid' when calling propertiesV2Update");
      } // verify the required parameter 'property' is set


      if (property === undefined || property === null) {
        throw new _Error["default"]("Missing the required parameter 'property' when calling propertiesV2Update");
      }

      var pathParams = {
        'id': id,
        'pid': pid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _ArduinoProperty["default"];
      return this.apiClient.callApi('/v2/things/{id}/properties/{pid}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * update properties_v2
     * Updates a property associated to a thing
     * @param {String} id The id of the thing
     * @param {String} pid The id of the property
     * @param {module:model/Property} property PropertyPayload describes a property of a thing. No field is mandatory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoProperty}
     */

  }, {
    key: "propertiesV2Update",
    value: function propertiesV2Update(id, pid, property) {
      return this.propertiesV2UpdateWithHttpInfo(id, pid, property).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PropertiesV2Api;
}();

exports["default"] = PropertiesV2Api;